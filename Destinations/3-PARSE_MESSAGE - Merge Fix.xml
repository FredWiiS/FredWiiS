<channel version="3.4.2">
  <id>961c186a-9d07-4f23-aebe-03dacb1d647e</id>
  <nextMetaDataId>136</nextMetaDataId>
  <name>3-PARSE_MESSAGE</name>
  <description>Ce canal  traite les infgormations qui ont été précedment mappées en fonction des éditeurs&#xd;
 &#xd;
&#xd;
&#xd;
Ce canal peut être duppliqué pour parser de façons différentes les messages de chaque constructeur.&#xd;
&#xd;
*********************************&#xd;
 D E S T I N  A T I O N S&#xd;
*********************************&#xd;
&#xd;
Oauth2 : &#xd;
--------&#xd;
permet d&apos;obtenir un jetton de session pour ensuite être autorisé à accéder aux APII de BeacOre&#xd;
&#xd;
MAPPING : &#xd;
--------- &#xd;
Tous le mapping est fait au début du message.&#xd;
De manière à adapter le channel à un site client en changeant uniquement le contenu de la destination mapping.&#xd;
&#xd;
un filtre permet de detecter l&apos;origine du message &quot;Sebnding_application&quot; et n&apos;exécutera que le mapping de l&apos;éditeurs concerné.&#xd;
&#xd;
Toutes les autres destinations ne necessitent aucune modifications elles traitent les événements en fonction de l&apos;existance ou non des information après mapping.&#xd;
&#xd;
Attention : pour certains éditeurs certians messages peuvent contenir des orccurences et plusierus examens dans un même message&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
GEstion des status de traitements de messagesnet gestion des erreurs &#xd;
--------------- --------------------------------------------------&#xd;
Le message est mis dès le départ à PENDING, &#xd;
une fois le parsing fini le message est passé soit à DONE soit a FAILED.&#xd;
&#xd;
Dans le Pos-processor du message, à chaque destination traitées&#xd;
&#xd;
Pour lgguer le détail dans la table LOG il faut changer dans la table  SETTING environnement dans bea : DEV à la pace de PROD .&#xd;
&#xd;
&#xd;
--------------&#xd;
Upsert  Patient :&#xd;
--------------&#xd;
Quelque soit le type de messages  dès qu&apos;un segment PID est détecté,&#xd;
il va être mappé pour savoir s&apos;il faut créer ou mettre à jour un patient.&#xd;
 &#xd;
Les informations du patient comprises dans le segment &quot;PID&quot; sont insérées ou mise à jour si nécessaire dans  la table &quot;patient&quot; grâce au sous channel Upsert_patient.&#xd;
&#xd;
Le patient est recherché par son IPP  pour l&apos;authorité d&apos;assignation qui a envoyé le message.&#xd;
table External_Id.&#xd;
&#xd;
Le segment ROL médecin est aussi mappé et traité dans l&apos;Upsert referring Doctor&#xd;
-------------------------------------------------------------------------------&#xd;
Regles: Recherche avec code RPPS. &#xd;
Si trouvé : le médecin traitant est rataché au patient&#xd;
Sinon : on le créer sans code RPPS et on le rattache au patient (seulement si il y a un contenau dans le segment ROL) &#xd;
&#xd;
**  utilisé uniquement a CAP santé : Upsert PID Multiples Assigning Authority&#xd;
** evolution du modèle de donnée a prevoir pourn généraliser la fonctionnalitsé&#xd;
&#xd;
------------------------------------------&#xd;
Find Patient Admit On Borne No study Found.&#xd;
Merge Patient Admit On borne&#xd;
-----------------------------------------&#xd;
ces deux destinations fonctionnent ensembles.&#xd;
Elle doivent être filtrées pour n&apos;être exécutées qu&apos;après que le patient soit enregistrée et acueilli dans le RIS (ORM , ADT08 si nmodif nom , SIU14 admission NGI).&#xd;
&#xd;
Dans le cas ou le nom, prenom était erroné lors de la prise de Rendez-vous téléphonique ou sur la carte vitale. L&apos;admission du patient été faite sur la borne avec un autre nom prenom. Et cela a créé un doublon pour le même patient.&#xd;
&#xd;
On considère que le nom, prenom, date de naissance saisie par le patient sur la borne est le bon.&#xd;
Et que après accueil dans le RIS  , la correction dans la base du RIS a été faite.&#xd;
On peut donc maintenant recevoir le bon nom , prenom associé au bon IPP.&#xd;
&#xd;
Cette destination sert à retrouver l&apos;ID patient qui s&apos;est enregistrée sur la borne pour&#xd;
Recupèree le N° de ticket papier si correctif nom RIS&#xd;
Et fusionner les informations de ce patient.&#xd;
Récupérer les documents numérisé , les questionnaires pour les mettre sur le bon patient&#xd;
** ancien backend : /api/patient/${patient_idFromBorne}/mergehl7/${patient_id} &#xd;
&#xd;
Patient Merge ADT40 :&#xd;
-----------------&#xd;
cette fusion est différente de la precedente elle concerne une demande de fusion réalisée dans un logiciel tiers.&#xd;
&#xd;
&#xd;
En cas de fusion (&quot;ADT^A40&quot;) l&apos;ensembles des examens du patient à fusionner sont reliés au nouveau patient puis l&apos;ancien patient est effacé.&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
Visit Information SIU et ORM&#xd;
----------------------------&#xd;
Deux destination permettant de mapper différement les informations &#xd;
&#xd;
&#xd;
En cas d&apos;admission (&quot;ADT^A01&quot; ou &quot;ADT^A04&quot;) la date d&apos;admission est mise à jour et le statut &quot;ADMITTED_FROM_SECRETARY&quot; est indiqué. Ces modifications n&apos;ont lieu que si le patient n&apos;est pas déjà  dans un statut admit.&#xd;
&#xd;
En cas de message contenant des informations d&apos;examen (&quot;ORM^O01&quot;, &quot;ORU^R01&quot;, &quot;OMG^O19&quot;, &quot;OMI^O23&quot;), les informations de visite sont enregistrées dans la table &quot;hl7_visit&quot;,&#xd;
&#xd;
les informations de la demande dans la table &quot;hl7_order&quot; et les informations d&apos;observation (&quot;ORU^R01&quot;) dans &quot;hl7_observation_request&quot;.&#xd;
&#xd;
Le type d&apos;examen est ajouté dans &quot;study_type&quot; si non présent, la modalité dans &quot;modality&quot;.&#xd;
&#xd;
Enfin si le statut de la demande correspond à un code d&apos;annulation, d&apos;erreur ou de suppresion, l&apos;examen est retiré de la table &quot;study&quot; sinon il est ajouté ou mis à jour le cas échéant.&#xd;
&#xd;
Modif : filter patientNextStep a réception d&apos;un ORM CM/&#xd;
si la secrétaire a rappelé et accuilli le patient au secrétarait , lorsqu&apos;il est en attente de facturation.&#xd;
Son status redevient admission_in_progress_from_sec&#xd;
et cela a pour éffet de bord de remettre le patient en attente exament a réception du CM.&#xd;
&#xd;
La correction consisterai a gérer un action Button dans Bea Manager qui conserve le status admission_in_progress_fo_billing a la place./&#xd;
En attendant on limite les effets pour le site de RIV en supprimant le NExtstep si la secrétaire l&apos;a appelé avatn qu&apos;on ai reçu lORM CM&#xd;
&#xd;
Creation des codifications avant creation des examens&#xd;
------------------------------------------------------&#xd;
upsert  Location_code :  si elle n&apos;existe pas on la crée, si elle existe on la met à jour (ou non selon le site pour ne as toucher au libellé)&#xd;
upsert  study_type :  si cette codifictaione n&apos;existe pas on la crée, si elle existe on la met à jour (ou non selon le site pour ne as toucher au libellé)&#xd;
upsert  Modality :  si elle n&apos;existe pas on la crée, si elle existe on la met à jour (ou non selon le site pour ne as toucher au libellé)&#xd;
&#xd;
Creation ds examens :upsert STUDY&#xd;
--------------------&#xd;
&#xd;
&#xd;
</description>
  <enabled>true</enabled>
  <lastModified>
    <time>1712565727182</time>
    <timezone>Europe/Paris</timezone>
  </lastModified>
  <revision>19</revision>
  <sourceConnector version="3.4.2">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="3.4.2">
      <pluginProperties/>
      <sourceConnectorProperties version="3.4.2">
        <responseVariable>Postprocessor</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>1</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
    </properties>
    <transformer version="3.4.2">
      <steps>
        <step>
          <sequenceNumber>0</sequenceNumber>
          <name>messageHeader</name>
          <script>var mapping;

try {
	mapping = msg[&apos;MSH&apos;]; 
} catch (e) {
	logger.error(e);
	mapping = &apos;&apos;;
}

channelMap.put(&apos;messageHeader&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
          <type>Mapper</type>
          <data>
            <entry>
              <string>Variable</string>
              <string>messageHeader</string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;MSH&apos;]</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
            <entry>
              <string>isGlobal</string>
              <string>channel</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>1</sequenceNumber>
          <name>message_control_id</name>
          <script>var mapping;

try {
	mapping = msg[&apos;MSH&apos;][&apos;messageControlId_value&apos;]; 
} catch (e) {
	logger.error(e);
	mapping = &apos;&apos;;
}

channelMap.put(&apos;message_control_id&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
          <type>Mapper</type>
          <data>
            <entry>
              <string>Variable</string>
              <string>message_control_id</string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;MSH&apos;][&apos;messageControlId_value&apos;]</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
            <entry>
              <string>isGlobal</string>
              <string>channel</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>2</sequenceNumber>
          <name>patient</name>
          <script>var mapping;

try {
	mapping = msg[&apos;PATIENT&apos;]; 
} catch (e) {
	logger.error(e);
	mapping = &apos;&apos;;
}

channelMap.put(&apos;patient&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
          <type>Mapper</type>
          <data>
            <entry>
              <string>Variable</string>
              <string>patient</string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;PATIENT&apos;]</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
            <entry>
              <string>isGlobal</string>
              <string>channel</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>3</sequenceNumber>
          <name>patientToMerge</name>
          <script>var mapping;

try {
	mapping = msg[&apos;MERGE&apos;]; 
} catch (e) {
	logger.error(e);
	mapping = &apos;&apos;;
}

channelMap.put(&apos;patientToMerge&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
          <type>Mapper</type>
          <data>
            <entry>
              <string>Variable</string>
              <string>patientToMerge</string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;MERGE&apos;]</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
            <entry>
              <string>isGlobal</string>
              <string>channel</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>4</sequenceNumber>
          <name>visit</name>
          <script>var mapping;

try {
	mapping = msg[&apos;VISIT&apos;]; 
} catch (e) {
	logger.error(e);
	mapping = &apos;&apos;;
}

channelMap.put(&apos;visit&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
          <type>Mapper</type>
          <data>
            <entry>
              <string>Variable</string>
              <string>visit</string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;VISIT&apos;]</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
            <entry>
              <string>isGlobal</string>
              <string>channel</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>5</sequenceNumber>
          <name>insurance</name>
          <script>var mapping;

try {
	mapping = msg[&apos;INSURANCE&apos;]; 
} catch (e) {
	logger.error(e);
	mapping = &apos;&apos;;
}

channelMap.put(&apos;insurance&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
          <type>Mapper</type>
          <data>
            <entry>
              <string>Variable</string>
              <string>insurance</string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;INSURANCE&apos;]</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
            <entry>
              <string>isGlobal</string>
              <string>channel</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>6</sequenceNumber>
          <name>referringDoctor</name>
          <script>var mapping;

try {
	mapping = msg[&apos;REFERRING_DOCTOR&apos;]; 
} catch (e) {
	logger.error(e);
	mapping = &apos;&apos;;
}

channelMap.put(&apos;referringDoctor&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
          <type>Mapper</type>
          <data>
            <entry>
              <string>Variable</string>
              <string>referringDoctor</string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;REFERRING_DOCTOR&apos;]</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
            <entry>
              <string>isGlobal</string>
              <string>channel</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>7</sequenceNumber>
          <name>studies</name>
          <script>var mapping;

try {
	mapping = msg[&apos;STUDIES&apos;]; 
} catch (e) {
	logger.error(e);
	mapping = &apos;&apos;;
}

channelMap.put(&apos;studies&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
          <type>Mapper</type>
          <data>
            <entry>
              <string>Variable</string>
              <string>studies</string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;STUDIES&apos;]</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
            <entry>
              <string>isGlobal</string>
              <string>channel</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>8</sequenceNumber>
          <name>nextStep</name>
          <script>var mapping;

try {
	mapping = msg[&apos;nextStep&apos;]; 
} catch (e) {
	logger.error(e);
	mapping = &apos;&apos;;
}

channelMap.put(&apos;nextStep&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
          <type>Mapper</type>
          <data>
            <entry>
              <string>Variable</string>
              <string>nextStep</string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;nextStep&apos;]</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
            <entry>
              <string>isGlobal</string>
              <string>channel</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>9</sequenceNumber>
          <name>documents</name>
          <script>var mapping;

try {
	mapping = msg[&apos;DOCUMENTS&apos;]; 
} catch (e) {
	logger.error(e);
	mapping = &apos;&apos;;
}

channelMap.put(&apos;documents&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
          <type>Mapper</type>
          <data>
            <entry>
              <string>Variable</string>
              <string>documents</string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;DOCUMENTS&apos;]</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
            <entry>
              <string>isGlobal</string>
              <string>channel</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>10</sequenceNumber>
          <name>deeplink_json</name>
          <script>var mapping;

try {
	mapping = msg; 
} catch (e) {
	logger.error(e);
	mapping = &apos;&apos;;
}

channelMap.put(&apos;deeplink_json&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
          <type>Mapper</type>
          <data>
            <entry>
              <string>Variable</string>
              <string>deeplink_json</string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
            <entry>
              <string>isGlobal</string>
              <string>channel</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>11</sequenceNumber>
          <name>form_filled</name>
          <script>var mapping;

try {
	mapping = msg[&apos;FORM_FILLED&apos;]; 
} catch (e) {
	logger.error(e);
	mapping = &apos;&apos;;
}

channelMap.put(&apos;form_filled&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
          <type>Mapper</type>
          <data>
            <entry>
              <string>Variable</string>
              <string>form_filled</string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;FORM_FILLED&apos;]</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
            <entry>
              <string>isGlobal</string>
              <string>channel</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>12</sequenceNumber>
          <name>code_site</name>
          <script>var mapping;

try {
	mapping = msg[&apos;MSH&apos;][&apos;codeSite&apos;]; 
} catch (e) {
	logger.error(e);
	mapping = &apos;&apos;;
}

channelMap.put(&apos;code_site&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
          <type>Mapper</type>
          <data>
            <entry>
              <string>Variable</string>
              <string>code_site</string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;MSH&apos;][&apos;codeSite&apos;]</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
            <entry>
              <string>isGlobal</string>
              <string>channel</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>13</sequenceNumber>
          <name>incorrectVisitNumber</name>
          <script>var mapping;

try {
	mapping = msg[&apos;MERGE_VISIT&apos;][&apos;incorrectVisitNumber&apos;]; 
} catch (e) {
	logger.error(e);
	mapping = &apos;&apos;;
}

channelMap.put(&apos;incorrectVisitNumber&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
          <type>Mapper</type>
          <data>
            <entry>
              <string>Variable</string>
              <string>incorrectVisitNumber</string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;MERGE_VISIT&apos;][&apos;incorrectVisitNumber&apos;]</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
            <entry>
              <string>isGlobal</string>
              <string>channel</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>14</sequenceNumber>
          <name>newVisitNumber</name>
          <script>var mapping;

try {
	mapping = msg[&apos;MERGE_VISIT&apos;][&apos;newVisitNumber&apos;]; 
} catch (e) {
	logger.error(e);
	mapping = &apos;&apos;;
}

channelMap.put(&apos;newVisitNumber&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
          <type>Mapper</type>
          <data>
            <entry>
              <string>Variable</string>
              <string>newVisitNumber</string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;MERGE_VISIT&apos;][&apos;newVisitNumber&apos;]</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
            <entry>
              <string>isGlobal</string>
              <string>channel</string>
            </entry>
          </data>
        </step>
      </steps>
      <inboundTemplate encoding="base64">eyAJIk1TSCI6IHsKCQkic2VuZGluZ0FwcGxpY2F0aW9uX25hbWVzcGFjZUlkIjogbnVsbCwgCgkJ
InNlbmRpbmdGYWNpbGl0eV9uYW1lc3BhY2VJZCI6IG51bGwsCgkJImRhdGVPclRpbWVPZk1lc3Nh
Z2VfdGltZU9mQW5FdmVudCI6IG51bGwsIAoJCSJtZXNzYWdlVHlwZSI6IG51bGwsIAoJCSJtZXNz
YWdlVHlwZV90cmlnZ2VyRXZlbnQiOiBudWxsLCAKCQkibWVzc2FnZUNvbnRyb2xJZF92YWx1ZSI6
IG51bGwsIAoJCSJhY2NlcHRBY2tub3dsZWRnbWVudFR5cGVfdmFsdWUiOiBudWxsLCAKCQkiYXBw
bGljYXRpb25BY2tub3dsZWRnbWVudFR5cGVfdmFsdWUiOiBudWxsLCAKCQkic2VxdWVuY2VOdW1i
ZXJfdmFsdWUiOiBudWxsICwgCiAgICAgICAgImNvZGVTaXRlIjogbnVsbCAKCX0sCgkiUEFUSUVO
VCI6IHsKCQkiaGw3X2lkZW50aWZpZXIiOiBudWxsLCAKCQkiaGw3X2lkZW50aWZpZXJMaXN0Ijog
bnVsbCwgCgkJImxhc3RfbmFtZSI6IG51bGwsIAoJCSJiaXJ0aG5hbWUiIDogbnVsbCwKCQkiZmly
c3RfbmFtZSI6IG51bGwsIAoJCSJiaXJ0aGRhdGUiOiBudWxsLCAKCQkic2V4IjogbnVsbCwgCgkJ
InN0cmVldF9hZGRyZXNzIjogbnVsbCwgCgkJImNpdHkiOiBudWxsLCAKCQkic3RhdGUiOiBudWxs
LCAKCQkiemlwX2NvZGUiOiBudWxsLCAKCQkicHJpdmF0ZV9waG9uZV9udW1iZXIiOiBudWxsLCAK
CQkiYnVzaW5lc3NfcGhvbmVfbnVtYmVyIjogbnVsbCwgCgkJIm1haWwiOiBudWxsLAoJCSJoZWln
aHQiIDogbnVsbCwKCQkid2VpZ2h0IiA6IG51bGwKCX0sCgkiTUVSR0UiOiB7CgkJIlBhdGllbnRJ
ZGVudGlmaWVyTGlzdF9pZCI6ICBudWxsLAoJCSJhc3NpZ25pbmdfYXV0aG9yaXR5X25hbWVzcGFj
ZV9pZCI6ICBudWxsLAoJCSJ0eXBlX2NvZGVfaWQiIDoJIG51bGwKCX0sCgkiVklTSVQiOiB7Cgkg
ICAgICAgICJwYXRpZW50X2NsYXNzIjogIAkgCW51bGwsCgkgICAgICAgICJhZG1pc3Npb25fdHlw
ZSI6IAkJbnVsbCAsCgkgICAgICAgICJwcmVhZG1pdF9udW1iZXIiOiAJCW51bGwgLAoJICAgICAg
ICAiYWRtaXRfbnVtYmVyIjogCQludWxsLAoJICAgICAgICAidmlzaXRfZGVzY3JpcHRpb24iOiAg
ICBudWxsLAoJICAgICAgICAiYXR0ZW5kaW5nX2RvY3Rvcl9leHRlcm5hbF9pZCI6IAkJbnVsbCwK
CSAgICAgICAgInJlZmVycmluZ19kb2N0b3JfZXh0ZXJuYWxfaWQiOiAgCQludWxsLAoJICAgICAg
ICAiY29uc3VsdGluZ19kb2N0b3JfZXh0ZXJuYWxfaWQiOiAgCQludWxsLAoJICAgICAgICAiYWRt
aXR0aW5nX2RvY3Rvcl9leHRlcm5hbF9pZCI6IAkJbnVsbCwKCSAgICAgICAgImhvc3BpdGFsX3Nl
cnZpY2UiOiAgCQkgICAJCQludWxsLAoJICAgICAgICAiYWRtaXRfc291cmNlIjoJCSAgICAgICAg
ICAgIAkJbnVsbCwKCSAgICAgICAgImFtYnVsYXRvcnlfc3RhdHVzIjogCQkJCQludWxsLAoJICAg
ICAgICAibWVkaWNhbF9jYXJlX3Byb3RvY29sX2NvZGUiOiAJCQludWxsLAoJICAgICAgICAibWVk
aWNhbF9jYXJlX3Byb3RvY29sX2Rlc2NyaXB0aW9uIjogCW51bGwsCgkgICAgICAgICJ2aXBfaW5k
aWNhdG9yIjogICAgIAkJCQkgCW51bGwsCgkgICAgICAgICJleHBlY3RlZF9hZG1pdF9kYXRldGlt
ZSI6CQkgCSAJbnVsbCwKCSAgICAgICAgImFkbWl0X2RhdGV0aW1lIjogCQkJCQkgCW51bGwsCgkg
ICAgICAgICJleHBlY3RlZF9kaXNjaGFyZ2VfZGF0ZXRpbWUiOgkJIAludWxsLAoJICAgICAgICAi
ZGlzY2hhcmdlX2RhdGV0aW1lIjogCQkJICAgICAJbnVsbAoJfSwKICAgIk1FUkdFX1ZJU0lUIjog
ewoJCSJpbmNvcnJlY3RWaXNpdE51bWJlciI6ICBudWxsLAoJCSJuZXdWaXNpdE51bWJlciI6ICBu
dWxsCgl9LAoJIklOU1VSQU5DRSI6IHsKCQkidHlwZSI6ICBudWxsLAoJCSJuaXIiOiBudWxsLAoJ
CSJhbW9fY29kZV9yZWdpbWVfY2Fpc3NlX2NlbnRyZSI6IG51bGwsCgkJImFtb19kcm9pdF9kZWJ1
dCI6IG51bGwsCgkJImFtb19kcm9pdF9maW4iOiBudWxsCgl9LCAKCSJSRUZFUlJJTkdfRE9DVE9S
IjogewoJCSJsYXN0X25hbWUiOiAgbnVsbCwKCQkiZmlyc3RfbmFtZSI6ICBudWxsLAoJCSJycHBz
X251bWJlciI6IG51bGwsCgkJInN0cmVldCI6ICAJbnVsbCwKCQkiY2l0eSI6ICBudWxsLAoJCSJ6
aXBfY29kZSI6ICBudWxsLAoJCSJwaG9uZV9udW1iZXIiOiBudWxsCgl9LCAKCSJTVFVESUVTIjog
W3sKICAgICAgICAiYXBwb2ludGVtZW50X251bWJlciI6ICAJbnVsbCAsCgkJImFjY2Vzc2lvbl9u
dW1iZXIiOiAgCW51bGwgLAoJCSJpbnN0YW5jZV91aWQiOiAgCQludWxsICwKCQkic2NoZWR1bGVk
X2RhdGV0aW1lIjogCW51bGwgLAkKCQkibG9jYXRpb25fY29kZSI6ICAgIAludWxsICwJICAgCgkJ
ImxvY2F0aW9uX2xhYmVsIjogCSAJbnVsbCAsCQoJCSJsb2NhdGlvbl90eXBlX2NvZGUiOiAJIAlu
dWxsICwJCgkJImxvY2F0aW9uX3RpY2tldF9tZXNzYWdlIjogCSAJbnVsbCAsCQoJCSJsb2NhdGlv
bl9wYXBlcl9tZXNzYWdlIjogCSAJbnVsbCAsCQoJCSJzdHVkeV9zdGF0dXNfY29kZSI6ICAJbnVs
bCAsCQoJCSJzdHVkeV90eXBlX2NvZGUiOiAJIAludWxsICwJCgkJInNoaWZ0X2NvZGUiOiAJCSAJ
bnVsbCAsCgkJImJvcm5lU3R1ZHlMYWJlbCI6CSBudWxsLAoJCSJtYW5hZ2VyU3R1ZHlMYWJlbCI6
IG51bGwsCiAgICAJImFsdGVybmF0aXZlQ29kZSI6IG51bGwsCiAgICAJInJlY29tbWVuZGF0aW9u
IjogbnVsbCwKICAgIAkic3R1ZHlHcm91cENvZGUiOiBudWxsLAoJCSJtb2RhbGl0eV9jb2RlIjog
CQludWxsICwJCgkJIm1vZGFsaXR5X3RleHQiOiAJCW51bGwgLAkKCQkib3JpZ2luIjogCQkJCW51
bGwgLAoJCSJkdXJhdGlvbiI6IAkJCW51bGwsCgkJInByZXNjcmliaW5nX2RvY3RvciI6IHsKCQkJ
CSJycHBzX251bWJlciI6IG51bGwsCgkJCQkibGFzdF9uYW1lIjogICBudWxsLAoJCQkJImZpcnN0
X25hbWUiOiAgbnVsbAoJCX0sCgkJInBoeXNpY2lhbl9kb2N0b3IiOiB7CgkJCQkicnBwc19udW1i
ZXIiOiBudWxsLAoJCQkJImxhc3RfbmFtZSI6ICAgbnVsbCwKCQkJCSJmaXJzdF9uYW1lIjogIG51
bGwKCQl9CiAgICAgfV0sCgkiRE9DVU1FTlRTIjogW3sKICAgICAgICAiZG9jdW1lbnRUeXBlQ29k
ZSIgOiAJbnVsbCwKCQkiZG9jdW1lbnRUeXBlTGliZWxsZSIgOgludWxsLAoJCSJkb2N1bWVudENv
bnRlbnQiOgkJbnVsbCwKCQkidGFyZ2V0Rm9ybWF0IjoJCSAgICBudWxsLAoJCSJlbmNvZGVkRm9y
bWF0IjoJCW51bGwsCgkJImxpbmtsZXZlbCI6ICAgCQkgICAgbnVsbCwKCQkic3R1ZHlBY2NOdW1U
b0xpbmsiOiAgICBudWxsLAogICAgICAgICJzdHVkeUluc3RhbmNlVWlkIjoJCW51bGwsCiAgICAg
ICAgImRvY3VtZW50RGF0ZSI6ICAgICAgICAgbnVsbCwgICAKCQkic291cmNlIiA6IAkgICAgICAg
ICAgICBudWxsCiAgICAgIH1dLAoJIkZPUk1fRklMTEVEIjogW3sKCQkiZm9ybUNvZGUiOiAJIAkJ
bnVsbCwKCQkiZm9ybUxhYmVsIiA6IAkgCQludWxsLAoJCSJxdWVzdGlvbkNvZGUiIDoJCW51bGws
CgkJInF1ZXN0aW9uTGFiZWwiIDoJCW51bGwsCgkJImdpdmVuQW5zd2VyIiA6IAkJbnVsbCwKCQki
bGlua0xldmVsIiA6CQkJbnVsbCwKCQkic3R1ZHlBY2NOdW1Ub0xpbmsiOgludWxsCiAgICAgIH1d
LAogICAgICJuZXh0U3RlcCIgOiBudWxsIAp9</inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundDataType>JSON</inboundDataType>
      <outboundDataType>JSON</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
        <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
        <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </outboundProperties>
    </transformer>
    <filter version="3.4.2">
      <rules/>
    </filter>
    <transportName>Channel Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="3.4.2">
      <metaDataId>54</metaDataId>
      <name>Oauth2 - accessToken</name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <host>http://localhost/userd/login</host>
        <useProxyServer>false</useProxyServer>
        <proxyAddress></proxyAddress>
        <proxyPort></proxyPort>
        <method>post</method>
        <headers class="linked-hash-map"/>
        <parameters class="linked-hash-map"/>
        <responseXmlBody>false</responseXmlBody>
        <responseParseMultipart>true</responseParseMultipart>
        <responseIncludeMetadata>false</responseIncludeMetadata>
        <responseBinaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</responseBinaryMimeTypes>
        <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
        <multipart>false</multipart>
        <useAuthentication>false</useAuthentication>
        <authenticationType>Basic</authenticationType>
        <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
        <username></username>
        <password></password>
        <content>{
	&quot;login&quot;:&quot;admin&quot;,
	&quot;password&quot;:&quot;admin&quot;
}</content>
        <contentType>application/json</contentType>
        <dataTypeBinary>false</dataTypeBinary>
        <charset>UTF-8</charset>
        <socketTimeout>30000</socketTimeout>
      </properties>
      <transformer version="3.4.2">
        <steps/>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>accessToken</name>
            <script>var mapping;

try {
	mapping = msg[&apos;token&apos;]; 
} catch (e) {
	logger.error(e);
	mapping = &apos;&apos;;
}

channelMap.put(&apos;accessToken&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
            <type>Mapper</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>accessToken</string>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;token&apos;]</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>isGlobal</string>
                <string>channel</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64">ewogICAgInN1Y2Nlc3MiOiAiIiwKICAgICJ1c2VyIjogIiIsCiAgICAidG9rZW4iOiAiIiwKICAg
ICJzZXR0aW5ncyI6ICIiCn0=</inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules/>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.4.2">
      <metaDataId>124</metaDataId>
      <name>Upsert Patient (onlyForInsert)</name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>true</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <host>http://localhost/beacore/patients/upsert</host>
        <useProxyServer>false</useProxyServer>
        <proxyAddress></proxyAddress>
        <proxyPort></proxyPort>
        <method>post</method>
        <headers class="linked-hash-map">
          <entry>
            <string>Authorization</string>
            <list>
              <string>Bearer ${accessToken}</string>
            </list>
          </entry>
          <entry>
            <string>Content-Type</string>
            <list>
              <string>application/json</string>
            </list>
          </entry>
        </headers>
        <parameters class="linked-hash-map">
          <entry>
            <string>autoMerge</string>
            <list>
              <string>true</string>
            </list>
          </entry>
        </parameters>
        <responseXmlBody>false</responseXmlBody>
        <responseParseMultipart>true</responseParseMultipart>
        <responseIncludeMetadata>false</responseIncludeMetadata>
        <responseBinaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</responseBinaryMimeTypes>
        <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
        <multipart>false</multipart>
        <useAuthentication>false</useAuthentication>
        <authenticationType>Basic</authenticationType>
        <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
        <username></username>
        <password></password>
        <content>${message.transformedData}</content>
        <contentType>application/json</contentType>
        <dataTypeBinary>false</dataTypeBinary>
        <charset>UTF-8</charset>
        <socketTimeout>30000</socketTimeout>
      </properties>
      <transformer version="3.4.2">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>patient</name>
            <script>tmp[&apos;patient&apos;][&apos;lastname&apos;]  =    $(&apos;patient&apos;).last_name
tmp[&apos;patient&apos;][&apos;birthName&apos;]     =    $(&apos;patient&apos;).birthname
tmp[&apos;patient&apos;][&apos;firstname&apos;]     =       $(&apos;patient&apos;).first_name
tmp[&apos;patient&apos;][&apos;birthdate&apos;]     =       $(&apos;patient&apos;).birthdate
tmp[&apos;patient&apos;][&apos;sex&apos;]       =       $(&apos;patient&apos;).sex


	tmp[&apos;patient&apos;][&apos;height&apos;]		= $(&apos;patient&apos;).height || null
	tmp[&apos;patient&apos;][&apos;weight&apos;]		= $(&apos;patient&apos;).weight || null	
	
	tmp[&apos;patient&apos;][&apos;ssnNumber&apos;]   =    $(&apos;insurance&apos;).nir
	    
	tmp[&apos;patient&apos;][&apos;streetAddress&apos;]= $(&apos;patient&apos;).street_address
	tmp[&apos;patient&apos;][&apos;city&apos;]        =     $(&apos;patient&apos;).city
	tmp[&apos;patient&apos;][&apos;state&apos;]       =     $(&apos;patient&apos;).state
	tmp[&apos;patient&apos;][&apos;zipCode&apos;]     =     $(&apos;patient&apos;).zip_code
	
	tmp[&apos;patient&apos;][&apos;identityReliabilityCode&apos;] =  $(&apos;patient&apos;).identity_reliability_code
	tmp[&apos;patient&apos;][&apos;privatePhoneNumber&apos;] =    $(&apos;patient&apos;).private_phone_number
	tmp[&apos;patient&apos;][&apos;businessPhoneNumber&apos;] =   $(&apos;patient&apos;).business_phone_number
	tmp[&apos;patient&apos;][&apos;mail&apos;] =              $(&apos;patient&apos;).mail
	   
	var first_nameList = $(&apos;patient&apos;).first_nameList
	if (first_nameList != &apos;&apos; ||  first_nameList != null){
	    var first_nameListArray = []
	    
	    first_nameListArray = first_nameList.split(&apos; &apos;)
	    tmp[&apos;patient&apos;][&apos;firstName2&apos;]    =       first_nameListArray[1]
	    tmp[&apos;patient&apos;][&apos;firstName3&apos;]    =       first_nameListArray[2]
	    tmp[&apos;patient&apos;][&apos;firstName4&apos;]    =       first_nameListArray[3]
	}
	else {
	    tmp[&apos;patient&apos;][&apos;firstName2&apos;]    =   &apos;&apos;
	    tmp[&apos;patient&apos;][&apos;firstName3&apos;]    =   &apos;&apos;
	    tmp[&apos;patient&apos;][&apos;firstName4&apos;]  =   &apos;&apos;
	}


var first_nameList = $(&apos;patient&apos;).first_nameList
 	if (first_nameList != &apos;&apos; ||  first_nameList != null){
 		var first_nameListArray = []
 	
	 	first_nameListArray = first_nameList.split(&apos; &apos;)
	 	tmp[&apos;patient&apos;][&apos;firstName2&apos;] 	=   	first_nameListArray[1]
		tmp[&apos;patient&apos;][&apos;firstName3&apos;] 	=   	first_nameListArray[2]
		tmp[&apos;patient&apos;][&apos;firstName4&apos;] 	=   	first_nameListArray[3]
	}
	else {
		tmp[&apos;patient&apos;][&apos;firstName2&apos;] 	=   &apos;&apos;
		tmp[&apos;patient&apos;][&apos;firstName3&apos;] 	=   &apos;&apos;
		tmp[&apos;patient&apos;][&apos;firstName4&apos;]  =   &apos;&apos;
	}

	   
var identifierList = $(&apos;patient&apos;).hl7_identifierList
var identifierListToFind = []

for(var i = 0; i &lt;  identifierList.length; i++) {
	//if (identifierList[i][&apos;oid&apos;].toString() != null){	
		identifierListToFind.push({     
			&quot;externalId&quot; : 		identifierList[i][&apos;id&apos;].toString() ,
	          &quot;assigningAuthority&quot; :   identifierList[i][&apos;assigning_authority_namespace_id&apos;].toString(),
	          &quot;identifiantTypeCode&quot; :  identifierList[i][&apos;type_code_id&apos;].toString(),
	          &quot;oid&quot; :  				identifierList[i][&apos;oid&apos;].toString()	        	,
	          &quot;universalIdType&quot; : 	identifierList[i][&apos;universal_id_type&apos;].toString()
		});
	/*}
	else {
		identifierListToFind.push({     
			&quot;externalId&quot; : 		identifierList[i][&apos;id&apos;].toString() ,
	          &quot;assigningAuthority&quot; :   identifierList[i][&apos;assigning_authority_namespace_id&apos;].toString(),
	          &quot;identifiantTypeCode&quot; :  identifierList[i][&apos;type_code_id&apos;].toString()
		});
	}*/
 }

 tmp[&apos;identifiers&apos;]  = identifierListToFind;</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>tmp[&apos;patient&apos;][&apos;lastname&apos;]  =    $(&apos;patient&apos;).last_name
tmp[&apos;patient&apos;][&apos;birthName&apos;]     =    $(&apos;patient&apos;).birthname
tmp[&apos;patient&apos;][&apos;firstname&apos;]     =       $(&apos;patient&apos;).first_name
tmp[&apos;patient&apos;][&apos;birthdate&apos;]     =       $(&apos;patient&apos;).birthdate
tmp[&apos;patient&apos;][&apos;sex&apos;]       =       $(&apos;patient&apos;).sex


	tmp[&apos;patient&apos;][&apos;height&apos;]		= $(&apos;patient&apos;).height || null
	tmp[&apos;patient&apos;][&apos;weight&apos;]		= $(&apos;patient&apos;).weight || null	
	
	tmp[&apos;patient&apos;][&apos;ssnNumber&apos;]   =    $(&apos;insurance&apos;).nir
	    
	tmp[&apos;patient&apos;][&apos;streetAddress&apos;]= $(&apos;patient&apos;).street_address
	tmp[&apos;patient&apos;][&apos;city&apos;]        =     $(&apos;patient&apos;).city
	tmp[&apos;patient&apos;][&apos;state&apos;]       =     $(&apos;patient&apos;).state
	tmp[&apos;patient&apos;][&apos;zipCode&apos;]     =     $(&apos;patient&apos;).zip_code
	
	tmp[&apos;patient&apos;][&apos;identityReliabilityCode&apos;] =  $(&apos;patient&apos;).identity_reliability_code
	tmp[&apos;patient&apos;][&apos;privatePhoneNumber&apos;] =    $(&apos;patient&apos;).private_phone_number
	tmp[&apos;patient&apos;][&apos;businessPhoneNumber&apos;] =   $(&apos;patient&apos;).business_phone_number
	tmp[&apos;patient&apos;][&apos;mail&apos;] =              $(&apos;patient&apos;).mail
	   
	var first_nameList = $(&apos;patient&apos;).first_nameList
	if (first_nameList != &apos;&apos; ||  first_nameList != null){
	    var first_nameListArray = []
	    
	    first_nameListArray = first_nameList.split(&apos; &apos;)
	    tmp[&apos;patient&apos;][&apos;firstName2&apos;]    =       first_nameListArray[1]
	    tmp[&apos;patient&apos;][&apos;firstName3&apos;]    =       first_nameListArray[2]
	    tmp[&apos;patient&apos;][&apos;firstName4&apos;]    =       first_nameListArray[3]
	}
	else {
	    tmp[&apos;patient&apos;][&apos;firstName2&apos;]    =   &apos;&apos;
	    tmp[&apos;patient&apos;][&apos;firstName3&apos;]    =   &apos;&apos;
	    tmp[&apos;patient&apos;][&apos;firstName4&apos;]  =   &apos;&apos;
	}


var first_nameList = $(&apos;patient&apos;).first_nameList
 	if (first_nameList != &apos;&apos; ||  first_nameList != null){
 		var first_nameListArray = []
 	
	 	first_nameListArray = first_nameList.split(&apos; &apos;)
	 	tmp[&apos;patient&apos;][&apos;firstName2&apos;] 	=   	first_nameListArray[1]
		tmp[&apos;patient&apos;][&apos;firstName3&apos;] 	=   	first_nameListArray[2]
		tmp[&apos;patient&apos;][&apos;firstName4&apos;] 	=   	first_nameListArray[3]
	}
	else {
		tmp[&apos;patient&apos;][&apos;firstName2&apos;] 	=   &apos;&apos;
		tmp[&apos;patient&apos;][&apos;firstName3&apos;] 	=   &apos;&apos;
		tmp[&apos;patient&apos;][&apos;firstName4&apos;]  =   &apos;&apos;
	}

	   
var identifierList = $(&apos;patient&apos;).hl7_identifierList
var identifierListToFind = []

for(var i = 0; i &lt;  identifierList.length; i++) {
	//if (identifierList[i][&apos;oid&apos;].toString() != null){	
		identifierListToFind.push({     
			&quot;externalId&quot; : 		identifierList[i][&apos;id&apos;].toString() ,
	          &quot;assigningAuthority&quot; :   identifierList[i][&apos;assigning_authority_namespace_id&apos;].toString(),
	          &quot;identifiantTypeCode&quot; :  identifierList[i][&apos;type_code_id&apos;].toString(),
	          &quot;oid&quot; :  				identifierList[i][&apos;oid&apos;].toString()	        	,
	          &quot;universalIdType&quot; : 	identifierList[i][&apos;universal_id_type&apos;].toString()
		});
	/*}
	else {
		identifierListToFind.push({     
			&quot;externalId&quot; : 		identifierList[i][&apos;id&apos;].toString() ,
	          &quot;assigningAuthority&quot; :   identifierList[i][&apos;assigning_authority_namespace_id&apos;].toString(),
	          &quot;identifiantTypeCode&quot; :  identifierList[i][&apos;type_code_id&apos;].toString()
		});
	}*/
 }

 tmp[&apos;identifiers&apos;]  = identifierListToFind;</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64">ewogICJNU0giIDogewogICAgInNlbmRpbmdBcHBsaWNhdGlvbl9uYW1lc3BhY2VJZCIgOiAiWFBM
T1JFIiwKICAgICJzZW5kaW5nRmFjaWxpdHlfbmFtZXNwYWNlSWQiIDogIlhQTE9SRSIsCiAgICAi
ZGF0ZU9yVGltZU9mTWVzc2FnZV90aW1lT2ZBbkV2ZW50IiA6ICIyMDIwLTEyLTI4IDA3OjQ5OjAw
IiwKICAgICJtZXNzYWdlVHlwZSIgOiAiU0lVIiwKICAgICJtZXNzYWdlVHlwZV90cmlnZ2VyRXZl
bnQiIDogIlMxMiIsCiAgICAibWVzc2FnZUNvbnRyb2xJZF92YWx1ZSIgOiAiQTEwMjcwNTY4NTAy
MDc0ODQzIiwKICAgICJhY2NlcHRBY2tub3dsZWRnbWVudFR5cGVfdmFsdWUiIDogIiIsCiAgICAi
YXBwbGljYXRpb25BY2tub3dsZWRnbWVudFR5cGVfdmFsdWUiIDogIiIsCiAgICAic2VxdWVuY2VO
dW1iZXJfdmFsdWUiIDogMCwKICAgICJjb2RlU2l0ZSIgOiAiQ0VEIgogIH0sCiAgIlBBVElFTlQi
IDogewogICAgImhsN19pZGVudGlmaWVyIiA6ICJYQzAwMDAwMjcxOTUiLAogICAgImhsN19pZGVu
dGlmaWVyTGlzdCIgOiBbCiAgICAgIHsKICAgICAgICAiaWQiIDogIlhDMDAwMDAyNzE5NSIsCiAg
ICAgICAgImFzc2lnbmluZ19hdXRob3JpdHlfbmFtZXNwYWNlX2lkIiA6ICJFREwiLAogICAgICAg
ICJ0eXBlX2NvZGVfaWQiIDogIlBJIiwKCQkib2lkIiA6IG51bGwiLAoJCSJ1bml2ZXJzYWxfaWRf
dHlwZSIgOiBudWxsCiAgICAgIH0KICAgIF0sCiAgICAibGFzdF9uYW1lIiA6ICJHVVlPTiIsCgki
YmlydGhuYW1lIiA6ICJUT1RPIiwKICAgICJmaXJzdF9uYW1lIiA6ICJKRUFOIE1JQ0hFTCIsCgki
Zmlyc3RfbmFtZUxpc3QiIDogIkpFQU5ORSBNQVJJRSBDRUNJTEUiLAoJImJpcnRoX25hbWUiIDog
IkhVR0VUVEUiCiAgICAiYmlydGhkYXRlIiA6ICIxOTY1LTAzLTA5IiwKICAgICJzZXgiIDogIk0i
LAogICAgInN0cmVldF9hZGRyZXNzIiA6ICIzIFJVRSBUUlVHVUVUICIsCiAgICAiY2l0eSIgOiAi
VE9VTE9OIiwKICAgICJzdGF0ZSIgOiAiIiwKICAgICJ6aXBfY29kZSIgOiAiODMwMDAiLAogICAg
InByaXZhdGVfcGhvbmVfbnVtYmVyIiA6ICIwNDk0OTM0MjA2IiwKICAgICJidXNpbmVzc19waG9u
ZV9udW1iZXIiIDogIiIsCiAgIAkiaWRlbnRpdHlfcmVsaWFiaWxpdHlfY29kZSIgOiAiIiwKICAg
ICJtYWlsIiA6ICIiLAoJImhlaWdodCIgOiAiIiwKCSJ3ZWlnaHQiOiAiIgogIH0sCiAgIk1FUkdF
IiA6IG51bGwsCiAgIlZJU0lUIjogewoJICAgICAgICAicGF0aWVudF9jbGFzcyI6ICAJIAludWxs
LAoJICAgICAgICAiYWRtaXNzaW9uX3R5cGUiOiAJCW51bGwgLAoJICAgICAgICAicHJlYWRtaXRf
bnVtYmVyIjogCQludWxsICwKCSAgICAgICAgImFkbWl0X251bWJlciI6IAkJbnVsbCwKCSAgICAg
ICAgInZpc2l0X2Rlc2NyaXB0aW9uIjogICAgbnVsbCwKCSAgICAgICAgImF0dGVuZGluZ19kb2N0
b3JfZXh0ZXJuYWxfaWQiOiAJCW51bGwsCgkgICAgICAgICJyZWZlcnJpbmdfZG9jdG9yX2V4dGVy
bmFsX2lkIjogIAkJbnVsbCwKCSAgICAgICAgImNvbnN1bHRpbmdfZG9jdG9yX2V4dGVybmFsX2lk
IjogIAkJbnVsbCwKCSAgICAgICAgImFkbWl0dGluZ19kb2N0b3JfZXh0ZXJuYWxfaWQiOiAJCW51
bGwsCgkgICAgICAgICJob3NwaXRhbF9zZXJ2aWNlIjogIAkJICAgCQkJbnVsbCwKCSAgICAgICAg
ImFkbWl0X3NvdXJjZSI6CQkgICAgICAgICAgICAJCW51bGwsCgkgICAgICAgICJhbWJ1bGF0b3J5
X3N0YXR1cyI6IAkJCQkJbnVsbCwKCSAgICAgICAgIm1lZGljYWxfY2FyZV9wcm90b2NvbF9jb2Rl
IjogCQkJbnVsbCwKCSAgICAgICAgIm1lZGljYWxfY2FyZV9wcm90b2NvbF9kZXNjcmlwdGlvbiI6
IAludWxsLAoJICAgICAgICAidmlwX2luZGljYXRvciI6ICAgICAJCQkJIAludWxsLAoJICAgICAg
ICAiZXhwZWN0ZWRfYWRtaXRfZGF0ZXRpbWUiOgkJIAkgCW51bGwsCgkgICAgICAgICJhZG1pdF9k
YXRldGltZSI6IAkJCQkJIAludWxsLAoJICAgICAgICAiZXhwZWN0ZWRfZGlzY2hhcmdlX2RhdGV0
aW1lIjoJCSAJbnVsbCwKCSAgICAgICAgImRpc2NoYXJnZV9kYXRldGltZSI6IAkJCSAgICAgCW51
bGwKCX0sCiAgIklOU1VSQU5DRSIgOiB7CiAgICAiaW5zdXJhbmNlX3R5cGUiIDogIkFNTyIsCiAg
ICAibmlyIiA6ICIxNjUwMzk5MzQxMDgyMjciLAogICAgImFtb19jb2RlX3JlZ2ltZV9jYWlzc2Vf
Y2VudHJlIiA6IG51bGwsCiAgICAiYW1vX2Ryb2l0X2RlYnV0IiA6IG51bGwsCiAgICAiYW1vX2Ry
b2l0X2ZpbiIgOiBudWxsCiAgfSwKICAiUkVGRVJSSU5HX0RPQ1RPUiIgOiAiIiwKICAiU1RVRElF
UyIgOiBbCiAgICB7CiAgICAgICJhcHBvaW50bWVudF9udW1iZXIiIDogIkExMDI3MDU2ODUwMCIs
CiAgICAgICJhY2Nlc3Npb25fbnVtYmVyIiA6ICJBMTAyNzA1Njg1MDAiLAogICAgICAiaW5zdGFu
Y2VfdWlkIiA6ICJBMTAyNzA1Njg1MDBfMCIsCiAgICAgICJsb2NhdGlvbl9jb2RlIiA6ICJSQURV
UkMiLAogICAgICAibG9jYXRpb25fbGFiZWwiIDogIlJBRElPIFVSR0VOQ0VTIENFRFJFUyIsCiAg
ICAgICJsb2NhdGlvbl90eXBlX2NvZGUiIDogIk5PVF9VU0VEIiwKICAgICAgImxvY2F0aW9uX3Rp
Y2tldF9tZXNzYWdlIiA6IG51bGwsCiAgICAgICJsb2NhdGlvbl9wYXBlcl9tZXNzYWdlIiA6IG51
bGwsCiAgICAgICJzdHVkeV9zdGF0dXNfY29kZSIgOiAiU0NIRURVTEVEIiwKICAgICAgInN0dWR5
X3R5cGVfY29kZSIgOiAiUkFEVVJDX1JQT1VNIiwKICAgICAgInNoaWZ0X2NvZGUiIDogIlJBRFVS
QyIsCiAgICAgICJzdHVkeV9hbHRlcm5hdGl2ZV90eXBlX2NvZGUiIDogbnVsbCwKICAgICAgInN0
dWR5X3R5cGVfdGV4dCIgOiAiUE9VTU9OUyAxMCIsCiAgICAgICJzY2hlZHVsZWRfZGF0ZXRpbWUi
IDogIjIwMjAtMTItMjggMTA6MTA6MDAiLAogICAgICAibW9kYWxpdHlfY29kZSIgOiAiUkEiLAog
ICAgICAibW9kYWxpdHlfdGV4dCIgOiAiUkFESU8gVEhPUkFDSVFVRSAvIEFTUCIsCiAgICAgICJv
cmlnaW4iIDogIkdFUkkiLAogICAgICAiZHVyYXRpb24iIDogIjIwIgogICAgfQogIF0sCiAgIkRP
Q1VNRU5UUyIgOiBbIF0sCiAgIk1FUkdFX1ZJU0lUIiA6ICIiLAogICJuZXh0U3RlcCIgOiBudWxs
Cn0=</inboundTemplate>
        <outboundTemplate encoding="base64">ewogICAgInBhdGllbnQiOiB7CiAgICAgICAgInNzbk51bWJlciI6IG51bGwsCiAgICAgICAgImZp
cnN0bmFtZSI6IG51bGwsCiAgICAgICAgImZpcnN0TmFtZTIiIDogbnVsbCwKICAgICAgICAiZmly
c3ROYW1lMyIgOiBudWxsLAogICAgICAgICJmaXJzdE5hbWU0IiA6IG51bGwsCiAgICAgICAgImxh
c3ROYW1lIjogbnVsbCwKCQkiYmlydGhOYW1lIiA6IG51bGwsCiAgICAgICAgInNleCI6IG51bGws
CiAgICAgICAgImJpcnRoZGF0ZSI6IG51bGwsCiAgICAgICAgInN0cmVldCI6IG51bGwsCiAgICAg
ICAgImNpdHkiOiBudWxsLAogICAgICAgICJ6aXBDb2RlIjogbnVsbCwKICAgICAgICAic3RhdGUi
OiBudWxsLAogICAgICAgICJwcml2YXRlUGhvbmVOdW1iZXIiOiBudWxsLAogICAgICAgICJidXNp
bmVzc1Bob25lTnVtYmVyIjogbnVsbCwKICAgICAgICAibWFpbCI6IG51bGwsCiAgICAgICAgImlk
ZW50aXR5UmVsaWFiaWxpdHlDb2RlIjogbnVsbCwKICAgICAgICAic3Bva2VuTGFuZ3VhZ2UiOiBu
dWxsLAoJCSJoZWlnaHQiIDogbnVsbCwKCQkid2VpZ2h0IjogbnVsbAogICAgfSwKICAgICAiaWRl
bnRpZmllcnMiIDogWwogICAgICAgICB7CiAgICAgICAgICAgICAgICAiYXNzaWduaW5nQXV0aG9y
aXR5IjogbnVsbCwKICAgICAgICAgICAgICAgICJpZGVudGlmaWFudFR5cGVDb2RlIjogbnVsbCwK
ICAgICAgICAgICAgICAgICJleHRlcm5hbElkIjogbnVsbCwKCQkJCSJvaWQiIDogbnVsbCwKCQkJ
CSJ1bml2ZXJzYWxJZFR5cGUiIDogbnVsbAoJCQkJCiAgICAgICAgfQogICAgXQp9</outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>analyse retour upsert  patzent</name>
            <script>var responseStatusLine = $(&apos;responseStatusLine&apos;);
var responseStatusCode = parseInt(responseStatusLine.split(&apos; &apos;)[1], 10);

/* 200 update 
   201 creation 
   */



var  result = null 
var patientIdFound = null

try {
	
       result = checkResponse( &apos;PARSE&apos; ,&apos;Upsert patient&apos;, &apos;http://localhost/beacore/patient/upsert&apos;,&apos;POST&apos;,responseStatusCode, msg)
      if ( result != &apos;not_found&apos; &amp;&amp;  msg[&apos;patient&apos;][&apos;id&apos;] ) {
       		 patientIdFound = new java.lang.Integer(  msg[&apos;patient&apos;][&apos;id&apos;]);
    		}
    		 
} catch (e) {
    logger.error(e);
}

channelMap.put(&apos;patient_id&apos;,patientIdFound );
channelMap.put (&apos;result&apos;, result);</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>var responseStatusLine = $(&apos;responseStatusLine&apos;);
var responseStatusCode = parseInt(responseStatusLine.split(&apos; &apos;)[1], 10);

/* 200 update 
   201 creation 
   */



var  result = null 
var patientIdFound = null

try {
	
       result = checkResponse( &apos;PARSE&apos; ,&apos;Upsert patient&apos;, &apos;http://localhost/beacore/patient/upsert&apos;,&apos;POST&apos;,responseStatusCode, msg)
      if ( result != &apos;not_found&apos; &amp;&amp;  msg[&apos;patient&apos;][&apos;id&apos;] ) {
       		 patientIdFound = new java.lang.Integer(  msg[&apos;patient&apos;][&apos;id&apos;]);
    		}
    		 
} catch (e) {
    logger.error(e);
}

channelMap.put(&apos;patient_id&apos;,patientIdFound );
channelMap.put (&apos;result&apos;, result);</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64">ewogICAgInBhdGllbnQiOiB7CiAgICAgICAgImlkIjogMTg2LAogICAgICAgICJobDdQYXRpZW50
SWQiOiBudWxsLAogICAgICAgICJobDdQYXRpZW50UGF0aWVudElkIjogIjEyMyIsCiAgICAgICAg
InRpY2tldE51bWJlciI6IG51bGwsCiAgICAgICAgImFkbWl0RGF0ZXRpbWUiOiBudWxsLAogICAg
ICAgICJhZG1pdEJvcm5lQ29kZSI6IG51bGwsCiAgICAgICAgInJlYXNvbk9mVmlzaXRDb2RlIjog
IkpBSV9SRFYiLAogICAgICAgICJyZWFzb25PZlZpc2l0IjogewogICAgICAgICAgICAiY29kZSI6
ICJKQUlfUkRWIgogICAgICAgIH0sCiAgICAgICAgImxhc3ROYW1lIjogIlRFU1QiLAogICAgICAg
ICJmaXJzdE5hbWUiOiAiVEVTVCIsCiAgICAgICAgInNleCI6ICJIIiwKICAgICAgICAiYmlydGhk
YXRlIjogIjE5ODAtMDUtMTFUMjI6MDA6MDAuMDAwWiIsCiAgICAgICAgInN0cmVldEFkZHJlc3Mi
OiAiMTIgcnVlIGRlIGxhIHLDqXB1YmxpcXVlIiwKICAgICAgICAiY2l0eSI6ICJMeW9uIiwKICAg
ICAgICAic3RhdGUiOiAiRU4iLAogICAgICAgICJ6aXBDb2RlIjogIjc1MDAwIiwKICAgICAgICAi
cHJpdmF0ZVBob25lTnVtYmVyIjogIjA3MDcwNzA3MDciLAogICAgICAgICJidXNpbmVzc1Bob25l
TnVtYmVyIjogIjAxMDEwMTAxMDEiLAogICAgICAgICJtYWlsIjogInRlc3RAdzJpcy5mciIsCiAg
ICAgICAgInNzbk51bWJlciI6IG51bGwsCiAgICAgICAgInJlZmVycmluZ0RvY3RvcklkIjogbnVs
bCwKICAgICAgICAibG9jYXRpb25Db2RlIjogbnVsbCwKICAgICAgICAibG9jYXRpb24iOiBudWxs
LAogICAgICAgICJwYXRpZW50U3RhdHVzQ29kZSI6ICJOT1RfQURNSVRURUQiLAogICAgICAgICJw
YXRpZW50U3RhdHVzIjogewogICAgICAgICAgICAiY29kZSI6ICJOT1RfQURNSVRURUQiCiAgICAg
ICAgfSwKICAgICAgICAicHV0T25Ib2xkIjogbnVsbCwKICAgICAgICAibGFzdENhbGxlZEF0Ijog
bnVsbCwKICAgICAgICAibGFzdENhbGxlZExvY2F0aW9uIjogbnVsbCwKICAgICAgICAibnVtYmVy
T2ZDYWxsIjogMCwKICAgICAgICAid29ya2Zsb3dDb2RlIjogbnVsbCwKICAgICAgICAibGFzdFdv
cmtmbG93SGlzdG9yeUlkIjogbnVsbCwKICAgICAgICAibW9kaWZ5SW5mb3JtYXRpb25zU3RhdHVz
IjogMCwKICAgICAgICAiZ2VzdGlvbm5haXJlRHJvaXRzIjogbnVsbCwKICAgICAgICAiZHJvaXRz
RGVidXQiOiBudWxsLAogICAgICAgICJkcm9pdHNGaW4iOiBudWxsLAogICAgICAgICJkaWRSZWFk
Q3YiOiBudWxsLAogICAgICAgICJkaWRVcGRhdGVDdiI6IG51bGwsCiAgICAgICAgInJlYWRFcnJv
ckN2IjogbnVsbCwKICAgICAgICAidXBkYXRlRXJyb3JDdiI6IG51bGwsCiAgICAgICAgImFnZSI6
IDQyLAogICAgICAgICJzcG9rZW5MYW5ndWFnZSI6ICJmciIsCiAgICAgICAgImxhc3RTdGF0dXNV
cGRhdGUiOiAiMjAyMi0wNy0xMlQxNDoyMjo0Ni4wMDBaIiwKICAgICAgICAiY3JlYXRlZEF0Ijog
IjIwMjItMDctMTJUMTQ6MjI6NDYuMDAwWiIsCiAgICAgICAgInVwZGF0ZWRBdCI6IG51bGwsCiAg
ICAgICAgInN0dWRpZXMiOiBbXSwKICAgICAgICAiZG9jdW1lbnRzIjogW10sCiAgICAgICAgImlk
ZW50aWZpZXJzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiYXNzaWduaW5nQXV0
aG9yaXR5IjogIk5ldyIsCiAgICAgICAgICAgICAgICAiaWRlbnRpZmlhbnRUeXBlQ29kZSI6ICJO
ZXciLAogICAgICAgICAgICAgICAgImV4dGVybmFsSWQiOiAiNzg5IiwKICAgICAgICAgICAgICAg
ICJpZCI6IDE1NwogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAi
YXNzaWduaW5nQXV0aG9yaXR5IjogIk5ldyIsCiAgICAgICAgICAgICAgICAiaWRlbnRpZmlhbnRU
eXBlQ29kZSI6ICJOZXciLAogICAgICAgICAgICAgICAgImV4dGVybmFsSWQiOiAiMTIzIiwKICAg
ICAgICAgICAgICAgICJpZCI6IDE1OAogICAgICAgICAgICB9CiAgICAgICAgXQogICAgfQp9</inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Accept message if &quot;$(&apos;patient&apos;).hl7_identifierList&quot; exists</name>
            <data>
              <entry>
                <string>Field</string>
                <string>$(&apos;patient&apos;).hl7_identifierList</string>
              </entry>
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>2</string>
              </entry>
              <entry>
                <string>Values</string>
                <list>
                  <string>&apos;&apos;</string>
                  <string>null</string>
                </list>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if($(&apos;patient&apos;).hl7_identifierList.length &gt; 0) {
	return true;
}
return false;</script>
            <operator>NONE</operator>
          </rule>
          <rule>
            <sequenceNumber>1</sequenceNumber>
            <name>Filtre des types de messages</name>
            <data>
              <entry>
                <string>Script</string>
                <string>// Start only for when a real update is needed
if  (
	$(&apos;messageHeader&apos;)[&apos;messageType&apos;] == &apos;ADT&apos; || //On met à jour sur réception d&apos;ADT
	$(&apos;messageHeader&apos;)[&apos;messageType&apos;] != &apos;ORU&apos; || //On ne met pas à jour sur réception d&apos;ADT
	($(&apos;messageHeader&apos;)[&apos;messageType&apos;] == &apos;SIU&apos; &amp;&amp; $(&apos;messageHeader&apos;)[&apos;messageType_triggerEvent&apos;] == &apos;S12&apos;) || //On met à our sur réception SIU^S12
	$(&apos;nextStep&apos;) == null || 
	($(&apos;nextStep&apos;) == &apos;&apos; &amp;&amp; ($(&apos;messageHeader&apos;)[&apos;messageType_triggerEvent&apos;] == &apos;S12&apos; || $(&apos;messageHeader&apos;)[&apos;messageType&apos;] == &apos;ORM&apos;)) // On met à jour sur réception d&apos;ORM de création de RDV
	){		
		return true
		}
	else{
		return false
	}</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>// Start only for when a real update is needed
if  (
	$(&apos;messageHeader&apos;)[&apos;messageType&apos;] == &apos;ADT&apos; || //On met à jour sur réception d&apos;ADT
	$(&apos;messageHeader&apos;)[&apos;messageType&apos;] != &apos;ORU&apos; || //On ne met pas à jour sur réception d&apos;ADT
	($(&apos;messageHeader&apos;)[&apos;messageType&apos;] == &apos;SIU&apos; &amp;&amp; $(&apos;messageHeader&apos;)[&apos;messageType_triggerEvent&apos;] == &apos;S12&apos;) || //On met à our sur réception SIU^S12
	$(&apos;nextStep&apos;) == null || 
	($(&apos;nextStep&apos;) == &apos;&apos; &amp;&amp; ($(&apos;messageHeader&apos;)[&apos;messageType_triggerEvent&apos;] == &apos;S12&apos; || $(&apos;messageHeader&apos;)[&apos;messageType&apos;] == &apos;ORM&apos;)) // On met à jour sur réception d&apos;ORM de création de RDV
	){		
		return true
		}
	else{
		return false
	}</script>
            <operator>AND</operator>
          </rule>
        </rules>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.4.2">
      <metaDataId>132</metaDataId>
      <name>Upsert Patient (onlyForUpdate)</name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>true</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <host>http://localhost/beacore/patients/upsert</host>
        <useProxyServer>false</useProxyServer>
        <proxyAddress></proxyAddress>
        <proxyPort></proxyPort>
        <method>post</method>
        <headers class="linked-hash-map">
          <entry>
            <string>Authorization</string>
            <list>
              <string>Bearer ${accessToken}</string>
            </list>
          </entry>
          <entry>
            <string>Content-Type</string>
            <list>
              <string>application/json</string>
            </list>
          </entry>
        </headers>
        <parameters class="linked-hash-map">
          <entry>
            <string>autoMerge</string>
            <list>
              <string>true</string>
            </list>
          </entry>
        </parameters>
        <responseXmlBody>false</responseXmlBody>
        <responseParseMultipart>true</responseParseMultipart>
        <responseIncludeMetadata>false</responseIncludeMetadata>
        <responseBinaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</responseBinaryMimeTypes>
        <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
        <multipart>false</multipart>
        <useAuthentication>false</useAuthentication>
        <authenticationType>Basic</authenticationType>
        <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
        <username></username>
        <password></password>
        <content>${message.transformedData}</content>
        <contentType>application/json</contentType>
        <dataTypeBinary>false</dataTypeBinary>
        <charset>UTF-8</charset>
        <socketTimeout>30000</socketTimeout>
      </properties>
      <transformer version="3.4.2">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>patient</name>
            <script>tmp[&apos;patient&apos;][&apos;lastname&apos;]  =    $(&apos;patient&apos;).last_name
tmp[&apos;patient&apos;][&apos;birthName&apos;]     =    $(&apos;patient&apos;).birthname
tmp[&apos;patient&apos;][&apos;firstname&apos;]     =       $(&apos;patient&apos;).first_name
tmp[&apos;patient&apos;][&apos;birthdate&apos;]     =       $(&apos;patient&apos;).birthdate
tmp[&apos;patient&apos;][&apos;sex&apos;]       =       $(&apos;patient&apos;).sex

var identifierList = $(&apos;patient&apos;).hl7_identifierList
var identifierListToFind = []

for(var i = 0; i &lt;  identifierList.length; i++) {
	//if (identifierList[i][&apos;oid&apos;].toString() != null){	
		identifierListToFind.push({     
			&quot;externalId&quot; : 		identifierList[i][&apos;id&apos;].toString() ,
	          &quot;assigningAuthority&quot; :   identifierList[i][&apos;assigning_authority_namespace_id&apos;].toString(),
	          &quot;identifiantTypeCode&quot; :  identifierList[i][&apos;type_code_id&apos;].toString(),
	          &quot;oid&quot; :  				identifierList[i][&apos;oid&apos;].toString()	        	,
	          &quot;universalIdType&quot; : 	identifierList[i][&apos;universal_id_type&apos;].toString()
		});
	/*}
	else {
		identifierListToFind.push({     
			&quot;externalId&quot; : 		identifierList[i][&apos;id&apos;].toString() ,
	          &quot;assigningAuthority&quot; :   identifierList[i][&apos;assigning_authority_namespace_id&apos;].toString(),
	          &quot;identifiantTypeCode&quot; :  identifierList[i][&apos;type_code_id&apos;].toString()
		});
	}*/
 }

 tmp[&apos;identifiers&apos;]  = identifierListToFind;</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>tmp[&apos;patient&apos;][&apos;lastname&apos;]  =    $(&apos;patient&apos;).last_name
tmp[&apos;patient&apos;][&apos;birthName&apos;]     =    $(&apos;patient&apos;).birthname
tmp[&apos;patient&apos;][&apos;firstname&apos;]     =       $(&apos;patient&apos;).first_name
tmp[&apos;patient&apos;][&apos;birthdate&apos;]     =       $(&apos;patient&apos;).birthdate
tmp[&apos;patient&apos;][&apos;sex&apos;]       =       $(&apos;patient&apos;).sex

var identifierList = $(&apos;patient&apos;).hl7_identifierList
var identifierListToFind = []

for(var i = 0; i &lt;  identifierList.length; i++) {
	//if (identifierList[i][&apos;oid&apos;].toString() != null){	
		identifierListToFind.push({     
			&quot;externalId&quot; : 		identifierList[i][&apos;id&apos;].toString() ,
	          &quot;assigningAuthority&quot; :   identifierList[i][&apos;assigning_authority_namespace_id&apos;].toString(),
	          &quot;identifiantTypeCode&quot; :  identifierList[i][&apos;type_code_id&apos;].toString(),
	          &quot;oid&quot; :  				identifierList[i][&apos;oid&apos;].toString()	        	,
	          &quot;universalIdType&quot; : 	identifierList[i][&apos;universal_id_type&apos;].toString()
		});
	/*}
	else {
		identifierListToFind.push({     
			&quot;externalId&quot; : 		identifierList[i][&apos;id&apos;].toString() ,
	          &quot;assigningAuthority&quot; :   identifierList[i][&apos;assigning_authority_namespace_id&apos;].toString(),
	          &quot;identifiantTypeCode&quot; :  identifierList[i][&apos;type_code_id&apos;].toString()
		});
	}*/
 }

 tmp[&apos;identifiers&apos;]  = identifierListToFind;</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64">ewogICJNU0giIDogewogICAgInNlbmRpbmdBcHBsaWNhdGlvbl9uYW1lc3BhY2VJZCIgOiAiWFBM
T1JFIiwKICAgICJzZW5kaW5nRmFjaWxpdHlfbmFtZXNwYWNlSWQiIDogIlhQTE9SRSIsCiAgICAi
ZGF0ZU9yVGltZU9mTWVzc2FnZV90aW1lT2ZBbkV2ZW50IiA6ICIyMDIwLTEyLTI4IDA3OjQ5OjAw
IiwKICAgICJtZXNzYWdlVHlwZSIgOiAiU0lVIiwKICAgICJtZXNzYWdlVHlwZV90cmlnZ2VyRXZl
bnQiIDogIlMxMiIsCiAgICAibWVzc2FnZUNvbnRyb2xJZF92YWx1ZSIgOiAiQTEwMjcwNTY4NTAy
MDc0ODQzIiwKICAgICJhY2NlcHRBY2tub3dsZWRnbWVudFR5cGVfdmFsdWUiIDogIiIsCiAgICAi
YXBwbGljYXRpb25BY2tub3dsZWRnbWVudFR5cGVfdmFsdWUiIDogIiIsCiAgICAic2VxdWVuY2VO
dW1iZXJfdmFsdWUiIDogMCwKICAgICJjb2RlU2l0ZSIgOiAiQ0VEIgogIH0sCiAgIlBBVElFTlQi
IDogewogICAgImhsN19pZGVudGlmaWVyIiA6ICJYQzAwMDAwMjcxOTUiLAogICAgImhsN19pZGVu
dGlmaWVyTGlzdCIgOiBbCiAgICAgIHsKICAgICAgICAiaWQiIDogIlhDMDAwMDAyNzE5NSIsCiAg
ICAgICAgImFzc2lnbmluZ19hdXRob3JpdHlfbmFtZXNwYWNlX2lkIiA6ICJFREwiLAogICAgICAg
ICJ0eXBlX2NvZGVfaWQiIDogIlBJIiwKCQkib2lkIiA6IG51bGwiLAoJCSJ1bml2ZXJzYWxfaWRf
dHlwZSIgOiBudWxsCiAgICAgIH0KICAgIF0sCiAgICAibGFzdF9uYW1lIiA6ICJHVVlPTiIsCgki
YmlydGhuYW1lIiA6ICJUT1RPIiwKICAgICJmaXJzdF9uYW1lIiA6ICJKRUFOIE1JQ0hFTCIsCgki
Zmlyc3RfbmFtZUxpc3QiIDogIkpFQU5ORSBNQVJJRSBDRUNJTEUiLAoJImJpcnRoX25hbWUiIDog
IkhVR0VUVEUiCiAgICAiYmlydGhkYXRlIiA6ICIxOTY1LTAzLTA5IiwKICAgICJzZXgiIDogIk0i
LAogICAgInN0cmVldF9hZGRyZXNzIiA6ICIzIFJVRSBUUlVHVUVUICIsCiAgICAiY2l0eSIgOiAi
VE9VTE9OIiwKICAgICJzdGF0ZSIgOiAiIiwKICAgICJ6aXBfY29kZSIgOiAiODMwMDAiLAogICAg
InByaXZhdGVfcGhvbmVfbnVtYmVyIiA6ICIwNDk0OTM0MjA2IiwKICAgICJidXNpbmVzc19waG9u
ZV9udW1iZXIiIDogIiIsCiAgIAkiaWRlbnRpdHlfcmVsaWFiaWxpdHlfY29kZSIgOiAiIiwKICAg
ICJtYWlsIiA6ICIiLAoJImhlaWdodCIgOiAiIiwKCSJ3ZWlnaHQiOiAiIgogIH0sCiAgIk1FUkdF
IiA6IG51bGwsCiAgIlZJU0lUIjogewoJICAgICAgICAicGF0aWVudF9jbGFzcyI6ICAJIAludWxs
LAoJICAgICAgICAiYWRtaXNzaW9uX3R5cGUiOiAJCW51bGwgLAoJICAgICAgICAicHJlYWRtaXRf
bnVtYmVyIjogCQludWxsICwKCSAgICAgICAgImFkbWl0X251bWJlciI6IAkJbnVsbCwKCSAgICAg
ICAgInZpc2l0X2Rlc2NyaXB0aW9uIjogICAgbnVsbCwKCSAgICAgICAgImF0dGVuZGluZ19kb2N0
b3JfZXh0ZXJuYWxfaWQiOiAJCW51bGwsCgkgICAgICAgICJyZWZlcnJpbmdfZG9jdG9yX2V4dGVy
bmFsX2lkIjogIAkJbnVsbCwKCSAgICAgICAgImNvbnN1bHRpbmdfZG9jdG9yX2V4dGVybmFsX2lk
IjogIAkJbnVsbCwKCSAgICAgICAgImFkbWl0dGluZ19kb2N0b3JfZXh0ZXJuYWxfaWQiOiAJCW51
bGwsCgkgICAgICAgICJob3NwaXRhbF9zZXJ2aWNlIjogIAkJICAgCQkJbnVsbCwKCSAgICAgICAg
ImFkbWl0X3NvdXJjZSI6CQkgICAgICAgICAgICAJCW51bGwsCgkgICAgICAgICJhbWJ1bGF0b3J5
X3N0YXR1cyI6IAkJCQkJbnVsbCwKCSAgICAgICAgIm1lZGljYWxfY2FyZV9wcm90b2NvbF9jb2Rl
IjogCQkJbnVsbCwKCSAgICAgICAgIm1lZGljYWxfY2FyZV9wcm90b2NvbF9kZXNjcmlwdGlvbiI6
IAludWxsLAoJICAgICAgICAidmlwX2luZGljYXRvciI6ICAgICAJCQkJIAludWxsLAoJICAgICAg
ICAiZXhwZWN0ZWRfYWRtaXRfZGF0ZXRpbWUiOgkJIAkgCW51bGwsCgkgICAgICAgICJhZG1pdF9k
YXRldGltZSI6IAkJCQkJIAludWxsLAoJICAgICAgICAiZXhwZWN0ZWRfZGlzY2hhcmdlX2RhdGV0
aW1lIjoJCSAJbnVsbCwKCSAgICAgICAgImRpc2NoYXJnZV9kYXRldGltZSI6IAkJCSAgICAgCW51
bGwKCX0sCiAgIklOU1VSQU5DRSIgOiB7CiAgICAiaW5zdXJhbmNlX3R5cGUiIDogIkFNTyIsCiAg
ICAibmlyIiA6ICIxNjUwMzk5MzQxMDgyMjciLAogICAgImFtb19jb2RlX3JlZ2ltZV9jYWlzc2Vf
Y2VudHJlIiA6IG51bGwsCiAgICAiYW1vX2Ryb2l0X2RlYnV0IiA6IG51bGwsCiAgICAiYW1vX2Ry
b2l0X2ZpbiIgOiBudWxsCiAgfSwKICAiUkVGRVJSSU5HX0RPQ1RPUiIgOiAiIiwKICAiU1RVRElF
UyIgOiBbCiAgICB7CiAgICAgICJhcHBvaW50bWVudF9udW1iZXIiIDogIkExMDI3MDU2ODUwMCIs
CiAgICAgICJhY2Nlc3Npb25fbnVtYmVyIiA6ICJBMTAyNzA1Njg1MDAiLAogICAgICAiaW5zdGFu
Y2VfdWlkIiA6ICJBMTAyNzA1Njg1MDBfMCIsCiAgICAgICJsb2NhdGlvbl9jb2RlIiA6ICJSQURV
UkMiLAogICAgICAibG9jYXRpb25fbGFiZWwiIDogIlJBRElPIFVSR0VOQ0VTIENFRFJFUyIsCiAg
ICAgICJsb2NhdGlvbl90eXBlX2NvZGUiIDogIk5PVF9VU0VEIiwKICAgICAgImxvY2F0aW9uX3Rp
Y2tldF9tZXNzYWdlIiA6IG51bGwsCiAgICAgICJsb2NhdGlvbl9wYXBlcl9tZXNzYWdlIiA6IG51
bGwsCiAgICAgICJzdHVkeV9zdGF0dXNfY29kZSIgOiAiU0NIRURVTEVEIiwKICAgICAgInN0dWR5
X3R5cGVfY29kZSIgOiAiUkFEVVJDX1JQT1VNIiwKICAgICAgInNoaWZ0X2NvZGUiIDogIlJBRFVS
QyIsCiAgICAgICJzdHVkeV9hbHRlcm5hdGl2ZV90eXBlX2NvZGUiIDogbnVsbCwKICAgICAgInN0
dWR5X3R5cGVfdGV4dCIgOiAiUE9VTU9OUyAxMCIsCiAgICAgICJzY2hlZHVsZWRfZGF0ZXRpbWUi
IDogIjIwMjAtMTItMjggMTA6MTA6MDAiLAogICAgICAibW9kYWxpdHlfY29kZSIgOiAiUkEiLAog
ICAgICAibW9kYWxpdHlfdGV4dCIgOiAiUkFESU8gVEhPUkFDSVFVRSAvIEFTUCIsCiAgICAgICJv
cmlnaW4iIDogIkdFUkkiLAogICAgICAiZHVyYXRpb24iIDogIjIwIgogICAgfQogIF0sCiAgIkRP
Q1VNRU5UUyIgOiBbIF0sCiAgIk1FUkdFX1ZJU0lUIiA6ICIiLAogICJuZXh0U3RlcCIgOiBudWxs
Cn0=</inboundTemplate>
        <outboundTemplate encoding="base64">ewogICAgInBhdGllbnQiOiB7ICAKICAgICAgICAiZmlyc3RuYW1lIjogbnVsbCwKICAgICAgICAi
bGFzdE5hbWUiOiBudWxsLAoJCSJiaXJ0aE5hbWUiIDogbnVsbCwKICAgICAgICAic2V4IjogbnVs
bCwKICAgICAgICAiYmlydGhkYXRlIjogbnVsbAogICAgfQp9</outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>analyse retour upsert  patient</name>
            <script>var responseStatusLine = $(&apos;responseStatusLine&apos;);
var responseStatusCode = parseInt(responseStatusLine.split(&apos; &apos;)[1], 10);

/* 200 update 
   201 creation 
   */



var result = null 
var patientIdFound = null
var patientTicketNumber = null

try {
	
	result = checkResponse( &apos;PARSE&apos; ,&apos;Upsert patient&apos;, &apos;http://localhost/beacore/patient/upsert&apos;,&apos;POST&apos;,responseStatusCode, msg)
	if ( result != &apos;not_found&apos; &amp;&amp;  msg[&apos;patient&apos;][&apos;id&apos;] ) {
		patientIdFound = new java.lang.Integer(  msg[&apos;patient&apos;][&apos;id&apos;]);
		patientTicketNumber =  msg[&apos;patient&apos;][&apos;ticketNumber&apos;];
	}
    		 
} catch (e) {
    logger.error(e);
}

channelMap.put(&apos;patient_id&apos;,patientIdFound );
channelMap.put(&apos;ticket_number&apos;,patientTicketNumber );
channelMap.put(&apos;result&apos;, result);</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>var responseStatusLine = $(&apos;responseStatusLine&apos;);
var responseStatusCode = parseInt(responseStatusLine.split(&apos; &apos;)[1], 10);

/* 200 update 
   201 creation 
   */



var result = null 
var patientIdFound = null
var patientTicketNumber = null

try {
	
	result = checkResponse( &apos;PARSE&apos; ,&apos;Upsert patient&apos;, &apos;http://localhost/beacore/patient/upsert&apos;,&apos;POST&apos;,responseStatusCode, msg)
	if ( result != &apos;not_found&apos; &amp;&amp;  msg[&apos;patient&apos;][&apos;id&apos;] ) {
		patientIdFound = new java.lang.Integer(  msg[&apos;patient&apos;][&apos;id&apos;]);
		patientTicketNumber =  msg[&apos;patient&apos;][&apos;ticketNumber&apos;];
	}
    		 
} catch (e) {
    logger.error(e);
}

channelMap.put(&apos;patient_id&apos;,patientIdFound );
channelMap.put(&apos;ticket_number&apos;,patientTicketNumber );
channelMap.put(&apos;result&apos;, result);</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64">ewogICAgInBhdGllbnQiOiB7CiAgICAgICAgImlkIjogMTg2LAogICAgICAgICJobDdQYXRpZW50
SWQiOiBudWxsLAogICAgICAgICJobDdQYXRpZW50UGF0aWVudElkIjogIjEyMyIsCiAgICAgICAg
InRpY2tldE51bWJlciI6IG51bGwsCiAgICAgICAgImFkbWl0RGF0ZXRpbWUiOiBudWxsLAogICAg
ICAgICJhZG1pdEJvcm5lQ29kZSI6IG51bGwsCiAgICAgICAgInJlYXNvbk9mVmlzaXRDb2RlIjog
IkpBSV9SRFYiLAogICAgICAgICJyZWFzb25PZlZpc2l0IjogewogICAgICAgICAgICAiY29kZSI6
ICJKQUlfUkRWIgogICAgICAgIH0sCiAgICAgICAgImxhc3ROYW1lIjogIlRFU1QiLAogICAgICAg
ICJmaXJzdE5hbWUiOiAiVEVTVCIsCiAgICAgICAgInNleCI6ICJIIiwKICAgICAgICAiYmlydGhk
YXRlIjogIjE5ODAtMDUtMTFUMjI6MDA6MDAuMDAwWiIsCiAgICAgICAgInN0cmVldEFkZHJlc3Mi
OiAiMTIgcnVlIGRlIGxhIHLDqXB1YmxpcXVlIiwKICAgICAgICAiY2l0eSI6ICJMeW9uIiwKICAg
ICAgICAic3RhdGUiOiAiRU4iLAogICAgICAgICJ6aXBDb2RlIjogIjc1MDAwIiwKICAgICAgICAi
cHJpdmF0ZVBob25lTnVtYmVyIjogIjA3MDcwNzA3MDciLAogICAgICAgICJidXNpbmVzc1Bob25l
TnVtYmVyIjogIjAxMDEwMTAxMDEiLAogICAgICAgICJtYWlsIjogInRlc3RAdzJpcy5mciIsCiAg
ICAgICAgInNzbk51bWJlciI6IG51bGwsCiAgICAgICAgInJlZmVycmluZ0RvY3RvcklkIjogbnVs
bCwKICAgICAgICAibG9jYXRpb25Db2RlIjogbnVsbCwKICAgICAgICAibG9jYXRpb24iOiBudWxs
LAogICAgICAgICJwYXRpZW50U3RhdHVzQ29kZSI6ICJOT1RfQURNSVRURUQiLAogICAgICAgICJw
YXRpZW50U3RhdHVzIjogewogICAgICAgICAgICAiY29kZSI6ICJOT1RfQURNSVRURUQiCiAgICAg
ICAgfSwKICAgICAgICAicHV0T25Ib2xkIjogbnVsbCwKICAgICAgICAibGFzdENhbGxlZEF0Ijog
bnVsbCwKICAgICAgICAibGFzdENhbGxlZExvY2F0aW9uIjogbnVsbCwKICAgICAgICAibnVtYmVy
T2ZDYWxsIjogMCwKICAgICAgICAid29ya2Zsb3dDb2RlIjogbnVsbCwKICAgICAgICAibGFzdFdv
cmtmbG93SGlzdG9yeUlkIjogbnVsbCwKICAgICAgICAibW9kaWZ5SW5mb3JtYXRpb25zU3RhdHVz
IjogMCwKICAgICAgICAiZ2VzdGlvbm5haXJlRHJvaXRzIjogbnVsbCwKICAgICAgICAiZHJvaXRz
RGVidXQiOiBudWxsLAogICAgICAgICJkcm9pdHNGaW4iOiBudWxsLAogICAgICAgICJkaWRSZWFk
Q3YiOiBudWxsLAogICAgICAgICJkaWRVcGRhdGVDdiI6IG51bGwsCiAgICAgICAgInJlYWRFcnJv
ckN2IjogbnVsbCwKICAgICAgICAidXBkYXRlRXJyb3JDdiI6IG51bGwsCiAgICAgICAgImFnZSI6
IDQyLAogICAgICAgICJzcG9rZW5MYW5ndWFnZSI6ICJmciIsCiAgICAgICAgImxhc3RTdGF0dXNV
cGRhdGUiOiAiMjAyMi0wNy0xMlQxNDoyMjo0Ni4wMDBaIiwKICAgICAgICAiY3JlYXRlZEF0Ijog
IjIwMjItMDctMTJUMTQ6MjI6NDYuMDAwWiIsCiAgICAgICAgInVwZGF0ZWRBdCI6IG51bGwsCiAg
ICAgICAgInN0dWRpZXMiOiBbXSwKICAgICAgICAiZG9jdW1lbnRzIjogW10sCiAgICAgICAgImlk
ZW50aWZpZXJzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiYXNzaWduaW5nQXV0
aG9yaXR5IjogIk5ldyIsCiAgICAgICAgICAgICAgICAiaWRlbnRpZmlhbnRUeXBlQ29kZSI6ICJO
ZXciLAogICAgICAgICAgICAgICAgImV4dGVybmFsSWQiOiAiNzg5IiwKICAgICAgICAgICAgICAg
ICJpZCI6IDE1NwogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAi
YXNzaWduaW5nQXV0aG9yaXR5IjogIk5ldyIsCiAgICAgICAgICAgICAgICAiaWRlbnRpZmlhbnRU
eXBlQ29kZSI6ICJOZXciLAogICAgICAgICAgICAgICAgImV4dGVybmFsSWQiOiAiMTIzIiwKICAg
ICAgICAgICAgICAgICJpZCI6IDE1OAogICAgICAgICAgICB9CiAgICAgICAgXQogICAgfQp9</inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Accept message if &quot;$(&apos;patient&apos;).hl7_identifierList&quot; exists</name>
            <data>
              <entry>
                <string>Field</string>
                <string>$(&apos;patient&apos;).hl7_identifierList</string>
              </entry>
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>2</string>
              </entry>
              <entry>
                <string>Values</string>
                <list>
                  <string>&apos;&apos;</string>
                  <string>null</string>
                </list>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if($(&apos;patient&apos;).hl7_identifierList.length &gt; 0) {
	return true;
}
return false;</script>
            <operator>NONE</operator>
          </rule>
          <rule>
            <sequenceNumber>1</sequenceNumber>
            <name>Filtre type de message</name>
            <data>
              <entry>
                <string>Script</string>
                <string>if  (
		$(&apos;messageHeader&apos;)[&apos;messageType&apos;] != &apos;ORU&apos; || //Filtre sur message ORU
		$(&apos;nextStep&apos;) != null // Filtre sur message de mise à jour de RDV ou statut patient
	)
	{		
		return true
		}
	else{
		return false
	}</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>if  (
		$(&apos;messageHeader&apos;)[&apos;messageType&apos;] != &apos;ORU&apos; || //Filtre sur message ORU
		$(&apos;nextStep&apos;) != null // Filtre sur message de mise à jour de RDV ou statut patient
	)
	{		
		return true
		}
	else{
		return false
	}</script>
            <operator>AND</operator>
          </rule>
        </rules>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.4.2">
      <metaDataId>104</metaDataId>
      <name>Upsert Referring Doctor</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>true</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <script>var returnedValues= {}
returnedResponse = router.routeMessage(&apos;Upsert Referring Doctor&apos;,  $(&apos;data_referring_doctor&apos;) )  ;

returnedValues= JSON.parse(returnedResponse.getMessage())
channelMap.put(&apos;referring_doctor_id&apos;, validate(returnedValues.referring_doctor_id, &apos;&apos;, new Array()));

return Response(returnedResponse.getStatus(),  returnedResponse.getMessage() );



</script>
      </properties>
      <transformer version="3.4.2">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>patient</name>
            <script>// chargement des informations du médecin traitant a rattacher au patient, prealablement mappées selon les éditeurs
// dans les destinations MAPPING 

var mapping = &apos;&apos;;

try{
	
	tmp[&apos;patient&apos;][&apos;id&apos;] = $(&apos;patient_id&apos;)
	
	
	tmp[&apos;patient&apos;][&apos;last_name&apos;] =     	$(&apos;patient&apos;).last_name
	tmp[&apos;patient&apos;][&apos;first_name&apos;] =  	$(&apos;patient&apos;).first_name
	tmp[&apos;patient&apos;][&apos;birthdate&apos;] =   	$(&apos;patient&apos;).birthdate
	 
     tmp[&apos;patient&apos;][&apos;hl7_patient_identifierList&apos;]  = 	  $(&apos;patient&apos;).identifierList
	
	// -- MEDECIN TRAITANT  - segment ROL 
	tmp[&apos;patient&apos;][&apos;doctor&apos;][&apos;rpps_number&apos;] =	 $(&apos;referringDoctor&apos;).rpps_number
	tmp[&apos;patient&apos;][&apos;doctor&apos;][&apos;last_name&apos;] 	= 	 $(&apos;referringDoctor&apos;).last_name
	tmp[&apos;patient&apos;][&apos;doctor&apos;][&apos;first_name&apos;] 	= 	 $(&apos;referringDoctor&apos;).first_name
	tmp[&apos;patient&apos;][&apos;doctor&apos;][&apos;street&apos;] 	=	 $(&apos;referringDoctor&apos;).street
	tmp[&apos;patient&apos;][&apos;doctor&apos;][&apos;city&apos;] 		=	 $(&apos;referringDoctor&apos;).city
	tmp[&apos;patient&apos;][&apos;doctor&apos;][&apos;zip_code&apos;]	=	 $(&apos;referringDoctor&apos;).zip_code
	tmp[&apos;patient&apos;][&apos;doctor&apos;][&apos;phone_number&apos;]=	 $(&apos;referringDoctor&apos;).phone_number
	
	
	mapping = JSON.stringify(tmp); 

} catch (e) {
	logger.error(e);
	mapping = &apos;&apos;
}

channelMap.put(&apos;data_referring_doctor&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>// chargement des informations du médecin traitant a rattacher au patient, prealablement mappées selon les éditeurs
// dans les destinations MAPPING 

var mapping = &apos;&apos;;

try{
	
	tmp[&apos;patient&apos;][&apos;id&apos;] = $(&apos;patient_id&apos;)
	
	
	tmp[&apos;patient&apos;][&apos;last_name&apos;] =     	$(&apos;patient&apos;).last_name
	tmp[&apos;patient&apos;][&apos;first_name&apos;] =  	$(&apos;patient&apos;).first_name
	tmp[&apos;patient&apos;][&apos;birthdate&apos;] =   	$(&apos;patient&apos;).birthdate
	 
     tmp[&apos;patient&apos;][&apos;hl7_patient_identifierList&apos;]  = 	  $(&apos;patient&apos;).identifierList
	
	// -- MEDECIN TRAITANT  - segment ROL 
	tmp[&apos;patient&apos;][&apos;doctor&apos;][&apos;rpps_number&apos;] =	 $(&apos;referringDoctor&apos;).rpps_number
	tmp[&apos;patient&apos;][&apos;doctor&apos;][&apos;last_name&apos;] 	= 	 $(&apos;referringDoctor&apos;).last_name
	tmp[&apos;patient&apos;][&apos;doctor&apos;][&apos;first_name&apos;] 	= 	 $(&apos;referringDoctor&apos;).first_name
	tmp[&apos;patient&apos;][&apos;doctor&apos;][&apos;street&apos;] 	=	 $(&apos;referringDoctor&apos;).street
	tmp[&apos;patient&apos;][&apos;doctor&apos;][&apos;city&apos;] 		=	 $(&apos;referringDoctor&apos;).city
	tmp[&apos;patient&apos;][&apos;doctor&apos;][&apos;zip_code&apos;]	=	 $(&apos;referringDoctor&apos;).zip_code
	tmp[&apos;patient&apos;][&apos;doctor&apos;][&apos;phone_number&apos;]=	 $(&apos;referringDoctor&apos;).phone_number
	
	
	mapping = JSON.stringify(tmp); 

} catch (e) {
	logger.error(e);
	mapping = &apos;&apos;
}

channelMap.put(&apos;data_referring_doctor&apos;, validate( mapping , &apos;&apos;, new Array()));</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64">eyAJIk1TSCI6IHsKCQkic2VuZGluZ0FwcGxpY2F0aW9uX25hbWVzcGFjZUlkIjogbnVsbCwgCgkJ
InNlbmRpbmdGYWNpbGl0eV9uYW1lc3BhY2VJZCI6IG51bGwsCgkJImRhdGVPclRpbWVPZk1lc3Nh
Z2VfdGltZU9mQW5FdmVudCI6IG51bGwsIAoJCSJtZXNzYWdlVHlwZSI6IG51bGwsIAoJCSJtZXNz
YWdlVHlwZV90cmlnZ2VyRXZlbnQiOiBudWxsLCAKCQkibWVzc2FnZUNvbnRyb2xJZF92YWx1ZSI6
IG51bGwsIAoJCSJhY2NlcHRBY2tub3dsZWRnbWVudFR5cGVfdmFsdWUiOiBudWxsLCAKCQkiYXBw
bGljYXRpb25BY2tub3dsZWRnbWVudFR5cGVfdmFsdWUiOiBudWxsLCAKCQkic2VxdWVuY2VOdW1i
ZXJfdmFsdWUiOiBudWxsIAoJfSwKCSJQQVRJRU5UIjogewoJCSJobDdfaWRlbnRpZmllciI6IG51
bGwsIAoJCSJpZGVudGlmaWVyTGlzdCI6IG51bGwsIAoJCSJsYXN0X25hbWUiOiBudWxsLCAKCQki
Zmlyc3RfbmFtZSI6IG51bGwsIAoJCSJiaXJ0aGRhdGUiOiBudWxsLCAKCQkic2V4IjogbnVsbCwg
CgkJInN0cmVldF9hZGRyZXNzIjogbnVsbCwgCgkJImNpdHkiOiBudWxsLCAKCQkic3RhdGUiOiBu
dWxsLCAKCQkiemlwX2NvZGUiOiBudWxsLCAKCQkicHJpdmF0ZV9waG9uZV9udW1iZXIiOiBudWxs
LCAKCQkiYnVzaW5lc3NfcGhvbmVfbnVtYmVyIjogbnVsbCwgCgkJIm1haWwiOiBudWxsCgl9LAoJ
Ik1FUkdFIjogewoJCSJwcmlvclBhdGllbnRJZGVudGlmaWVyTGlzdF9pZCI6IG51bGwsCgkJInBy
aW9yUGF0aWVudE5hbWVfZmFtaWx5TGFzdE5hbWUiOiBudWxsLAoJCSJwcmlvclBhdGllbnROYW1l
X2dpdmVuTmFtZSIgOiBudWxsCgl9LAoJIlZJU0lUIjogewoJCSJ2aXNpdF9udW1iZXIiIDogbnVs
bCwKCQkiZXhwZWN0ZWRfYWRtaXRfZGF0ZXRpbWUiOiBudWxsCgl9LAoJIklOU1VSQU5DRSI6IHsK
CQkidHlwZSI6ICBudWxsLAoJCSJuaXIiOiBudWxsLAoJCSJhbW9fY29kZV9yZWdpbWVfY2Fpc3Nl
X2NlbnRyZSI6IG51bGwsCgkJImFtb19kcm9pdF9kZWJ1dCI6IG51bGwsCgkJImFtb19kcm9pdF9m
aW4iOiBudWxsCgl9LCAKCSJSRUZFUlJJTkdfRE9DVE9SIjogewoJCSJsYXN0X25hbWUiOiAgbnVs
bCwKCQkiZmlyc3RfbmFtZSI6ICBudWxsLAoJCSJycHBzX251bWJlciI6IG51bGwsCgkJInN0cmVl
dCI6ICAJbnVsbCwKCQkiY2l0eSI6ICBudWxsLAoJCSJ6aXBfY29kZSI6ICBudWxsLAoJCSJwaG9u
ZV9udW1iZXIiOiBudWxsCgl9LCAKCSJTVFVESUVTIjogW3sKCQkiYWNjZXNzaW9uX251bWJlciI6
ICAJbnVsbCAsCgkJImluc3RhbmNlX3VpZCI6ICAJCW51bGwgLAoJCSJzY2hlZHVsZWRfZGF0ZXRp
bWUiOiAJbnVsbCAsCQoJCSJsb2NhdGlvbl9jb2RlIjogICAgCW51bGwgLAkgICAKCQkibG9jYXRp
b25fbGFiZWwiOiAJIAludWxsICwJCgkJInN0YXR1c19jb2RlIjogIAkJbnVsbCAsCQoJCSJzdHVk
eV90eXBlX2NvZGUiOiAJIAludWxsICwJCgkJInN0dWR5X3R5cGVfdGV4dCI6CSAJbnVsbCAsCQoJ
CSJtb2RhbGl0eV9jb2RlIjogCQludWxsICwJCgkJIm1vZGFsaXR5X3RleHQiOiAJCW51bGwgLAkK
CQkib3JpZ2luIjogCQkJCW51bGwgLAoJCSJkdXJhdGlvbiI6IAkJCW51bGwKICAgICB9XSwKIAki
bmV4dFN0ZXAiOiBudWxsCQp9</inboundTemplate>
        <outboundTemplate encoding="base64">eyAKCSJwYXRpZW50IjogeyAgCgkJImlkIjogIiIsCiAgICAgICAgImxhc3RfbmFtZSI6ICIiLAoJ
CSJmaXJzdF9uYW1lIjogIiIsCgkJImJpcnRoZGF0ZSI6ICIiLAoJCSJobDdfcGF0aWVudF9pZGVu
dGlmaWVyTGlzdCI6W3sKCQkJCSJpZCI6ICIiLAoJCQkJImFzc2lnbmluZ19hdXRob3JpdHlfbmFt
ZXNwYWNlX2lkIjogIiIsCgkJCQkidHlwZV9jb2RlX2lkIjoiUEkiCgkJfV0sCgkJImRvY3RvciI6
IHsKCQkJInJwcHNfbnVtYmVyIjogIiIsCgkJCSJmaXJzdF9uYW1lIjogIiIsCgkJCSJsYXN0X25h
bWUiOiAiIiwKCQkJInN0cmVldCI6ICIiLAoJCQkiY2l0eSI6ICIiLAoJCQkiemlwX2NvZGUiOiAi
IiwKCQkJInBob25lX251bWJlciI6ICIiCQoJCX0KCiAgCX0KfQ==</outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps/>
        <inboundTemplate encoding="base64">ewkiZXJyb3IiOiBmYWxzZSwgCgkiZXJyb3JfbWVzc2FnZSI6ICIiLCAKCSJjb250cm9sX2lkIjog
IiIsIAoJInJlZmVycmluZ0RvY3RvcklkIjogIiIJCQp9</inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Referreing Doctor Exist</name>
            <data>
              <entry>
                <string>Script</string>
                <string>if( $(&apos;referringDoctor&apos;) &amp;&amp; $(&apos;referringDoctor&apos;).toString().length &gt; 0 &amp;&amp; 
    $(&apos;referringDoctor&apos;).last_name &amp;&amp; $(&apos;referringDoctor&apos;).last_name  !=&apos;&apos; ) {
// on ne met a jour le médecin référent que s&apos;il y  a une valeur transmise dasn le segment ROL ODRP
	return true;
}
return false;</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>if( $(&apos;referringDoctor&apos;) &amp;&amp; $(&apos;referringDoctor&apos;).toString().length &gt; 0 &amp;&amp; 
    $(&apos;referringDoctor&apos;).last_name &amp;&amp; $(&apos;referringDoctor&apos;).last_name  !=&apos;&apos; ) {
// on ne met a jour le médecin référent que s&apos;il y  a une valeur transmise dasn le segment ROL ODRP
	return true;
}
return false;</script>
            <operator>NONE</operator>
          </rule>
          <rule>
            <sequenceNumber>1</sequenceNumber>
            <name>Accept message if &quot;$(&apos;patient_id&apos;)&quot; does not equal &apos;&apos; or null</name>
            <data>
              <entry>
                <string>Field</string>
                <string>$(&apos;patient_id&apos;)</string>
              </entry>
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>0</string>
              </entry>
              <entry>
                <string>Values</string>
                <list>
                  <string>&apos;&apos;</string>
                  <string>null</string>
                </list>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if($(&apos;patient_id&apos;) != &apos;&apos; &amp;&amp; $(&apos;patient_id&apos;) != null) {
	return true;
}
return false;</script>
            <operator>AND</operator>
          </rule>
        </rules>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.4.2">
      <metaDataId>131</metaDataId>
      <name>DEEPLINK MEDICAL- WIIS MOBILITY - RESEND ADTA08 TO RIS</name>
      <properties class="com.mirth.connect.connectors.jdbc.DatabaseDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <driver>com.mysql.jdbc.Driver</driver>
        <url></url>
        <username></username>
        <password></password>
        <query>var dbConn;

try {
	dbConn = getDBConnection();

	var query = &quot;INSERT INTO `bea`.`task` (`action`, `parameters`, `status`) VALUES (?, ?, ?)&quot;;
	
	var result = dbConn.executeUpdate(query, [
			&apos;PATIENT_UPDATED&apos;,
			$(&apos;patient_id&apos;),
			&apos;TODO&apos;
		]);



} catch(ex) {
	var message = ex.message + &apos; &apos; + connectorMessage.getRawData();
	logToFile(message);	
	error= true
	error_status=ERROR

	
} finally {

	if (dbConn) { 
		dbConn.close();
	}
}</query>
        <useScript>true</useScript>
      </properties>
      <transformer version="3.4.2">
        <steps/>
        <inboundTemplate encoding="base64">ew0KICAiTVNIIiA6IHsNCiAgICAic2VuZGluZ0FwcGxpY2F0aW9uX25hbWVzcGFjZUlkIiA6ICJY
UExPUkUiLA0KICAgICJzZW5kaW5nRmFjaWxpdHlfbmFtZXNwYWNlSWQiIDogIlhQTE9SRSIsDQog
ICAgImRhdGVPclRpbWVPZk1lc3NhZ2VfdGltZU9mQW5FdmVudCIgOiAiMjAyMC0xMi0yOCAwNzo0
OTowMCIsDQogICAgIm1lc3NhZ2VUeXBlIiA6ICJTSVUiLA0KICAgICJtZXNzYWdlVHlwZV90cmln
Z2VyRXZlbnQiIDogIlMxMiIsDQogICAgIm1lc3NhZ2VDb250cm9sSWRfdmFsdWUiIDogIkExMDI3
MDU2ODUwMjA3NDg0MyIsDQogICAgImFjY2VwdEFja25vd2xlZGdtZW50VHlwZV92YWx1ZSIgOiAi
IiwNCiAgICAiYXBwbGljYXRpb25BY2tub3dsZWRnbWVudFR5cGVfdmFsdWUiIDogIiIsDQogICAg
InNlcXVlbmNlTnVtYmVyX3ZhbHVlIiA6IDAsDQogICAgImNvZGVTaXRlIiA6ICJDRUQiDQogIH0s
DQogICJQQVRJRU5UIiA6IHsNCiAgICAiaGw3X2lkZW50aWZpZXIiIDogIlhDMDAwMDAyNzE5NSIs
DQogICAgImhsN19pZGVudGlmaWVyTGlzdCIgOiBbDQogICAgICB7DQogICAgICAgICJpZCIgOiAi
WEMwMDAwMDI3MTk1IiwNCiAgICAgICAgImFzc2lnbmluZ19hdXRob3JpdHlfbmFtZXNwYWNlX2lk
IiA6ICJFREwiLA0KICAgICAgICAidHlwZV9jb2RlX2lkIiA6ICJQSSINCiAgICAgIH0NCiAgICBd
LA0KICAgICJsYXN0X25hbWUiIDogIkdVWU9OIiwNCiAgICAiZmlyc3RfbmFtZSIgOiAiSkVBTiBN
SUNIRUwiLA0KICAgICJiaXJ0aGRhdGUiIDogIjE5NjUtMDMtMDkiLA0KICAgICJzZXgiIDogIk0i
LA0KICAgICJzdHJlZXRfYWRkcmVzcyIgOiAiMyBSVUUgVFJVR1VFVCAiLA0KICAgICJjaXR5IiA6
ICJUT1VMT04iLA0KICAgICJzdGF0ZSIgOiAiIiwNCiAgICAiemlwX2NvZGUiIDogIjgzMDAwIiwN
CiAgICAicHJpdmF0ZV9waG9uZV9udW1iZXIiIDogIjA0OTQ5MzQyMDYiLA0KICAgICJidXNpbmVz
c19waG9uZV9udW1iZXIiIDogIiIsDQogICAgIm1haWwiIDogIiINCiAgfSwNCiAgIk1FUkdFIiA6
IG51bGwsDQogICJWSVNJVCI6IHsKCSAgICAgICAgInBhdGllbnRfY2xhc3MiOiAgCSAJbnVsbCwK
CSAgICAgICAgImFkbWlzc2lvbl90eXBlIjogCQludWxsICwKCSAgICAgICAgInByZWFkbWl0X251
bWJlciI6IAkJbnVsbCAsCgkgICAgICAgICJhZG1pdF9udW1iZXIiOiAJCW51bGwsCgkgICAgICAg
ICJ2aXNpdF9kZXNjcmlwdGlvbiI6ICAgIG51bGwsCgkgICAgICAgICJhdHRlbmRpbmdfZG9jdG9y
X2V4dGVybmFsX2lkIjogCQludWxsLAoJICAgICAgICAicmVmZXJyaW5nX2RvY3Rvcl9leHRlcm5h
bF9pZCI6ICAJCW51bGwsCgkgICAgICAgICJjb25zdWx0aW5nX2RvY3Rvcl9leHRlcm5hbF9pZCI6
ICAJCW51bGwsCgkgICAgICAgICJhZG1pdHRpbmdfZG9jdG9yX2V4dGVybmFsX2lkIjogCQludWxs
LAoJICAgICAgICAiaG9zcGl0YWxfc2VydmljZSI6ICAJCSAgIAkJCW51bGwsCgkgICAgICAgICJh
ZG1pdF9zb3VyY2UiOgkJICAgICAgICAgICAgCQludWxsLAoJICAgICAgICAiYW1idWxhdG9yeV9z
dGF0dXMiOiAJCQkJCW51bGwsCgkgICAgICAgICJtZWRpY2FsX2NhcmVfcHJvdG9jb2xfY29kZSI6
IAkJCW51bGwsCgkgICAgICAgICJtZWRpY2FsX2NhcmVfcHJvdG9jb2xfZGVzY3JpcHRpb24iOiAJ
bnVsbCwKCSAgICAgICAgInZpcF9pbmRpY2F0b3IiOiAgICAgCQkJCSAJbnVsbCwKCSAgICAgICAg
ImV4cGVjdGVkX2FkbWl0X2RhdGV0aW1lIjoJCSAJIAludWxsLAoJICAgICAgICAiYWRtaXRfZGF0
ZXRpbWUiOiAJCQkJCSAJbnVsbCwKCSAgICAgICAgImV4cGVjdGVkX2Rpc2NoYXJnZV9kYXRldGlt
ZSI6CQkgCW51bGwsCgkgICAgICAgICJkaXNjaGFyZ2VfZGF0ZXRpbWUiOiAJCQkgICAgIAludWxs
Cgl9LAogICJJTlNVUkFOQ0UiIDogew0KICAgICJpbnN1cmFuY2VfdHlwZSIgOiAiQU1PIiwNCiAg
ICAibmlyIiA6ICIxNjUwMzk5MzQxMDgyMjciLA0KICAgICJhbW9fY29kZV9yZWdpbWVfY2Fpc3Nl
X2NlbnRyZSIgOiBudWxsLA0KICAgICJhbW9fZHJvaXRfZGVidXQiIDogbnVsbCwNCiAgICAiYW1v
X2Ryb2l0X2ZpbiIgOiBudWxsDQogIH0sDQogICJSRUZFUlJJTkdfRE9DVE9SIiA6ICIiLA0KICAi
U1RVRElFUyIgOiBbDQogICAgew0KICAgICAgImFwcG9pbnRtZW50X251bWJlciIgOiAiQTEwMjcw
NTY4NTAwIiwNCiAgICAgICJhY2Nlc3Npb25fbnVtYmVyIiA6ICJBMTAyNzA1Njg1MDAiLA0KICAg
ICAgImluc3RhbmNlX3VpZCIgOiAiQTEwMjcwNTY4NTAwXzAiLA0KICAgICAgImxvY2F0aW9uX2Nv
ZGUiIDogIlJBRFVSQyIsDQogICAgICAibG9jYXRpb25fbGFiZWwiIDogIlJBRElPIFVSR0VOQ0VT
IENFRFJFUyIsDQogICAgICAibG9jYXRpb25fdHlwZV9jb2RlIiA6ICJOT1RfVVNFRCIsDQogICAg
ICAibG9jYXRpb25fdGlja2V0X21lc3NhZ2UiIDogbnVsbCwNCiAgICAgICJsb2NhdGlvbl9wYXBl
cl9tZXNzYWdlIiA6IG51bGwsDQogICAgICAic3R1ZHlfc3RhdHVzX2NvZGUiIDogIlNDSEVEVUxF
RCIsDQogICAgICAic3R1ZHlfdHlwZV9jb2RlIiA6ICJSQURVUkNfUlBPVU0iLA0KICAgICAgInNo
aWZ0X2NvZGUiIDogIlJBRFVSQyIsDQogICAgICAic3R1ZHlfYWx0ZXJuYXRpdmVfdHlwZV9jb2Rl
IiA6IG51bGwsDQogICAgICAic3R1ZHlfdHlwZV90ZXh0IiA6ICJQT1VNT05TIDEwIiwNCiAgICAg
ICJzY2hlZHVsZWRfZGF0ZXRpbWUiIDogIjIwMjAtMTItMjggMTA6MTA6MDAiLA0KICAgICAgIm1v
ZGFsaXR5X2NvZGUiIDogIlJBIiwNCiAgICAgICJtb2RhbGl0eV90ZXh0IiA6ICJSQURJTyBUSE9S
QUNJUVVFIC8gQVNQIiwNCiAgICAgICJvcmlnaW4iIDogIkdFUkkiLA0KICAgICAgImR1cmF0aW9u
IiA6ICIyMCINCiAgICB9DQogIF0sDQogICJET0NVTUVOVFMiIDogWyBdLA0KICAiTUVSR0VfVklT
SVQiIDogIiIsDQogICJuZXh0U3RlcCIgOiBudWxsDQp9</inboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps/>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Accept message if &quot;msg[&apos;MSH&apos;][&apos;messageType&apos;]&quot; equals &apos;ADT&apos;</name>
            <data>
              <entry>
                <string>Field</string>
                <string>msg[&apos;MSH&apos;][&apos;messageType&apos;]</string>
              </entry>
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>1</string>
              </entry>
              <entry>
                <string>Values</string>
                <list>
                  <string>&apos;ADT&apos;</string>
                </list>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if(msg[&apos;MSH&apos;][&apos;messageType&apos;] == &apos;ADT&apos;) {
	return true;
}
return false;</script>
            <operator>NONE</operator>
          </rule>
          <rule>
            <sequenceNumber>1</sequenceNumber>
            <name>Accept message if &quot;msg[&apos;MSH&apos;][&apos;messageType_triggerEvent&apos;]&quot; equals &apos;A08&apos;</name>
            <data>
              <entry>
                <string>Field</string>
                <string>msg[&apos;MSH&apos;][&apos;messageType_triggerEvent&apos;]</string>
              </entry>
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>1</string>
              </entry>
              <entry>
                <string>Values</string>
                <list>
                  <string>&apos;A08&apos;</string>
                </list>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if(msg[&apos;MSH&apos;][&apos;messageType_triggerEvent&apos;] == &apos;A08&apos;) {
	return true;
}
return false;</script>
            <operator>AND</operator>
          </rule>
          <rule>
            <sequenceNumber>2</sequenceNumber>
            <name>Accept message if &quot;msg[&apos;MSH&apos;][&apos;sendingApplication_namespaceId&apos;]&quot; equals &apos;DEEPLINK&apos;</name>
            <data>
              <entry>
                <string>Field</string>
                <string>msg[&apos;MSH&apos;][&apos;sendingApplication_namespaceId&apos;]</string>
              </entry>
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>1</string>
              </entry>
              <entry>
                <string>Values</string>
                <list>
                  <string>&apos;DEEPLINK&apos;</string>
                </list>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if(msg[&apos;MSH&apos;][&apos;sendingApplication_namespaceId&apos;] == &apos;DEEPLINK&apos;) {
	return true;
}
return false;</script>
            <operator>AND</operator>
          </rule>
        </rules>
      </filter>
      <transportName>Database Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>false</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.4.2">
      <metaDataId>94</metaDataId>
      <name>Find patient to Merge with MRG  PID - External ID </name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <host>http://localhost/beacore/patients/multipleid/getfromlist</host>
        <useProxyServer>false</useProxyServer>
        <proxyAddress></proxyAddress>
        <proxyPort></proxyPort>
        <method>post</method>
        <headers class="linked-hash-map">
          <entry>
            <string>Authorization</string>
            <list>
              <string>Bearer ${accessToken}</string>
            </list>
          </entry>
          <entry>
            <string>Content-Type</string>
            <list>
              <string>application/json</string>
            </list>
          </entry>
        </headers>
        <parameters class="linked-hash-map"/>
        <responseXmlBody>false</responseXmlBody>
        <responseParseMultipart>true</responseParseMultipart>
        <responseIncludeMetadata>false</responseIncludeMetadata>
        <responseBinaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</responseBinaryMimeTypes>
        <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
        <multipart>false</multipart>
        <useAuthentication>false</useAuthentication>
        <authenticationType>Basic</authenticationType>
        <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
        <username></username>
        <password></password>
        <content>${message.transformedData}</content>
        <contentType>application/json</contentType>
        <dataTypeBinary>false</dataTypeBinary>
        <charset>UTF-8</charset>
        <socketTimeout>30000</socketTimeout>
      </properties>
      <transformer version="3.4.2">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>liste des identifiant recherchés</name>
            <script>/*

 dans un MERGE on ne recherche qu&apos;un seul Identifiant  du segment MRG 
  {&quot;PatientIdentifierList_id&quot;:&quot;289888&quot;,&quot;assigning_authority_namespace_id&quot;:&quot;SIGEMS&quot;,&quot;type_code_id&quot;:&quot;PI&quot;}
*/


	
 tmp[&apos;identifiers&apos;].push({
		&quot;externalId&quot; : 		$(&apos;patientToMerge&apos;).PatientIdentifierList_id ,
		&quot;assigningAuthority&quot; :   $(&apos;patientToMerge&apos;).assigning_authority_namespace_id  ,
          &quot;identifiantTypeCode&quot; :  $(&apos;patientToMerge&apos;).type_code_id 
	      });


/* information  liste des identifiants externes ,transmise à l&apos;API pour rechercher un patient

{
    &quot;identifiers&quot; : [
        {
            &quot;assigningAuthority&quot;: &quot;GIOL&quot;,
            &quot;identifiantTypeCode&quot;: &quot;PI&quot;,
            &quot;externalId&quot;: &quot;123456&quot;
        },
        {
            &quot;assigningAuthority&quot;: &quot;VENUSRIS&quot;,
            &quot;identifiantTypeCode&quot;: &quot;PI&quot;,
            &quot;externalId&quot;: &quot;ABCD1234&quot;
        },
        {
            &quot;assigningAuthority&quot;: &quot;W2IS&quot;,
            &quot;identifiantTypeCode&quot;: &quot;PI&quot;,
            &quot;externalId&quot;: &quot;ABCDE&quot;
        }
    ]
}
*/</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>/*

 dans un MERGE on ne recherche qu&apos;un seul Identifiant  du segment MRG 
  {&quot;PatientIdentifierList_id&quot;:&quot;289888&quot;,&quot;assigning_authority_namespace_id&quot;:&quot;SIGEMS&quot;,&quot;type_code_id&quot;:&quot;PI&quot;}
*/


	
 tmp[&apos;identifiers&apos;].push({
		&quot;externalId&quot; : 		$(&apos;patientToMerge&apos;).PatientIdentifierList_id ,
		&quot;assigningAuthority&quot; :   $(&apos;patientToMerge&apos;).assigning_authority_namespace_id  ,
          &quot;identifiantTypeCode&quot; :  $(&apos;patientToMerge&apos;).type_code_id 
	      });


/* information  liste des identifiants externes ,transmise à l&apos;API pour rechercher un patient

{
    &quot;identifiers&quot; : [
        {
            &quot;assigningAuthority&quot;: &quot;GIOL&quot;,
            &quot;identifiantTypeCode&quot;: &quot;PI&quot;,
            &quot;externalId&quot;: &quot;123456&quot;
        },
        {
            &quot;assigningAuthority&quot;: &quot;VENUSRIS&quot;,
            &quot;identifiantTypeCode&quot;: &quot;PI&quot;,
            &quot;externalId&quot;: &quot;ABCD1234&quot;
        },
        {
            &quot;assigningAuthority&quot;: &quot;W2IS&quot;,
            &quot;identifiantTypeCode&quot;: &quot;PI&quot;,
            &quot;externalId&quot;: &quot;ABCDE&quot;
        }
    ]
}
*/</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64">eyAKICAgImlkZW50aWZpZXJzIjogW10KCQkgCn0=</outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.4.2">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.4.2">
            <handleRepetitions>true</handleRepetitions>
            <handleSubcomponents>true</handleSubcomponents>
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <stripNamespaces>true</stripNamespaces>
            <segmentDelimiter>\r</segmentDelimiter>
            <convertLineBreaks>true</convertLineBreaks>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.4.2">
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <segmentDelimiter>\r</segmentDelimiter>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.4.2">
            <splitType>MSH_Segment</splitType>
            <batchScript></batchScript>
          </batchProperties>
          <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.4.2">
            <segmentDelimiter>\r</segmentDelimiter>
            <successfulACKCode>AA</successfulACKCode>
            <successfulACKMessage></successfulACKMessage>
            <errorACKCode>AE</errorACKCode>
            <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
            <rejectedACKCode>AR</rejectedACKCode>
            <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
            <msh15ACKAccept>false</msh15ACKAccept>
            <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
          </responseGenerationProperties>
          <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.4.2">
            <successfulACKCode>AA,CA</successfulACKCode>
            <errorACKCode>AE,CE</errorACKCode>
            <rejectedACKCode>AR,CR</rejectedACKCode>
            <validateMessageControlId>true</validateMessageControlId>
            <originalMessageControlId>Destination_Encoded</originalMessageControlId>
            <originalIdMapVariable></originalIdMapVariable>
          </responseValidationProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>mergePatientFromId</name>
            <script>var mergePatientFromId =&apos;&apos;
var responseStatusLine = $(&apos;responseStatusLine&apos;);
var responseStatusCode = parseInt(responseStatusLine.split(&apos; &apos;)[1], 10);
// var responseStatusMessage = responseStatusLine.substr(responseStatusLine.indexOf(&apos; &apos;)).trim();

var result = null 
     
try {
       result = checkResponse( &apos;PARSE&apos; ,&apos;Find Patient to Merge&apos;, &apos;http://localhost/beacore/patients/multipleid/getfromlist&apos;,&apos;POST&apos;,responseStatusCode, msg)
     
      if ( result ==&apos;found&apos;) {
       	mergePatientFromId = msg[&apos;patientId&apos;].toString()
        }

} catch(e) {
	logger.error(e);
}
/* patient a conserver après fusion  */ 
channelMap.put(&apos;mergePatientFromId&apos;, mergePatientFromId);</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>var mergePatientFromId =&apos;&apos;
var responseStatusLine = $(&apos;responseStatusLine&apos;);
var responseStatusCode = parseInt(responseStatusLine.split(&apos; &apos;)[1], 10);
// var responseStatusMessage = responseStatusLine.substr(responseStatusLine.indexOf(&apos; &apos;)).trim();

var result = null 
     
try {
       result = checkResponse( &apos;PARSE&apos; ,&apos;Find Patient to Merge&apos;, &apos;http://localhost/beacore/patients/multipleid/getfromlist&apos;,&apos;POST&apos;,responseStatusCode, msg)
     
      if ( result ==&apos;found&apos;) {
       	mergePatientFromId = msg[&apos;patientId&apos;].toString()
        }

} catch(e) {
	logger.error(e);
}
/* patient a conserver après fusion  */ 
channelMap.put(&apos;mergePatientFromId&apos;, mergePatientFromId);</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64">ewogICAgInBhdGllbnRJZCI6IG51bGwKfQ==</inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Accept message if &quot;$(&apos;messageHeader&apos;).messageType&quot; equals &apos;ADT&apos;</name>
            <data>
              <entry>
                <string>Field</string>
                <string>$(&apos;messageHeader&apos;).messageType</string>
              </entry>
              <entry>
                <string>Name</string>
                <string>Message Header - Message Type - Trigger Event (MSH.9.2)</string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string>msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString()</string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>1</string>
              </entry>
              <entry>
                <string>Values</string>
                <list>
                  <string>&apos;ADT&apos;</string>
                </list>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if($(&apos;messageHeader&apos;).messageType == &apos;ADT&apos;) {
	return true;
}
return false;</script>
            <operator>NONE</operator>
          </rule>
          <rule>
            <sequenceNumber>1</sequenceNumber>
            <name>Accept message if &quot;$(&apos;messageHeader&apos;).messageType_triggerEvent&quot; equals &apos;A40&apos;</name>
            <data>
              <entry>
                <string>Field</string>
                <string>$(&apos;messageHeader&apos;).messageType_triggerEvent</string>
              </entry>
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>1</string>
              </entry>
              <entry>
                <string>Values</string>
                <list>
                  <string>&apos;A40&apos;</string>
                </list>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if($(&apos;messageHeader&apos;).messageType_triggerEvent == &apos;A40&apos;) {
	return true;
}
return false;</script>
            <operator>AND</operator>
          </rule>
          <rule>
            <sequenceNumber>2</sequenceNumber>
            <name>Accept message if &quot;$(&apos;patient_id&apos;)&quot; does not equal &apos;&apos; or null</name>
            <data>
              <entry>
                <string>Field</string>
                <string>$(&apos;patient_id&apos;)</string>
              </entry>
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>0</string>
              </entry>
              <entry>
                <string>Values</string>
                <list>
                  <string>&apos;&apos;</string>
                  <string>null</string>
                </list>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if($(&apos;patient_id&apos;) != &apos;&apos; &amp;&amp; $(&apos;patient_id&apos;) != null) {
	return true;
}
return false;</script>
            <operator>AND</operator>
          </rule>
          <rule>
            <sequenceNumber>3</sequenceNumber>
            <name>Accept message if &quot;$(&apos;patientToMerge&apos;).PatientIdentifierList_id&quot; does not equal &apos;&apos; or null</name>
            <data>
              <entry>
                <string>Field</string>
                <string>$(&apos;patientToMerge&apos;).PatientIdentifierList_id</string>
              </entry>
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>0</string>
              </entry>
              <entry>
                <string>Values</string>
                <list>
                  <string>&apos;&apos;</string>
                  <string>null</string>
                </list>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if($(&apos;patientToMerge&apos;).PatientIdentifierList_id != &apos;&apos; &amp;&amp; $(&apos;patientToMerge&apos;).PatientIdentifierList_id != null) {
	return true;
}
return false;</script>
            <operator>AND</operator>
          </rule>
        </rules>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.4.2">
      <metaDataId>95</metaDataId>
      <name>ADT40 Merge patient</name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>true</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <host>http://localhost/beacore/patients/${mergePatientFromId}/merge</host>
        <useProxyServer>false</useProxyServer>
        <proxyAddress></proxyAddress>
        <proxyPort></proxyPort>
        <method>post</method>
        <headers class="linked-hash-map">
          <entry>
            <string>Authorization</string>
            <list>
              <string>Bearer ${accessToken}</string>
            </list>
          </entry>
          <entry>
            <string>Content-Type</string>
            <list>
              <string>application/json</string>
            </list>
          </entry>
        </headers>
        <parameters class="linked-hash-map"/>
        <responseXmlBody>false</responseXmlBody>
        <responseParseMultipart>true</responseParseMultipart>
        <responseIncludeMetadata>false</responseIncludeMetadata>
        <responseBinaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</responseBinaryMimeTypes>
        <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
        <multipart>false</multipart>
        <useAuthentication>false</useAuthentication>
        <authenticationType>Basic</authenticationType>
        <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
        <username></username>
        <password></password>
        <content>${message.transformedData}</content>
        <contentType>application/json</contentType>
        <dataTypeBinary>false</dataTypeBinary>
        <charset>UTF-8</charset>
        <socketTimeout>30000</socketTimeout>
      </properties>
      <transformer version="3.4.2">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>mergeBody</name>
            <script>/* patient supprimé après fusion */

 

tmp[&apos;patientIdTo&apos;] =   new java.lang.Integer($(&apos;patient_id&apos;) );
if ($(&apos;ticket_number&apos;) != null) {
	tmp[&apos;patientFromFieldsToKeep&apos;]= &quot;[]&quot;
} else {
	tmp[&apos;patientFromFieldsToKeep&apos;]= &quot;[&apos;ticket_number&apos;, &apos;admit_datetime&apos;,&apos;admit_borne_code&apos;, &apos;reason_of_visit_code&apos;, &apos;location_code&apos;, &apos;patient_status_code&apos;, &apos;gestionnaireDroits&apos;,&apos;droits_debut&apos;, &apos;droits_fin&apos;,&apos;didReadCv&apos;, &apos;didUpdateCv&apos;, &apos;did_read_qrcode&apos;, &apos;read_error_qrcode&apos;, &apos;isPassOk&apos;]&quot;
}</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>/* patient supprimé après fusion */

 

tmp[&apos;patientIdTo&apos;] =   new java.lang.Integer($(&apos;patient_id&apos;) );
if ($(&apos;ticket_number&apos;) != null) {
	tmp[&apos;patientFromFieldsToKeep&apos;]= &quot;[]&quot;
} else {
	tmp[&apos;patientFromFieldsToKeep&apos;]= &quot;[&apos;ticket_number&apos;, &apos;admit_datetime&apos;,&apos;admit_borne_code&apos;, &apos;reason_of_visit_code&apos;, &apos;location_code&apos;, &apos;patient_status_code&apos;, &apos;gestionnaireDroits&apos;,&apos;droits_debut&apos;, &apos;droits_fin&apos;,&apos;didReadCv&apos;, &apos;didUpdateCv&apos;, &apos;did_read_qrcode&apos;, &apos;read_error_qrcode&apos;, &apos;isPassOk&apos;]&quot;
}</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64">TVNIfF5+XCZ8R1hENVJJU3xHWEQ1UklTfERPQ1RPTElCfERPQ1RPTElCfDIwMTkxMTEyMDcxNjU4
fHxBRFReQTQwfDIwMTkxMTEyMDcxNjU1MzIxNTIzfFB8Mi4zLjF8fHx8fEZSQXxVTklDT0RFIFVU
Ri04CkVWTnxBNDB8MjAxOTExMTIwNzE2NTh8ClBJRHx8fDQ2NS4xNjI2NzBeXl5HSU9MXlBJfHxE
VU5BTkReSmVhbi1QYXVsXl5eXl5MfHwxOTUyMDgxNXxNfHx8MjMgUlVFIERFUyBFVFVWRVNeXk1P
TlRQRUxMSUVSXl4zNDAwMHx8MDcgNjYgODggNjcgMzleXl5+MDQgNjcgNTQgMzMgODUgICAgICAK
UFYxfHxPCk1SR3xURU1QLjM3ODI5MV5eXkdJT0xeUEkK</inboundTemplate>
        <outboundTemplate encoding="base64">eyAKCSJwYXRpZW50SWRUbyI6IG51bGwsIAogIAkicGF0aWVudEZyb21GaWVsZHNUb0tlZXAiOiBb
XSAKfQ==</outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>Check Merge</name>
            <script>var responseStatusLine = $(&apos;responseStatusLine&apos;);
var responseStatusCode = parseInt(responseStatusLine.split(&apos; &apos;)[1], 10);
   var result = null 
// var responseStatusMessage = responseStatusLine.substr(responseStatusLine.indexOf(&apos; &apos;)).trim();
     
try {
      result = checkResponse( &apos;PARSE&apos; ,&apos;Merge AD40&apos;, &apos;http://localhost/beacore/patients/(mergePatientFromId)/merge&apos;,&apos;POST&apos;,responseStatusCode, msg)
      

} catch(e) {
	logger.error(e); 
}</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>var responseStatusLine = $(&apos;responseStatusLine&apos;);
var responseStatusCode = parseInt(responseStatusLine.split(&apos; &apos;)[1], 10);
   var result = null 
// var responseStatusMessage = responseStatusLine.substr(responseStatusLine.indexOf(&apos; &apos;)).trim();
     
try {
      result = checkResponse( &apos;PARSE&apos; ,&apos;Merge AD40&apos;, &apos;http://localhost/beacore/patients/(mergePatientFromId)/merge&apos;,&apos;POST&apos;,responseStatusCode, msg)
      

} catch(e) {
	logger.error(e); 
}</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Accept message if &quot;$(&apos;messageHeader&apos;).messageType&quot; equals &apos;ADT&apos;</name>
            <data>
              <entry>
                <string>Field</string>
                <string>$(&apos;messageHeader&apos;).messageType</string>
              </entry>
              <entry>
                <string>Name</string>
                <string>Message Header - Message Type - Trigger Event (MSH.9.2)</string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string>msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString()</string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>1</string>
              </entry>
              <entry>
                <string>Values</string>
                <list>
                  <string>&apos;ADT&apos;</string>
                </list>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if($(&apos;messageHeader&apos;).messageType == &apos;ADT&apos;) {
	return true;
}
return false;</script>
            <operator>NONE</operator>
          </rule>
          <rule>
            <sequenceNumber>1</sequenceNumber>
            <name>Accept message if &quot;$(&apos;messageHeader&apos;).messageType_triggerEvent&quot; equals &apos;A40&apos;</name>
            <data>
              <entry>
                <string>Field</string>
                <string>$(&apos;messageHeader&apos;).messageType_triggerEvent</string>
              </entry>
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>1</string>
              </entry>
              <entry>
                <string>Values</string>
                <list>
                  <string>&apos;A40&apos;</string>
                </list>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if($(&apos;messageHeader&apos;).messageType_triggerEvent == &apos;A40&apos;) {
	return true;
}
return false;</script>
            <operator>AND</operator>
          </rule>
          <rule>
            <sequenceNumber>2</sequenceNumber>
            <name>Id du patient a merger existe et a été trouvé dans Patient_identifer</name>
            <data>
              <entry>
                <string>Script</string>
                <string>if($(&apos;mergePatientFromId&apos;).toString() != &apos;&apos; &amp;&amp; $(&apos;mergePatientFromId&apos;).toString() != null) {
	   return true;
	}else{
	  return false
 }</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>if($(&apos;mergePatientFromId&apos;).toString() != &apos;&apos; &amp;&amp; $(&apos;mergePatientFromId&apos;).toString() != null) {
	   return true;
	}else{
	  return false
 }</script>
            <operator>AND</operator>
          </rule>
          <rule>
            <sequenceNumber>3</sequenceNumber>
            <name>Accept message if &quot;$(&apos;patient_id&apos;)&quot; does not equal &apos;&apos; or null</name>
            <data>
              <entry>
                <string>Field</string>
                <string>$(&apos;patient_id&apos;)</string>
              </entry>
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>0</string>
              </entry>
              <entry>
                <string>Values</string>
                <list>
                  <string>&apos;&apos;</string>
                  <string>null</string>
                </list>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if($(&apos;patient_id&apos;) != &apos;&apos; &amp;&amp; $(&apos;patient_id&apos;) != null) {
	return true;
}
return false;</script>
            <operator>AND</operator>
          </rule>
          <rule>
            <sequenceNumber>4</sequenceNumber>
            <name>Ne pas exécuter si on est sur le même ID patient (défaut merge API)</name>
            <data>
              <entry>
                <string>Script</string>
                <string>// dans le cas ou les 3 ID sont identique , l&apos;API merge supprime le patient 
// pour éviter cela on ne déclenche le merge que si cela doit se faire
if( parseInt($(&apos;mergePatientFromId&apos;).toString()) != parseInt($(&apos;patient_id&apos;).toString()) ) {
	return true;
}
return false;</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>// dans le cas ou les 3 ID sont identique , l&apos;API merge supprime le patient 
// pour éviter cela on ne déclenche le merge que si cela doit se faire
if( parseInt($(&apos;mergePatientFromId&apos;).toString()) != parseInt($(&apos;patient_id&apos;).toString()) ) {
	return true;
}
return false;</script>
            <operator>AND</operator>
          </rule>
        </rules>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.4.2">
      <metaDataId>122</metaDataId>
      <name>Merge Visit A49</name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>true</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <host>http://localhost/beacore/visits/merge/${incorrectVisitNumber}/${newVisitNumber}</host>
        <useProxyServer>false</useProxyServer>
        <proxyAddress></proxyAddress>
        <proxyPort></proxyPort>
        <method>put</method>
        <headers class="linked-hash-map">
          <entry>
            <string>Authorization</string>
            <list>
              <string>Bearer ${accessToken}</string>
            </list>
          </entry>
          <entry>
            <string>Content-Type</string>
            <list>
              <string>application/json</string>
            </list>
          </entry>
        </headers>
        <parameters class="linked-hash-map"/>
        <responseXmlBody>false</responseXmlBody>
        <responseParseMultipart>true</responseParseMultipart>
        <responseIncludeMetadata>false</responseIncludeMetadata>
        <responseBinaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</responseBinaryMimeTypes>
        <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
        <multipart>false</multipart>
        <useAuthentication>false</useAuthentication>
        <authenticationType>Basic</authenticationType>
        <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
        <username></username>
        <password></password>
        <content>${message.transformedData}</content>
        <contentType>application/json</contentType>
        <dataTypeBinary>false</dataTypeBinary>
        <charset>UTF-8</charset>
        <socketTimeout>30000</socketTimeout>
      </properties>
      <transformer version="3.4.2">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>visit</name>
            <script>tmp[&apos;visit&apos;][&apos;patientId&apos;]= $(&apos;patient_id&apos;)
tmp[&apos;visit&apos;][&apos;visitDescription&apos;]=  msg[&apos;VISIT&apos;][&apos;visit_description&apos;]
tmp[&apos;visit&apos;][&apos;patientClass&apos;]=      msg[&apos;VISIT&apos;][&apos;patient_class&apos;]
tmp[&apos;visit&apos;][&apos;admissionType&apos;] =    msg[&apos;VISIT&apos;][&apos;admission_type&apos;]
tmp[&apos;visit&apos;][&apos;preadmitNumber&apos;]=    msg[&apos;VISIT&apos;][&apos;preadmit_number&apos;]
tmp[&apos;visit&apos;][&apos;admitNumber&apos;]=       msg[&apos;VISIT&apos;][&apos;admit_number&apos;]

tmp[&apos;visit&apos;][&apos;attendingDoctor&apos;]=     msg[&apos;VISIT&apos;][&apos;attending_doctor_external_id&apos;]
tmp[&apos;visit&apos;][&apos;referringDoctor&apos;]=     msg[&apos;VISIT&apos;][&apos;referring_doctor_external_id&apos;]
tmp[&apos;visit&apos;][&apos;consultingDoctor&apos;] =   msg[&apos;VISIT&apos;][&apos;consulting_doctor_external_id&apos;]
tmp[&apos;visit&apos;][&apos;admittingDoctor&apos;] =    msg[&apos;VISIT&apos;][&apos;admitting_doctor_external_id&apos;]

tmp[&apos;visit&apos;][&apos;hospitalService&apos;] =    msg[&apos;VISIT&apos;][&apos;hospital_service&apos;]
tmp[&apos;visit&apos;][&apos;admitSource&apos;]=         msg[&apos;VISIT&apos;][&apos;admit_source&apos;]

tmp[&apos;visit&apos;][&apos;ambulatoryStatus&apos;] =   msg[&apos;VISIT&apos;][&apos;ambulatory_status&apos;]

tmp[&apos;visit&apos;][&apos;medicalCareProtocolCode&apos;] =        msg[&apos;VISIT&apos;][&apos;medical_care_protocol_description&apos;]
tmp[&apos;visit&apos;][&apos;medicalCareProtocolDescription&apos;]=  msg[&apos;VISIT&apos;][&apos;medical_care_protocol_description&apos;]

tmp[&apos;visit&apos;][&apos;vipIndicator&apos;]= msg[&apos;VISIT&apos;][&apos;vip_indicator&apos;]

tmp[&apos;visit&apos;][&apos;expectedAdmitDatetime&apos;] =     msg[&apos;VISIT&apos;][&apos;expected_admit_datetime&apos;]
tmp[&apos;visit&apos;][&apos;admitDatetime&apos;]=              msg[&apos;VISIT&apos;][&apos;admit_datetime&apos;]
tmp[&apos;visit&apos;][&apos;expectedDischargeDatetime&apos;]=  msg[&apos;VISIT&apos;][&apos;expected_discharge_datetime&apos;]
tmp[&apos;visit&apos;][&apos;dischargeDatetime&apos;]  =        msg[&apos;VISIT&apos;][&apos;discharge_datetime&apos;]


/*
mapping_visit = {
	   
	        &quot;patient_class&quot;:  	 	msg[&apos;PV1&apos;][&apos;PV1.2&apos;][&apos;PV1.2.1&apos;].toString(),
	        &quot;admission_type&quot;: 		msg[&apos;PV1&apos;][&apos;PV1.4&apos;][&apos;PV1.4.1&apos;].toString() ,
	        &quot;preadmit_number&quot;: 		msg[&apos;PV1&apos;][&apos;PV1.5&apos;][&apos;PV1.5.1&apos;].toString() ,
	        &quot;visit_number&quot;: 			msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;].toString(),
	        &quot;visit_description&quot;: &quot; &quot;,
	        
	        &quot;attending_doctor_external_id&quot;: 		 msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.1&apos;].toString(),
	        &quot;referring_doctor_external_id&quot;:  		 msg[&apos;PV1&apos;][&apos;PV1.8&apos;][&apos;PV1.8.1&apos;].toString(),
	        &quot;consulting_doctor_external_id&quot;:  		 msg[&apos;PV1&apos;][&apos;PV1.9&apos;][&apos;PV1.9.1&apos;].toString(),
	        &quot;admitting_doctor_external_id&quot;: 		 msg[&apos;PV1&apos;][&apos;PV1.17&apos;][&apos;PV1.17.1&apos;].toString(),
	        
	        &quot;hospital_service&quot;:  		msg[&apos;PV1&apos;][&apos;PV1.10&apos;][&apos;PV1.10.1&apos;].toString(),
	        &quot;admit_source&quot;:		     msg[&apos;PV1&apos;][&apos;PV1.14&apos;][&apos;PV1.14.1&apos;].toString(),
	        
	        &quot;ambulatory_status&quot;: 		msg[&apos;PV1&apos;][&apos;PV1.15&apos;][&apos;PV1.15.1&apos;].toString(),
	        &quot;medical_care_protocol_code&quot;: null,
	        &quot;medical_care_protocol_description&quot;: null,
	        
	        &quot;vip_indicator&quot;:     		msg[&apos;PV1&apos;][&apos;PV1.16&apos;][&apos;PV1.16.1&apos;].toString(),
	        
	        &quot;expected_admit_datetime&quot;:		 	dateParser(msg[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString()),
	        &quot;admit_datetime&quot;: 				dateParser(msg[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString()),
	        &quot;expected_discharge_datetime&quot;:		dateParser(msg[&apos;PV1&apos;][&apos;PV1.45&apos;][&apos;PV1.45.1&apos;].toString()),
	        &quot;discharge_datetime&quot;: 			dateParser(msg[&apos;PV1&apos;][&apos;PV1.45&apos;][&apos;PV1.45.1&apos;].toString())
	    }

	    */</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>tmp[&apos;visit&apos;][&apos;patientId&apos;]= $(&apos;patient_id&apos;)
tmp[&apos;visit&apos;][&apos;visitDescription&apos;]=  msg[&apos;VISIT&apos;][&apos;visit_description&apos;]
tmp[&apos;visit&apos;][&apos;patientClass&apos;]=      msg[&apos;VISIT&apos;][&apos;patient_class&apos;]
tmp[&apos;visit&apos;][&apos;admissionType&apos;] =    msg[&apos;VISIT&apos;][&apos;admission_type&apos;]
tmp[&apos;visit&apos;][&apos;preadmitNumber&apos;]=    msg[&apos;VISIT&apos;][&apos;preadmit_number&apos;]
tmp[&apos;visit&apos;][&apos;admitNumber&apos;]=       msg[&apos;VISIT&apos;][&apos;admit_number&apos;]

tmp[&apos;visit&apos;][&apos;attendingDoctor&apos;]=     msg[&apos;VISIT&apos;][&apos;attending_doctor_external_id&apos;]
tmp[&apos;visit&apos;][&apos;referringDoctor&apos;]=     msg[&apos;VISIT&apos;][&apos;referring_doctor_external_id&apos;]
tmp[&apos;visit&apos;][&apos;consultingDoctor&apos;] =   msg[&apos;VISIT&apos;][&apos;consulting_doctor_external_id&apos;]
tmp[&apos;visit&apos;][&apos;admittingDoctor&apos;] =    msg[&apos;VISIT&apos;][&apos;admitting_doctor_external_id&apos;]

tmp[&apos;visit&apos;][&apos;hospitalService&apos;] =    msg[&apos;VISIT&apos;][&apos;hospital_service&apos;]
tmp[&apos;visit&apos;][&apos;admitSource&apos;]=         msg[&apos;VISIT&apos;][&apos;admit_source&apos;]

tmp[&apos;visit&apos;][&apos;ambulatoryStatus&apos;] =   msg[&apos;VISIT&apos;][&apos;ambulatory_status&apos;]

tmp[&apos;visit&apos;][&apos;medicalCareProtocolCode&apos;] =        msg[&apos;VISIT&apos;][&apos;medical_care_protocol_description&apos;]
tmp[&apos;visit&apos;][&apos;medicalCareProtocolDescription&apos;]=  msg[&apos;VISIT&apos;][&apos;medical_care_protocol_description&apos;]

tmp[&apos;visit&apos;][&apos;vipIndicator&apos;]= msg[&apos;VISIT&apos;][&apos;vip_indicator&apos;]

tmp[&apos;visit&apos;][&apos;expectedAdmitDatetime&apos;] =     msg[&apos;VISIT&apos;][&apos;expected_admit_datetime&apos;]
tmp[&apos;visit&apos;][&apos;admitDatetime&apos;]=              msg[&apos;VISIT&apos;][&apos;admit_datetime&apos;]
tmp[&apos;visit&apos;][&apos;expectedDischargeDatetime&apos;]=  msg[&apos;VISIT&apos;][&apos;expected_discharge_datetime&apos;]
tmp[&apos;visit&apos;][&apos;dischargeDatetime&apos;]  =        msg[&apos;VISIT&apos;][&apos;discharge_datetime&apos;]


/*
mapping_visit = {
	   
	        &quot;patient_class&quot;:  	 	msg[&apos;PV1&apos;][&apos;PV1.2&apos;][&apos;PV1.2.1&apos;].toString(),
	        &quot;admission_type&quot;: 		msg[&apos;PV1&apos;][&apos;PV1.4&apos;][&apos;PV1.4.1&apos;].toString() ,
	        &quot;preadmit_number&quot;: 		msg[&apos;PV1&apos;][&apos;PV1.5&apos;][&apos;PV1.5.1&apos;].toString() ,
	        &quot;visit_number&quot;: 			msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;].toString(),
	        &quot;visit_description&quot;: &quot; &quot;,
	        
	        &quot;attending_doctor_external_id&quot;: 		 msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.1&apos;].toString(),
	        &quot;referring_doctor_external_id&quot;:  		 msg[&apos;PV1&apos;][&apos;PV1.8&apos;][&apos;PV1.8.1&apos;].toString(),
	        &quot;consulting_doctor_external_id&quot;:  		 msg[&apos;PV1&apos;][&apos;PV1.9&apos;][&apos;PV1.9.1&apos;].toString(),
	        &quot;admitting_doctor_external_id&quot;: 		 msg[&apos;PV1&apos;][&apos;PV1.17&apos;][&apos;PV1.17.1&apos;].toString(),
	        
	        &quot;hospital_service&quot;:  		msg[&apos;PV1&apos;][&apos;PV1.10&apos;][&apos;PV1.10.1&apos;].toString(),
	        &quot;admit_source&quot;:		     msg[&apos;PV1&apos;][&apos;PV1.14&apos;][&apos;PV1.14.1&apos;].toString(),
	        
	        &quot;ambulatory_status&quot;: 		msg[&apos;PV1&apos;][&apos;PV1.15&apos;][&apos;PV1.15.1&apos;].toString(),
	        &quot;medical_care_protocol_code&quot;: null,
	        &quot;medical_care_protocol_description&quot;: null,
	        
	        &quot;vip_indicator&quot;:     		msg[&apos;PV1&apos;][&apos;PV1.16&apos;][&apos;PV1.16.1&apos;].toString(),
	        
	        &quot;expected_admit_datetime&quot;:		 	dateParser(msg[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString()),
	        &quot;admit_datetime&quot;: 				dateParser(msg[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString()),
	        &quot;expected_discharge_datetime&quot;:		dateParser(msg[&apos;PV1&apos;][&apos;PV1.45&apos;][&apos;PV1.45.1&apos;].toString()),
	        &quot;discharge_datetime&quot;: 			dateParser(msg[&apos;PV1&apos;][&apos;PV1.45&apos;][&apos;PV1.45.1&apos;].toString())
	    }

	    */</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64">ew0KICAiTVNIIiA6IHsNCiAgICAic2VuZGluZ0FwcGxpY2F0aW9uX25hbWVzcGFjZUlkIiA6ICJY
UExPUkUiLA0KICAgICJzZW5kaW5nRmFjaWxpdHlfbmFtZXNwYWNlSWQiIDogIlhQTE9SRSIsDQog
ICAgImRhdGVPclRpbWVPZk1lc3NhZ2VfdGltZU9mQW5FdmVudCIgOiAiMjAyMC0xMi0yOCAwNzo0
OTowMCIsDQogICAgIm1lc3NhZ2VUeXBlIiA6ICJTSVUiLA0KICAgICJtZXNzYWdlVHlwZV90cmln
Z2VyRXZlbnQiIDogIlMxMiIsDQogICAgIm1lc3NhZ2VDb250cm9sSWRfdmFsdWUiIDogIkExMDI3
MDU2ODUwMjA3NDg0MyIsDQogICAgImFjY2VwdEFja25vd2xlZGdtZW50VHlwZV92YWx1ZSIgOiAi
IiwNCiAgICAiYXBwbGljYXRpb25BY2tub3dsZWRnbWVudFR5cGVfdmFsdWUiIDogIiIsDQogICAg
InNlcXVlbmNlTnVtYmVyX3ZhbHVlIiA6IDAsDQogICAgImNvZGVTaXRlIiA6ICJDRUQiDQogIH0s
DQogICJQQVRJRU5UIiA6IHsNCiAgICAiaGw3X2lkZW50aWZpZXIiIDogIlhDMDAwMDAyNzE5NSIs
DQogICAgImlkZW50aWZpZXJMaXN0IiA6IFsNCiAgICAgIHsNCiAgICAgICAgImlkIiA6ICJYQzAw
MDAwMjcxOTUiLA0KICAgICAgICAiYXNzaWduaW5nX2F1dGhvcml0eV9uYW1lc3BhY2VfaWQiIDog
IkVETCIsDQogICAgICAgICJ0eXBlX2NvZGVfaWQiIDogIlBJIg0KICAgICAgfQ0KICAgIF0sDQog
ICAgImxhc3RfbmFtZSIgOiAiR1VZT04iLA0KICAgICJmaXJzdF9uYW1lIiA6ICJKRUFOIE1JQ0hF
TCIsDQogICAgImJpcnRoZGF0ZSIgOiAiMTk2NS0wMy0wOSIsDQogICAgInNleCIgOiAiTSIsDQog
ICAgInN0cmVldF9hZGRyZXNzIiA6ICIzIFJVRSBUUlVHVUVUICIsDQogICAgImNpdHkiIDogIlRP
VUxPTiIsDQogICAgInN0YXRlIiA6ICIiLA0KICAgICJ6aXBfY29kZSIgOiAiODMwMDAiLA0KICAg
ICJwcml2YXRlX3Bob25lX251bWJlciIgOiAiMDQ5NDkzNDIwNiIsDQogICAgImJ1c2luZXNzX3Bo
b25lX251bWJlciIgOiAiIiwNCiAgICAibWFpbCIgOiAiIg0KICB9LA0KICAiTUVSR0UiIDogbnVs
bCwNCiAgIlZJU0lUIjogewoJICAgICAgICAicGF0aWVudF9jbGFzcyI6ICAJIAludWxsLAoJICAg
ICAgICAiYWRtaXNzaW9uX3R5cGUiOiAJCW51bGwgLAoJICAgICAgICAicHJlYWRtaXRfbnVtYmVy
IjogCQludWxsICwKCSAgICAgICAgImFkbWl0X251bWJlciI6IAkJbnVsbCwKCSAgICAgICAgInZp
c2l0X2Rlc2NyaXB0aW9uIjogICAgbnVsbCwKCSAgICAgICAgImF0dGVuZGluZ19kb2N0b3JfZXh0
ZXJuYWxfaWQiOiAJCW51bGwsCgkgICAgICAgICJyZWZlcnJpbmdfZG9jdG9yX2V4dGVybmFsX2lk
IjogIAkJbnVsbCwKCSAgICAgICAgImNvbnN1bHRpbmdfZG9jdG9yX2V4dGVybmFsX2lkIjogIAkJ
bnVsbCwKCSAgICAgICAgImFkbWl0dGluZ19kb2N0b3JfZXh0ZXJuYWxfaWQiOiAJCW51bGwsCgkg
ICAgICAgICJob3NwaXRhbF9zZXJ2aWNlIjogIAkJICAgCQkJbnVsbCwKCSAgICAgICAgImFkbWl0
X3NvdXJjZSI6CQkgICAgICAgICAgICAJCW51bGwsCgkgICAgICAgICJhbWJ1bGF0b3J5X3N0YXR1
cyI6IAkJCQkJbnVsbCwKCSAgICAgICAgIm1lZGljYWxfY2FyZV9wcm90b2NvbF9jb2RlIjogCQkJ
bnVsbCwKCSAgICAgICAgIm1lZGljYWxfY2FyZV9wcm90b2NvbF9kZXNjcmlwdGlvbiI6IAludWxs
LAoJICAgICAgICAidmlwX2luZGljYXRvciI6ICAgICAJCQkJIAludWxsLAoJICAgICAgICAiZXhw
ZWN0ZWRfYWRtaXRfZGF0ZXRpbWUiOgkJIAkgCW51bGwsCgkgICAgICAgICJhZG1pdF9kYXRldGlt
ZSI6IAkJCQkJIAludWxsLAoJICAgICAgICAiZXhwZWN0ZWRfZGlzY2hhcmdlX2RhdGV0aW1lIjoJ
CSAJbnVsbCwKCSAgICAgICAgImRpc2NoYXJnZV9kYXRldGltZSI6IAkJCSAgICAgCW51bGwKCX0s
CiAgIklOU1VSQU5DRSIgOiB7DQogICAgImluc3VyYW5jZV90eXBlIiA6ICJBTU8iLA0KICAgICJu
aXIiIDogIjE2NTAzOTkzNDEwODIyNyIsDQogICAgImFtb19jb2RlX3JlZ2ltZV9jYWlzc2VfY2Vu
dHJlIiA6IG51bGwsDQogICAgImFtb19kcm9pdF9kZWJ1dCIgOiBudWxsLA0KICAgICJhbW9fZHJv
aXRfZmluIiA6IG51bGwNCiAgfSwNCiAgIlJFRkVSUklOR19ET0NUT1IiIDogIiIsDQogICJTVFVE
SUVTIiA6IFsNCiAgICB7DQogICAgICAiYXBwb2ludG1lbnRfbnVtYmVyIiA6ICJBMTAyNzA1Njg1
MDAiLA0KICAgICAgImFjY2Vzc2lvbl9udW1iZXIiIDogIkExMDI3MDU2ODUwMCIsDQogICAgICAi
aW5zdGFuY2VfdWlkIiA6ICJBMTAyNzA1Njg1MDBfMCIsDQogICAgICAibG9jYXRpb25fY29kZSIg
OiAiUkFEVVJDIiwNCiAgICAgICJsb2NhdGlvbl9sYWJlbCIgOiAiUkFESU8gVVJHRU5DRVMgQ0VE
UkVTIiwNCiAgICAgICJsb2NhdGlvbl90eXBlX2NvZGUiIDogIk5PVF9VU0VEIiwNCiAgICAgICJs
b2NhdGlvbl90aWNrZXRfbWVzc2FnZSIgOiBudWxsLA0KICAgICAgImxvY2F0aW9uX3BhcGVyX21l
c3NhZ2UiIDogbnVsbCwNCiAgICAgICJzdHVkeV9zdGF0dXNfY29kZSIgOiAiU0NIRURVTEVEIiwN
CiAgICAgICJzdHVkeV90eXBlX2NvZGUiIDogIlJBRFVSQ19SUE9VTSIsDQogICAgICAic2hpZnRf
Y29kZSIgOiAiUkFEVVJDIiwNCiAgICAgICJzdHVkeV9hbHRlcm5hdGl2ZV90eXBlX2NvZGUiIDog
bnVsbCwNCiAgICAgICJzdHVkeV90eXBlX3RleHQiIDogIlBPVU1PTlMgMTAiLA0KICAgICAgInNj
aGVkdWxlZF9kYXRldGltZSIgOiAiMjAyMC0xMi0yOCAxMDoxMDowMCIsDQogICAgICAibW9kYWxp
dHlfY29kZSIgOiAiUkEiLA0KICAgICAgIm1vZGFsaXR5X3RleHQiIDogIlJBRElPIFRIT1JBQ0lR
VUUgLyBBU1AiLA0KICAgICAgIm9yaWdpbiIgOiAiR0VSSSIsDQogICAgICAiZHVyYXRpb24iIDog
IjIwIg0KICAgIH0NCiAgXSwNCiAgIkRPQ1VNRU5UUyIgOiBbIF0sDQogICJNRVJHRV9WSVNJVCIg
OiAiIiwNCiAgIm5leHRTdGVwIiA6IG51bGwNCn0=</inboundTemplate>
        <outboundTemplate encoding="base64">ewogICAgInZpc2l0Ijp7CiAgICAgICAgInZpc2l0RGVzY3JpcHRpb24iOiAiIiwKICAgICAgICAi
cGF0aWVudElkIjogbnVsbCwKICAgICAgICAicGF0aWVudENsYXNzIjogIkkiLAogICAgICAgICJh
ZG1pc3Npb25UeXBlIjogIiIsCiAgICAgICAgInByZWFkbWl0TnVtYmVyIjogIiIsCiAgICAgICAg
ImFkbWl0TnVtYmVyIjogIiIsCiAgICAgICAgImF0dGVuZGluZ0RvY3RvciI6IG51bGwsCiAgICAg
ICAgInJlZmVycmluZ0RvY3RvciI6IG51bGwsCiAgICAgICAgImNvbnN1bHRpbmdEb2N0b3IiOiBu
dWxsLAogICAgICAgICJhZG1pdHRpbmdEb2N0b3IiOiBudWxsLAogICAgICAgICJob3NwaXRhbFNl
cnZpY2UiOiBudWxsLAogICAgICAgICJhZG1pdFNvdXJjZSI6IG51bGwsCiAgICAgICAgImFtYnVs
YXRvcnlTdGF0dXMiOiBudWxsLAogICAgICAgICJtZWRpY2FsQ2FyZVByb3RvY29sQ29kZSI6IG51
bGwsCiAgICAgICAgIm1lZGljYWxDYXJlUHJvdG9jb2xEZXNjcmlwdGlvbiI6IG51bGwsCiAgICAg
ICAgInZpcEluZGljYXRvciI6IG51bGwsCiAgICAgICAgImV4cGVjdGVkQWRtaXREYXRldGltZSI6
ICIiLAogICAgICAgICJhZG1pdERhdGV0aW1lIjogIiIsCiAgICAgICAgImV4cGVjdGVkRGlzY2hh
cmdlRGF0ZXRpbWUiOiAiIiwKICAgICAgICAiZGlzY2hhcmdlRGF0ZXRpbWUiOiAiIgogICAgfQp9
Cg==</outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>analyse retour upsert visite</name>
            <script>var responseStatusLine = $(&apos;responseStatusLine&apos;);
var responseStatusCode = parseInt(responseStatusLine.split(&apos; &apos;)[1], 10);

var  result = null 
var visitIdFound = null

try {
	
       result = checkResponse( &apos;PARSE&apos; ,&apos;Merge  Visit&apos;, &apos;http://localhost/beacore/visits/merge&apos;,&apos;PUT&apos;,responseStatusCode, msg)
      if ( result != &apos;not_found&apos; &amp;&amp;  msg[&apos;id&apos;] ) {
       		 visitIdFound = new java.lang.Integer(  msg[&apos;id&apos;]);
    		}
    		 
} catch (e) {
    logger.error(e);
}

channelMap.put(&apos;visit_id&apos;,visitIdFound );
channelMap.put (&apos;result&apos;, result);</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>var responseStatusLine = $(&apos;responseStatusLine&apos;);
var responseStatusCode = parseInt(responseStatusLine.split(&apos; &apos;)[1], 10);

var  result = null 
var visitIdFound = null

try {
	
       result = checkResponse( &apos;PARSE&apos; ,&apos;Merge  Visit&apos;, &apos;http://localhost/beacore/visits/merge&apos;,&apos;PUT&apos;,responseStatusCode, msg)
      if ( result != &apos;not_found&apos; &amp;&amp;  msg[&apos;id&apos;] ) {
       		 visitIdFound = new java.lang.Integer(  msg[&apos;id&apos;]);
    		}
    		 
} catch (e) {
    logger.error(e);
}

channelMap.put(&apos;visit_id&apos;,visitIdFound );
channelMap.put (&apos;result&apos;, result);</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64">ew0KICAiZXJyIiA6ICJBdCBsZWFzdCBvbmUgcGFyYW1ldGVyIG11c3QgYmUgZmlsbGVkIg0KfQ==
</inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Accept message if &quot;$(&apos;messageHeader&apos;).messageType&quot; equals &apos;ADT&apos;</name>
            <data>
              <entry>
                <string>Field</string>
                <string>$(&apos;messageHeader&apos;).messageType</string>
              </entry>
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>1</string>
              </entry>
              <entry>
                <string>Values</string>
                <list>
                  <string>&apos;ADT&apos;</string>
                </list>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if($(&apos;messageHeader&apos;).messageType == &apos;ADT&apos;) {
	return true;
}
return false;</script>
            <operator>NONE</operator>
          </rule>
          <rule>
            <sequenceNumber>1</sequenceNumber>
            <name>Accept message if &quot;MSH - messageType_triggerEvent&quot; equals &apos;A49&apos;</name>
            <data>
              <entry>
                <string>Field</string>
                <string>msg[&apos;MSH&apos;][&apos;messageType_triggerEvent&apos;]</string>
              </entry>
              <entry>
                <string>Name</string>
                <string>MSH - messageType_triggerEvent</string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string>msg[&apos;MSH&apos;][&apos;messageType_triggerEvent&apos;]</string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>1</string>
              </entry>
              <entry>
                <string>Values</string>
                <list>
                  <string>&apos;A49&apos;</string>
                </list>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if(msg[&apos;MSH&apos;][&apos;messageType_triggerEvent&apos;] == &apos;A49&apos;) {
	return true;
}
return false;</script>
            <operator>AND</operator>
          </rule>
          <rule>
            <sequenceNumber>2</sequenceNumber>
            <name>Accept message if &quot;$(&apos;incorrectVisitNumber&apos;)&quot; does not equal &apos;&apos; or null</name>
            <data>
              <entry>
                <string>Field</string>
                <string>$(&apos;incorrectVisitNumber&apos;)</string>
              </entry>
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>0</string>
              </entry>
              <entry>
                <string>Values</string>
                <list>
                  <string>&apos;&apos;</string>
                  <string>null</string>
                </list>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if($(&apos;incorrectVisitNumber&apos;) != &apos;&apos; &amp;&amp; $(&apos;incorrectVisitNumber&apos;) != null) {
	return true;
}
return false;</script>
            <operator>AND</operator>
          </rule>
          <rule>
            <sequenceNumber>3</sequenceNumber>
            <name>Accept message if &quot;$(&apos;newVisitNumber&apos;)&quot; does not equal &apos;&apos; or null</name>
            <data>
              <entry>
                <string>Field</string>
                <string>$(&apos;newVisitNumber&apos;)</string>
              </entry>
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>0</string>
              </entry>
              <entry>
                <string>Values</string>
                <list>
                  <string>&apos;&apos;</string>
                  <string>null</string>
                </list>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if($(&apos;newVisitNumber&apos;) != &apos;&apos; &amp;&amp; $(&apos;newVisitNumber&apos;) != null) {
	return true;
}
return false;</script>
            <operator>AND</operator>
          </rule>
        </rules>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.4.2">
      <metaDataId>121</metaDataId>
      <name>Upsert Visit</name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>true</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <host>http://localhost/beacore/visits/upsert</host>
        <useProxyServer>false</useProxyServer>
        <proxyAddress></proxyAddress>
        <proxyPort></proxyPort>
        <method>post</method>
        <headers class="linked-hash-map">
          <entry>
            <string>Authorization</string>
            <list>
              <string>Bearer ${accessToken}</string>
            </list>
          </entry>
          <entry>
            <string>Content-Type</string>
            <list>
              <string>application/json</string>
            </list>
          </entry>
        </headers>
        <parameters class="linked-hash-map"/>
        <responseXmlBody>false</responseXmlBody>
        <responseParseMultipart>true</responseParseMultipart>
        <responseIncludeMetadata>false</responseIncludeMetadata>
        <responseBinaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</responseBinaryMimeTypes>
        <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
        <multipart>false</multipart>
        <useAuthentication>false</useAuthentication>
        <authenticationType>Basic</authenticationType>
        <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
        <username></username>
        <password></password>
        <content>${message.transformedData}</content>
        <contentType>application/json</contentType>
        <dataTypeBinary>false</dataTypeBinary>
        <charset>UTF-8</charset>
        <socketTimeout>30000</socketTimeout>
      </properties>
      <transformer version="3.4.2">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>visit</name>
            <script>tmp[&apos;visit&apos;][&apos;patientId&apos;]= $(&apos;patient_id&apos;)
tmp[&apos;visit&apos;][&apos;visitDescription&apos;]=  msg[&apos;VISIT&apos;][&apos;visit_description&apos;]
tmp[&apos;visit&apos;][&apos;patientClass&apos;]=      msg[&apos;VISIT&apos;][&apos;patient_class&apos;]
tmp[&apos;visit&apos;][&apos;admissionType&apos;] =    msg[&apos;VISIT&apos;][&apos;admission_type&apos;]
tmp[&apos;visit&apos;][&apos;preadmitNumber&apos;]=    msg[&apos;VISIT&apos;][&apos;preadmit_number&apos;]
tmp[&apos;visit&apos;][&apos;admitNumber&apos;]=       msg[&apos;VISIT&apos;][&apos;admit_number&apos;]

tmp[&apos;visit&apos;][&apos;attendingDoctor&apos;]=     msg[&apos;VISIT&apos;][&apos;attending_doctor_external_id&apos;]
tmp[&apos;visit&apos;][&apos;referringDoctor&apos;]=     msg[&apos;VISIT&apos;][&apos;referring_doctor_external_id&apos;]
tmp[&apos;visit&apos;][&apos;consultingDoctor&apos;] =   msg[&apos;VISIT&apos;][&apos;consulting_doctor_external_id&apos;]
tmp[&apos;visit&apos;][&apos;admittingDoctor&apos;] =    msg[&apos;VISIT&apos;][&apos;admitting_doctor_external_id&apos;]

tmp[&apos;visit&apos;][&apos;hospitalService&apos;] =    msg[&apos;VISIT&apos;][&apos;hospital_service&apos;]
tmp[&apos;visit&apos;][&apos;admitSource&apos;]=         msg[&apos;VISIT&apos;][&apos;admit_source&apos;]

tmp[&apos;visit&apos;][&apos;ambulatoryStatus&apos;] =   msg[&apos;VISIT&apos;][&apos;ambulatory_status&apos;]

tmp[&apos;visit&apos;][&apos;medicalCareProtocolCode&apos;] =        msg[&apos;VISIT&apos;][&apos;medical_care_protocol_description&apos;]
tmp[&apos;visit&apos;][&apos;medicalCareProtocolDescription&apos;]=  msg[&apos;VISIT&apos;][&apos;medical_care_protocol_description&apos;]

tmp[&apos;visit&apos;][&apos;vipIndicator&apos;]= msg[&apos;VISIT&apos;][&apos;vip_indicator&apos;]

tmp[&apos;visit&apos;][&apos;expectedAdmitDatetime&apos;] =     msg[&apos;VISIT&apos;][&apos;expected_admit_datetime&apos;]
tmp[&apos;visit&apos;][&apos;admitDatetime&apos;]=              msg[&apos;VISIT&apos;][&apos;admit_datetime&apos;]
tmp[&apos;visit&apos;][&apos;expectedDischargeDatetime&apos;]=  msg[&apos;VISIT&apos;][&apos;expected_discharge_datetime&apos;]
tmp[&apos;visit&apos;][&apos;dischargeDatetime&apos;]  =        msg[&apos;VISIT&apos;][&apos;discharge_datetime&apos;]


/*
mapping_visit = {
	   
	        &quot;patient_class&quot;:  	 	msg[&apos;PV1&apos;][&apos;PV1.2&apos;][&apos;PV1.2.1&apos;].toString(),
	        &quot;admission_type&quot;: 		msg[&apos;PV1&apos;][&apos;PV1.4&apos;][&apos;PV1.4.1&apos;].toString() ,
	        &quot;preadmit_number&quot;: 		msg[&apos;PV1&apos;][&apos;PV1.5&apos;][&apos;PV1.5.1&apos;].toString() ,
	        &quot;visit_number&quot;: 			msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;].toString(),
	        &quot;visit_description&quot;: &quot; &quot;,
	        
	        &quot;attending_doctor_external_id&quot;: 		 msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.1&apos;].toString(),
	        &quot;referring_doctor_external_id&quot;:  		 msg[&apos;PV1&apos;][&apos;PV1.8&apos;][&apos;PV1.8.1&apos;].toString(),
	        &quot;consulting_doctor_external_id&quot;:  		 msg[&apos;PV1&apos;][&apos;PV1.9&apos;][&apos;PV1.9.1&apos;].toString(),
	        &quot;admitting_doctor_external_id&quot;: 		 msg[&apos;PV1&apos;][&apos;PV1.17&apos;][&apos;PV1.17.1&apos;].toString(),
	        
	        &quot;hospital_service&quot;:  		msg[&apos;PV1&apos;][&apos;PV1.10&apos;][&apos;PV1.10.1&apos;].toString(),
	        &quot;admit_source&quot;:		     msg[&apos;PV1&apos;][&apos;PV1.14&apos;][&apos;PV1.14.1&apos;].toString(),
	        
	        &quot;ambulatory_status&quot;: 		msg[&apos;PV1&apos;][&apos;PV1.15&apos;][&apos;PV1.15.1&apos;].toString(),
	        &quot;medical_care_protocol_code&quot;: null,
	        &quot;medical_care_protocol_description&quot;: null,
	        
	        &quot;vip_indicator&quot;:     		msg[&apos;PV1&apos;][&apos;PV1.16&apos;][&apos;PV1.16.1&apos;].toString(),
	        
	        &quot;expected_admit_datetime&quot;:		 	dateParser(msg[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString()),
	        &quot;admit_datetime&quot;: 				dateParser(msg[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString()),
	        &quot;expected_discharge_datetime&quot;:		dateParser(msg[&apos;PV1&apos;][&apos;PV1.45&apos;][&apos;PV1.45.1&apos;].toString()),
	        &quot;discharge_datetime&quot;: 			dateParser(msg[&apos;PV1&apos;][&apos;PV1.45&apos;][&apos;PV1.45.1&apos;].toString())
	    }

	    */</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>tmp[&apos;visit&apos;][&apos;patientId&apos;]= $(&apos;patient_id&apos;)
tmp[&apos;visit&apos;][&apos;visitDescription&apos;]=  msg[&apos;VISIT&apos;][&apos;visit_description&apos;]
tmp[&apos;visit&apos;][&apos;patientClass&apos;]=      msg[&apos;VISIT&apos;][&apos;patient_class&apos;]
tmp[&apos;visit&apos;][&apos;admissionType&apos;] =    msg[&apos;VISIT&apos;][&apos;admission_type&apos;]
tmp[&apos;visit&apos;][&apos;preadmitNumber&apos;]=    msg[&apos;VISIT&apos;][&apos;preadmit_number&apos;]
tmp[&apos;visit&apos;][&apos;admitNumber&apos;]=       msg[&apos;VISIT&apos;][&apos;admit_number&apos;]

tmp[&apos;visit&apos;][&apos;attendingDoctor&apos;]=     msg[&apos;VISIT&apos;][&apos;attending_doctor_external_id&apos;]
tmp[&apos;visit&apos;][&apos;referringDoctor&apos;]=     msg[&apos;VISIT&apos;][&apos;referring_doctor_external_id&apos;]
tmp[&apos;visit&apos;][&apos;consultingDoctor&apos;] =   msg[&apos;VISIT&apos;][&apos;consulting_doctor_external_id&apos;]
tmp[&apos;visit&apos;][&apos;admittingDoctor&apos;] =    msg[&apos;VISIT&apos;][&apos;admitting_doctor_external_id&apos;]

tmp[&apos;visit&apos;][&apos;hospitalService&apos;] =    msg[&apos;VISIT&apos;][&apos;hospital_service&apos;]
tmp[&apos;visit&apos;][&apos;admitSource&apos;]=         msg[&apos;VISIT&apos;][&apos;admit_source&apos;]

tmp[&apos;visit&apos;][&apos;ambulatoryStatus&apos;] =   msg[&apos;VISIT&apos;][&apos;ambulatory_status&apos;]

tmp[&apos;visit&apos;][&apos;medicalCareProtocolCode&apos;] =        msg[&apos;VISIT&apos;][&apos;medical_care_protocol_description&apos;]
tmp[&apos;visit&apos;][&apos;medicalCareProtocolDescription&apos;]=  msg[&apos;VISIT&apos;][&apos;medical_care_protocol_description&apos;]

tmp[&apos;visit&apos;][&apos;vipIndicator&apos;]= msg[&apos;VISIT&apos;][&apos;vip_indicator&apos;]

tmp[&apos;visit&apos;][&apos;expectedAdmitDatetime&apos;] =     msg[&apos;VISIT&apos;][&apos;expected_admit_datetime&apos;]
tmp[&apos;visit&apos;][&apos;admitDatetime&apos;]=              msg[&apos;VISIT&apos;][&apos;admit_datetime&apos;]
tmp[&apos;visit&apos;][&apos;expectedDischargeDatetime&apos;]=  msg[&apos;VISIT&apos;][&apos;expected_discharge_datetime&apos;]
tmp[&apos;visit&apos;][&apos;dischargeDatetime&apos;]  =        msg[&apos;VISIT&apos;][&apos;discharge_datetime&apos;]


/*
mapping_visit = {
	   
	        &quot;patient_class&quot;:  	 	msg[&apos;PV1&apos;][&apos;PV1.2&apos;][&apos;PV1.2.1&apos;].toString(),
	        &quot;admission_type&quot;: 		msg[&apos;PV1&apos;][&apos;PV1.4&apos;][&apos;PV1.4.1&apos;].toString() ,
	        &quot;preadmit_number&quot;: 		msg[&apos;PV1&apos;][&apos;PV1.5&apos;][&apos;PV1.5.1&apos;].toString() ,
	        &quot;visit_number&quot;: 			msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;].toString(),
	        &quot;visit_description&quot;: &quot; &quot;,
	        
	        &quot;attending_doctor_external_id&quot;: 		 msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.1&apos;].toString(),
	        &quot;referring_doctor_external_id&quot;:  		 msg[&apos;PV1&apos;][&apos;PV1.8&apos;][&apos;PV1.8.1&apos;].toString(),
	        &quot;consulting_doctor_external_id&quot;:  		 msg[&apos;PV1&apos;][&apos;PV1.9&apos;][&apos;PV1.9.1&apos;].toString(),
	        &quot;admitting_doctor_external_id&quot;: 		 msg[&apos;PV1&apos;][&apos;PV1.17&apos;][&apos;PV1.17.1&apos;].toString(),
	        
	        &quot;hospital_service&quot;:  		msg[&apos;PV1&apos;][&apos;PV1.10&apos;][&apos;PV1.10.1&apos;].toString(),
	        &quot;admit_source&quot;:		     msg[&apos;PV1&apos;][&apos;PV1.14&apos;][&apos;PV1.14.1&apos;].toString(),
	        
	        &quot;ambulatory_status&quot;: 		msg[&apos;PV1&apos;][&apos;PV1.15&apos;][&apos;PV1.15.1&apos;].toString(),
	        &quot;medical_care_protocol_code&quot;: null,
	        &quot;medical_care_protocol_description&quot;: null,
	        
	        &quot;vip_indicator&quot;:     		msg[&apos;PV1&apos;][&apos;PV1.16&apos;][&apos;PV1.16.1&apos;].toString(),
	        
	        &quot;expected_admit_datetime&quot;:		 	dateParser(msg[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString()),
	        &quot;admit_datetime&quot;: 				dateParser(msg[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString()),
	        &quot;expected_discharge_datetime&quot;:		dateParser(msg[&apos;PV1&apos;][&apos;PV1.45&apos;][&apos;PV1.45.1&apos;].toString()),
	        &quot;discharge_datetime&quot;: 			dateParser(msg[&apos;PV1&apos;][&apos;PV1.45&apos;][&apos;PV1.45.1&apos;].toString())
	    }

	    */</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64">ew0KICAiTVNIIiA6IHsNCiAgICAic2VuZGluZ0FwcGxpY2F0aW9uX25hbWVzcGFjZUlkIiA6ICJY
UExPUkUiLA0KICAgICJzZW5kaW5nRmFjaWxpdHlfbmFtZXNwYWNlSWQiIDogIlhQTE9SRSIsDQog
ICAgImRhdGVPclRpbWVPZk1lc3NhZ2VfdGltZU9mQW5FdmVudCIgOiAiMjAyMC0xMi0yOCAwNzo0
OTowMCIsDQogICAgIm1lc3NhZ2VUeXBlIiA6ICJTSVUiLA0KICAgICJtZXNzYWdlVHlwZV90cmln
Z2VyRXZlbnQiIDogIlMxMiIsDQogICAgIm1lc3NhZ2VDb250cm9sSWRfdmFsdWUiIDogIkExMDI3
MDU2ODUwMjA3NDg0MyIsDQogICAgImFjY2VwdEFja25vd2xlZGdtZW50VHlwZV92YWx1ZSIgOiAi
IiwNCiAgICAiYXBwbGljYXRpb25BY2tub3dsZWRnbWVudFR5cGVfdmFsdWUiIDogIiIsDQogICAg
InNlcXVlbmNlTnVtYmVyX3ZhbHVlIiA6IDAsDQogICAgImNvZGVTaXRlIiA6ICJDRUQiDQogIH0s
DQogICJQQVRJRU5UIiA6IHsNCiAgICAiaGw3X2lkZW50aWZpZXIiIDogIlhDMDAwMDAyNzE5NSIs
DQogICAgImlkZW50aWZpZXJMaXN0IiA6IFsNCiAgICAgIHsNCiAgICAgICAgImlkIiA6ICJYQzAw
MDAwMjcxOTUiLA0KICAgICAgICAiYXNzaWduaW5nX2F1dGhvcml0eV9uYW1lc3BhY2VfaWQiIDog
IkVETCIsDQogICAgICAgICJ0eXBlX2NvZGVfaWQiIDogIlBJIg0KICAgICAgfQ0KICAgIF0sDQog
ICAgImxhc3RfbmFtZSIgOiAiR1VZT04iLA0KICAgICJmaXJzdF9uYW1lIiA6ICJKRUFOIE1JQ0hF
TCIsDQogICAgImJpcnRoZGF0ZSIgOiAiMTk2NS0wMy0wOSIsDQogICAgInNleCIgOiAiTSIsDQog
ICAgInN0cmVldF9hZGRyZXNzIiA6ICIzIFJVRSBUUlVHVUVUICIsDQogICAgImNpdHkiIDogIlRP
VUxPTiIsDQogICAgInN0YXRlIiA6ICIiLA0KICAgICJ6aXBfY29kZSIgOiAiODMwMDAiLA0KICAg
ICJwcml2YXRlX3Bob25lX251bWJlciIgOiAiMDQ5NDkzNDIwNiIsDQogICAgImJ1c2luZXNzX3Bo
b25lX251bWJlciIgOiAiIiwNCiAgICAibWFpbCIgOiAiIg0KICB9LA0KICAiTUVSR0UiIDogbnVs
bCwNCiAgIlZJU0lUIjogewoJICAgICAgICAicGF0aWVudF9jbGFzcyI6ICAJIAludWxsLAoJICAg
ICAgICAiYWRtaXNzaW9uX3R5cGUiOiAJCW51bGwgLAoJICAgICAgICAicHJlYWRtaXRfbnVtYmVy
IjogCQludWxsICwKCSAgICAgICAgImFkbWl0X251bWJlciI6IAkJbnVsbCwKCSAgICAgICAgInZp
c2l0X2Rlc2NyaXB0aW9uIjogICAgbnVsbCwKCSAgICAgICAgImF0dGVuZGluZ19kb2N0b3JfZXh0
ZXJuYWxfaWQiOiAJCW51bGwsCgkgICAgICAgICJyZWZlcnJpbmdfZG9jdG9yX2V4dGVybmFsX2lk
IjogIAkJbnVsbCwKCSAgICAgICAgImNvbnN1bHRpbmdfZG9jdG9yX2V4dGVybmFsX2lkIjogIAkJ
bnVsbCwKCSAgICAgICAgImFkbWl0dGluZ19kb2N0b3JfZXh0ZXJuYWxfaWQiOiAJCW51bGwsCgkg
ICAgICAgICJob3NwaXRhbF9zZXJ2aWNlIjogIAkJICAgCQkJbnVsbCwKCSAgICAgICAgImFkbWl0
X3NvdXJjZSI6CQkgICAgICAgICAgICAJCW51bGwsCgkgICAgICAgICJhbWJ1bGF0b3J5X3N0YXR1
cyI6IAkJCQkJbnVsbCwKCSAgICAgICAgIm1lZGljYWxfY2FyZV9wcm90b2NvbF9jb2RlIjogCQkJ
bnVsbCwKCSAgICAgICAgIm1lZGljYWxfY2FyZV9wcm90b2NvbF9kZXNjcmlwdGlvbiI6IAludWxs
LAoJICAgICAgICAidmlwX2luZGljYXRvciI6ICAgICAJCQkJIAludWxsLAoJICAgICAgICAiZXhw
ZWN0ZWRfYWRtaXRfZGF0ZXRpbWUiOgkJIAkgCW51bGwsCgkgICAgICAgICJhZG1pdF9kYXRldGlt
ZSI6IAkJCQkJIAludWxsLAoJICAgICAgICAiZXhwZWN0ZWRfZGlzY2hhcmdlX2RhdGV0aW1lIjoJ
CSAJbnVsbCwKCSAgICAgICAgImRpc2NoYXJnZV9kYXRldGltZSI6IAkJCSAgICAgCW51bGwKCX0s
CiAgIklOU1VSQU5DRSIgOiB7DQogICAgImluc3VyYW5jZV90eXBlIiA6ICJBTU8iLA0KICAgICJu
aXIiIDogIjE2NTAzOTkzNDEwODIyNyIsDQogICAgImFtb19jb2RlX3JlZ2ltZV9jYWlzc2VfY2Vu
dHJlIiA6IG51bGwsDQogICAgImFtb19kcm9pdF9kZWJ1dCIgOiBudWxsLA0KICAgICJhbW9fZHJv
aXRfZmluIiA6IG51bGwNCiAgfSwNCiAgIlJFRkVSUklOR19ET0NUT1IiIDogIiIsDQogICJTVFVE
SUVTIiA6IFsNCiAgICB7DQogICAgICAiYXBwb2ludG1lbnRfbnVtYmVyIiA6ICJBMTAyNzA1Njg1
MDAiLA0KICAgICAgImFjY2Vzc2lvbl9udW1iZXIiIDogIkExMDI3MDU2ODUwMCIsDQogICAgICAi
aW5zdGFuY2VfdWlkIiA6ICJBMTAyNzA1Njg1MDBfMCIsDQogICAgICAibG9jYXRpb25fY29kZSIg
OiAiUkFEVVJDIiwNCiAgICAgICJsb2NhdGlvbl9sYWJlbCIgOiAiUkFESU8gVVJHRU5DRVMgQ0VE
UkVTIiwNCiAgICAgICJsb2NhdGlvbl90eXBlX2NvZGUiIDogIk5PVF9VU0VEIiwNCiAgICAgICJs
b2NhdGlvbl90aWNrZXRfbWVzc2FnZSIgOiBudWxsLA0KICAgICAgImxvY2F0aW9uX3BhcGVyX21l
c3NhZ2UiIDogbnVsbCwNCiAgICAgICJzdHVkeV9zdGF0dXNfY29kZSIgOiAiU0NIRURVTEVEIiwN
CiAgICAgICJzdHVkeV90eXBlX2NvZGUiIDogIlJBRFVSQ19SUE9VTSIsDQogICAgICAic2hpZnRf
Y29kZSIgOiAiUkFEVVJDIiwNCiAgICAgICJzdHVkeV9hbHRlcm5hdGl2ZV90eXBlX2NvZGUiIDog
bnVsbCwNCiAgICAgICJzdHVkeV90eXBlX3RleHQiIDogIlBPVU1PTlMgMTAiLA0KICAgICAgInNj
aGVkdWxlZF9kYXRldGltZSIgOiAiMjAyMC0xMi0yOCAxMDoxMDowMCIsDQogICAgICAibW9kYWxp
dHlfY29kZSIgOiAiUkEiLA0KICAgICAgIm1vZGFsaXR5X3RleHQiIDogIlJBRElPIFRIT1JBQ0lR
VUUgLyBBU1AiLA0KICAgICAgIm9yaWdpbiIgOiAiR0VSSSIsDQogICAgICAiZHVyYXRpb24iIDog
IjIwIg0KICAgIH0NCiAgXSwNCiAgIkRPQ1VNRU5UUyIgOiBbIF0sDQogICJNRVJHRV9WSVNJVCIg
OiAiIiwNCiAgIm5leHRTdGVwIiA6IG51bGwNCn0=</inboundTemplate>
        <outboundTemplate encoding="base64">ewogICAgInZpc2l0Ijp7CiAgICAgICAgInZpc2l0RGVzY3JpcHRpb24iOiAiIiwKICAgICAgICAi
cGF0aWVudElkIjogbnVsbCwKICAgICAgICAicGF0aWVudENsYXNzIjogIkkiLAogICAgICAgICJh
ZG1pc3Npb25UeXBlIjogIiIsCiAgICAgICAgInByZWFkbWl0TnVtYmVyIjogIiIsCiAgICAgICAg
ImFkbWl0TnVtYmVyIjogIiIsCiAgICAgICAgImF0dGVuZGluZ0RvY3RvciI6IG51bGwsCiAgICAg
ICAgInJlZmVycmluZ0RvY3RvciI6IG51bGwsCiAgICAgICAgImNvbnN1bHRpbmdEb2N0b3IiOiBu
dWxsLAogICAgICAgICJhZG1pdHRpbmdEb2N0b3IiOiBudWxsLAogICAgICAgICJob3NwaXRhbFNl
cnZpY2UiOiBudWxsLAogICAgICAgICJhZG1pdFNvdXJjZSI6IG51bGwsCiAgICAgICAgImFtYnVs
YXRvcnlTdGF0dXMiOiBudWxsLAogICAgICAgICJtZWRpY2FsQ2FyZVByb3RvY29sQ29kZSI6IG51
bGwsCiAgICAgICAgIm1lZGljYWxDYXJlUHJvdG9jb2xEZXNjcmlwdGlvbiI6IG51bGwsCiAgICAg
ICAgInZpcEluZGljYXRvciI6IG51bGwsCiAgICAgICAgImV4cGVjdGVkQWRtaXREYXRldGltZSI6
ICIiLAogICAgICAgICJhZG1pdERhdGV0aW1lIjogIiIsCiAgICAgICAgImV4cGVjdGVkRGlzY2hh
cmdlRGF0ZXRpbWUiOiAiIiwKICAgICAgICAiZGlzY2hhcmdlRGF0ZXRpbWUiOiAiIgogICAgfQp9
Cg==</outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>analyse retour upsert visite</name>
            <script>var responseStatusLine = $(&apos;responseStatusLine&apos;);
var responseStatusCode = parseInt(responseStatusLine.split(&apos; &apos;)[1], 10);

var  result = null 
var visitIdFound = null

try {
	
       result = checkResponse( &apos;PARSE&apos; ,&apos;Upsert visit&apos;, &apos;http://localhost/beacore/visits/upsert&apos;,&apos;POST&apos;,responseStatusCode, msg)
      if ( result != &apos;not_found&apos; &amp;&amp;  msg[&apos;id&apos;] ) {
       		 visitIdFound = new java.lang.Integer(  msg[&apos;id&apos;]);
    		}
    		 
} catch (e) {
    logger.error(e);
}

channelMap.put(&apos;visit_id&apos;,visitIdFound );
channelMap.put (&apos;result&apos;, result);</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>var responseStatusLine = $(&apos;responseStatusLine&apos;);
var responseStatusCode = parseInt(responseStatusLine.split(&apos; &apos;)[1], 10);

var  result = null 
var visitIdFound = null

try {
	
       result = checkResponse( &apos;PARSE&apos; ,&apos;Upsert visit&apos;, &apos;http://localhost/beacore/visits/upsert&apos;,&apos;POST&apos;,responseStatusCode, msg)
      if ( result != &apos;not_found&apos; &amp;&amp;  msg[&apos;id&apos;] ) {
       		 visitIdFound = new java.lang.Integer(  msg[&apos;id&apos;]);
    		}
    		 
} catch (e) {
    logger.error(e);
}

channelMap.put(&apos;visit_id&apos;,visitIdFound );
channelMap.put (&apos;result&apos;, result);</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64">ew0KICAiZXJyIiA6ICJBdCBsZWFzdCBvbmUgcGFyYW1ldGVyIG11c3QgYmUgZmlsbGVkIg0KfQ==
</inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Accept message if &quot;$(&apos;patient_id&apos;)&quot; does not equal &apos;&apos; or null</name>
            <data>
              <entry>
                <string>Field</string>
                <string>$(&apos;patient_id&apos;)</string>
              </entry>
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>0</string>
              </entry>
              <entry>
                <string>Values</string>
                <list>
                  <string>&apos;&apos;</string>
                  <string>null</string>
                </list>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if($(&apos;patient_id&apos;) != &apos;&apos; &amp;&amp; $(&apos;patient_id&apos;) != null) {
	return true;
}
return false;</script>
            <operator>NONE</operator>
          </rule>
          <rule>
            <sequenceNumber>1</sequenceNumber>
            <name>Accept message if &quot;$(&apos;messageHeader&apos;).messageType&quot; equals &apos;SIU&apos; or &apos;ORM&apos; or &apos;ADT&apos;</name>
            <data>
              <entry>
                <string>Field</string>
                <string>$(&apos;messageHeader&apos;).messageType</string>
              </entry>
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>1</string>
              </entry>
              <entry>
                <string>Values</string>
                <list>
                  <string>&apos;SIU&apos;</string>
                  <string>&apos;ORM&apos;</string>
                  <string>&apos;ADT&apos;</string>
                </list>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if($(&apos;messageHeader&apos;).messageType == &apos;SIU&apos; || $(&apos;messageHeader&apos;).messageType == &apos;ORM&apos; || $(&apos;messageHeader&apos;).messageType == &apos;ADT&apos;) {
	return true;
}
return false;</script>
            <operator>AND</operator>
          </rule>
          <rule>
            <sequenceNumber>2</sequenceNumber>
            <name>N° de preadmission uo N° de visite connu</name>
            <data>
              <entry>
                <string>Script</string>
                <string>if (
	($(&apos;visit&apos;).preadmit_number != &apos;&apos; &amp;&amp; $(&apos;visit&apos;).preadmit_number != null)  || 
    ($(&apos;visit&apos;).admi_number != &apos;&apos; &amp;&amp; $(&apos;visit&apos;).admit_number != null)
    )
{
	return true;
}
return false;</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>if (
	($(&apos;visit&apos;).preadmit_number != &apos;&apos; &amp;&amp; $(&apos;visit&apos;).preadmit_number != null)  || 
    ($(&apos;visit&apos;).admi_number != &apos;&apos; &amp;&amp; $(&apos;visit&apos;).admit_number != null)
    )
{
	return true;
}
return false;</script>
            <operator>AND</operator>
          </rule>
        </rules>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.4.2">
      <metaDataId>75</metaDataId>
      <name>Upsert Location</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>true</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <script>
var tmp = { location: 
 				{ code : &quot;&quot;, 
 				  displayLabel: &quot;&quot;, 
 				  managerLabel: &quot;&quot;,
 				  location_type_code: &quot;NOT_USED&quot;
 				 }	
 		}


/* dans le cas ou il y a plusieus exemens on gardera toutes les code location créé */		
var locationCodeList = []
var tmp_response = SENT
var tmp_error_message  = &quot;&quot;
var returnedValues= {}


for (var i=0; i &lt; $(&apos;studies&apos;).length ; i++ ) {
  
	tmp[&apos;location&apos;][&apos;code&apos;]				=	$(&apos;studies&apos;)[i].location_code
	tmp[&apos;location&apos;][&apos;displayLabel&apos;] 		= 	$(&apos;studies&apos;)[i].location_label 
	tmp[&apos;location&apos;][&apos;managerLabel&apos;] 		= 	$(&apos;studies&apos;)[i].location_label 
	tmp[&apos;location&apos;][&apos;typeCode&apos;] 	=    $(&apos;studies&apos;)[i].location_type_code
	tmp[&apos;location&apos;][&apos;ticketMessage&apos;] 	=    $(&apos;studies&apos;)[i].location_ticket_message
	tmp[&apos;location&apos;][&apos;paperMessage&apos;] 	=    $(&apos;studies&apos;)[i].location_paper_message

      // dans studies il peut y avoir plusieurs examens dont certains ont des code location vide 
	//  on ne cré les codifs que si elles existent
	//  if( $(&apos;studies&apos;)[i].location_code.length &gt; 0) {
	
	 if( $(&apos;studies&apos;)[i].location_code ) {

			returnedResponse  = router.routeMessage(&apos;Upsert Location&apos;, JSON.stringify(tmp));
			returnedValues= JSON.parse(returnedResponse.getMessage())

      		if  (returnedResponse.getStatus() ==ERROR &amp;&amp; tmp_response == SENT){
      			tmp_response = ERROR
      			tmp_error_message= tmp_error_message + returnedResponse.getMessage()
      		}else{
      			tmp_response = SENT
      			locationCodeList.push ({ &apos;location_code&apos;: returnedValues.location_code } )
      		}
   	}

}
channelMap.put(&apos;locationCodeList&apos;, validate( locationCodeList, &apos;&apos;, new Array()));
return Response(tmp_response, tmp_error_message )</script>
      </properties>
      <transformer version="3.4.2">
        <steps/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64">ewoJImxvY2F0aW9uIjp7CiAgCSAJImNvZGUiOiAiIiwKCQkiZGlzcGxheUxhYmVsIjogIiIsCgkJ
Im1hbmFnZXJMYWJlbCI6ICIiLAoJCSJsb2NhdGlvbl90eXBlX2NvZGUiOiAiTk9UX1VTRUQiCgl9
CQp9</outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Accept message if &quot;$(&apos;patient_id&apos;)&quot; does not equal &apos;&apos; or null</name>
            <data>
              <entry>
                <string>Field</string>
                <string>$(&apos;patient_id&apos;)</string>
              </entry>
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>0</string>
              </entry>
              <entry>
                <string>Values</string>
                <list>
                  <string>&apos;&apos;</string>
                  <string>null</string>
                </list>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if($(&apos;patient_id&apos;) != &apos;&apos; &amp;&amp; $(&apos;patient_id&apos;) != null) {
	return true;
}
return false;</script>
            <operator>NONE</operator>
          </rule>
          <rule>
            <sequenceNumber>1</sequenceNumber>
            <name>Accept message if &quot;$(&apos;studies&apos;)&quot; exists</name>
            <data>
              <entry>
                <string>Field</string>
                <string>$(&apos;studies&apos;)</string>
              </entry>
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>2</string>
              </entry>
              <entry>
                <string>Values</string>
                <list/>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if($(&apos;studies&apos;).length &gt; 0) {
	return true;
}
return false;</script>
            <operator>AND</operator>
          </rule>
        </rules>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.4.2">
      <metaDataId>76</metaDataId>
      <name>Upsert Study_type</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>true</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <script>
var tmp = {}
var tmp_response =SENT
var tmp_error_message =&quot;&quot;
var returnedValues= {}
/* dans le cas ou il y a plusieus exemens on gardera toutes les codes   créé */		
var studyTypeCodeList = []

for (var i=0; i &lt; $(&apos;studies&apos;).length ; i++ ) {
  
	tmp[&apos;code&apos;]			=	$(&apos;studies&apos;)[i].study_type_code
	tmp[&apos;borneStudyLabel&apos;]	=    $(&apos;studies&apos;)[i].borneStudyLabel
	tmp[&apos;managerStudyLabel&apos;]	=	$(&apos;studies&apos;)[i].managerStudyLabel
    	tmp[&apos;alternativeCode&apos;]	=	$(&apos;studies&apos;)[i].alternativeCode
    	tmp[&apos;recommendation&apos;]	=	$(&apos;studies&apos;)[i].recommendation
    	tmp[&apos;studyGroupCode&apos;]	=	$(&apos;studies&apos;)[i].studyGroupCode
	 
  
	
	// dans studies il peut y avoir plusieurs examens dont certains ont des codes  vides 
	//  on ne cré les codifs que si elles existent
	
	   if( $(&apos;studies&apos;)[i].study_type_code) {
	  	
		 	returnedResponse= router.routeMessage(&apos;Upsert Study_type&apos;, JSON.stringify(tmp));
		 	returnedValues= JSON.parse(returnedResponse.getMessage())
		 
      		if  (returnedResponse.getStatus() ==ERROR &amp;&amp; tmp_response == SENT){
      			tmp_response = ERROR
      			tmp_error_message= tmp_error_message + JSON.stringify(returnedResponse.getMessage())
      		}else{
      			tmp_response = SENT
      			studyTypeCodeList.push ({ &apos;study_type_code&apos;: returnedValues.study_type_code } )
      		}

     }
}
channelMap.put(&apos;studyTypeCodeList&apos;, validate( studyTypeCodeList, &apos;&apos;, new Array()));

return Response(tmp_response, tmp_error_message )





</script>
      </properties>
      <transformer version="3.4.2">
        <steps/>
        <inboundTemplate encoding="base64">eyAJIk1TSCI6IHsKCQkic2VuZGluZ0FwcGxpY2F0aW9uX25hbWVzcGFjZUlkIjogbnVsbCwgCgkJ
InNlbmRpbmdGYWNpbGl0eV9uYW1lc3BhY2VJZCI6IG51bGwsCgkJImRhdGVPclRpbWVPZk1lc3Nh
Z2VfdGltZU9mQW5FdmVudCI6IG51bGwsIAoJCSJtZXNzYWdlVHlwZSI6IG51bGwsIAoJCSJtZXNz
YWdlVHlwZV90cmlnZ2VyRXZlbnQiOiBudWxsLCAKCQkibWVzc2FnZUNvbnRyb2xJZF92YWx1ZSI6
IG51bGwsIAoJCSJhY2NlcHRBY2tub3dsZWRnbWVudFR5cGVfdmFsdWUiOiBudWxsLCAKCQkiYXBw
bGljYXRpb25BY2tub3dsZWRnbWVudFR5cGVfdmFsdWUiOiBudWxsLCAKCQkic2VxdWVuY2VOdW1i
ZXJfdmFsdWUiOiBudWxsIAoJfSwKCSJQSUQiOiB7CgkJInBhdGllbnRfaGw3X2lkZW50aWZpZXIi
OiBudWxsLCAKCQkicGF0aWVudF9pZGVudGlmaWVyTGlzdCI6IG51bGwsIAoJCSJwYXRpZW50X2xh
c3RfbmFtZSI6IG51bGwsIAoJCSJwYXRpZW50X2ZpcnN0X25hbWUiOiBudWxsLCAKCQkicGF0aWVu
dF9iaXJ0aGRhdGUiOiBudWxsLCAKCQkicGF0aWVudF9zZXgiOiBudWxsLCAKCQkicGF0aWVudF9z
dHJlZXRfYWRkcmVzcyI6IG51bGwsIAoJCSJwYXRpZW50X2NpdHkiOiBudWxsLCAKCQkicGF0aWVu
dF9zdGF0ZSI6IG51bGwsIAoJCSJwYXRpZW50X3ppcF9jb2RlIjogbnVsbCwgCgkJInBhdGllbnRf
cHJpdmF0ZV9waG9uZV9udW1iZXIiOiBudWxsLCAKCQkicGF0aWVudF9idXNpbmVzc19waG9uZV9u
dW1iZXIiOiBudWxsLCAKCQkicGF0aWVudF9tYWlsIjogbnVsbAoJfSwKICAgICJNUkciOiB7CgkJ
InByaW9yUGF0aWVudElkZW50aWZpZXJMaXN0X2lkIjogbnVsbCwKCQkicHJpb3JQYXRpZW50TmFt
ZV9mYW1pbHlMYXN0TmFtZSI6IG51bGwsCgkJInByaW9yUGF0aWVudE5hbWVfZ2l2ZW5OYW1lIiA6
IG51bGwKCX0sCgkiUFYiOiB7CgkJInZpc2l0X251bWJlciIgOiBudWxsLAoJCSJleHBlY3RlZF9h
ZG1pdF9kYXRldGltZSI6IG51bGwKCX0sCgkiSU4iOiB7CgkJImluc3VyYW5jZV90eXBlIjogIG51
bGwsCgkJIm5pciI6IG51bGwsCgkJImFtb19jb2RlX3JlZ2ltZV9jYWlzc2VfY2VudHJlIjogbnVs
bCwKCQkiYW1vX2Ryb2l0X2RlYnV0IjogbnVsbCwKCQkiYW1vX2Ryb2l0X2ZpbiI6IG51bGwKCX0s
IAoJIlJPTCI6IHsKCQkibGFzdF9uYW1lIjogIG51bGwsCgkJImZpcnN0X25hbWUiOiAgbnVsbCwK
CQkicnBwc19udW1iZXIiOiBudWxsLAoJCSJzdHJlZXQiOiAgCW51bGwsCgkJImNpdHkiOiAgbnVs
bCwKCQkiemlwX2NvZGUiOiAgbnVsbCwKCQkicGhvbmVfbnVtYmVyIjogbnVsbAoJfSwgCgkiU1RV
RElFUyI6IFt7CgkJImFjY2Vzc2lvbl9udW1iZXIiOiAgCW51bGwgLAoJCSJpbnN0YW5jZV91aWQi
OiAgCQludWxsICwKCQkic2NoZWR1bGVkX2RhdGV0aW1lIjogCW51bGwgLAkKCQkibG9jYXRpb25f
Y29kZSI6ICAgIAludWxsICwJICAgCgkJImxvY2F0aW9uX2xhYmVsIjogCSAJbnVsbCAsCQoJCSJz
dGF0dXNfY29kZSI6ICAJCW51bGwgLAkKCQkic3R1ZHlfdHlwZV9jb2RlIjogCSAJbnVsbCAsCQoJ
CSJzdHVkeV90eXBlX3RleHQiOgkgCW51bGwgLAkKCQkibW9kYWxpdHlfY29kZSI6IAkJbnVsbCAs
CQoJCSJtb2RhbGl0eV90ZXh0IjogCQludWxsICwJCgkJIm9yaWdpbiI6IAkJCQludWxsICwKCQki
ZHVyYXRpb24iOiAJCQludWxsCiAgICAgfV0gLAoJIm5leHRTdGVwIjogbnVsbAp9</inboundTemplate>
        <outboundTemplate encoding="base64">ewoJImNvZGUiOiAiIiwKCSJ0ZXh0IjogIiIKfQ==</outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Accept message if &quot;$(&apos;patient_id&apos;)&quot; does not equal null or &apos;&apos;</name>
            <data>
              <entry>
                <string>Field</string>
                <string>$(&apos;patient_id&apos;)</string>
              </entry>
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>0</string>
              </entry>
              <entry>
                <string>Values</string>
                <list>
                  <string>null</string>
                  <string>&apos;&apos;</string>
                </list>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if($(&apos;patient_id&apos;) != null &amp;&amp; $(&apos;patient_id&apos;) != &apos;&apos;) {
	return true;
}
return false;</script>
            <operator>NONE</operator>
          </rule>
          <rule>
            <sequenceNumber>1</sequenceNumber>
            <name>Accept message if &quot;$(&apos;studies&apos;)&quot; exists</name>
            <data>
              <entry>
                <string>Field</string>
                <string>$(&apos;studies&apos;)</string>
              </entry>
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>2</string>
              </entry>
              <entry>
                <string>Values</string>
                <list/>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if($(&apos;studies&apos;).length &gt; 0) {
	return true;
}
return false;</script>
            <operator>AND</operator>
          </rule>
        </rules>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.4.2">
      <metaDataId>77</metaDataId>
      <name>Upsert Modality</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>true</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <script>
var tmp = {}
var tmp_response =SENT
var tmp_error_message =&quot;&quot;
var returnedValues= {}
var modalityCodeList = []

for (var i=0; i &lt;$(&apos;studies&apos;).length ; i++ ) {
	
	tmp[&apos;code&apos;]	=	$(&apos;studies&apos;)[i].modality_code
	tmp[&apos;text&apos;] 	= 	$(&apos;studies&apos;)[i].modality_text


	// dans studies il peut y avoir plusieurs examens dont certains ont des codes  vides 
	//  on ne cré les codifs que si elles existent

	 if( $(&apos;studies&apos;)[i].modality_code  ) {
		 	
		 	returnedResponse= router.routeMessage(&apos;Upsert Modality&apos;, JSON.stringify(tmp));
		 		returnedValues= JSON.parse(returnedResponse.getMessage())
	
      		if  (returnedResponse.getStatus() ==ERROR &amp;&amp; tmp_response == SENT){
      			tmp_response = ERROR
      			tmp_error_message= tmp_error_message + JSON.stringify(returnedResponse.getMessage() )
      		}else{
      			tmp_response = SENT
      			modalityCodeList.push ({ &apos;modality_code&apos;: returnedValues.modality_code } )
      		}
		 
		}
}

channelMap.put(&apos;modalityCodeList&apos;, validate( modalityCodeList, &apos;&apos;, new Array()));
channelMap.put(&apos;upsertModalityError&apos; , tmp_response === ERROR)

return Response(tmp_response, tmp_error_message )</script>
      </properties>
      <transformer version="3.4.2">
        <steps/>
        <inboundTemplate encoding="base64">eyAJIk1TSCI6IHsKCQkic2VuZGluZ0FwcGxpY2F0aW9uX25hbWVzcGFjZUlkIjogbnVsbCwgCgkJ
InNlbmRpbmdGYWNpbGl0eV9uYW1lc3BhY2VJZCI6IG51bGwsCgkJImRhdGVPclRpbWVPZk1lc3Nh
Z2VfdGltZU9mQW5FdmVudCI6IG51bGwsIAoJCSJtZXNzYWdlVHlwZSI6IG51bGwsIAoJCSJtZXNz
YWdlVHlwZV90cmlnZ2VyRXZlbnQiOiBudWxsLCAKCQkibWVzc2FnZUNvbnRyb2xJZF92YWx1ZSI6
IG51bGwsIAoJCSJhY2NlcHRBY2tub3dsZWRnbWVudFR5cGVfdmFsdWUiOiBudWxsLCAKCQkiYXBw
bGljYXRpb25BY2tub3dsZWRnbWVudFR5cGVfdmFsdWUiOiBudWxsLCAKCQkic2VxdWVuY2VOdW1i
ZXJfdmFsdWUiOiBudWxsIAoJfSwKCSJQSUQiOiB7CgkJInBhdGllbnRfaGw3X2lkZW50aWZpZXIi
OiBudWxsLCAKCQkicGF0aWVudF9pZGVudGlmaWVyTGlzdCI6IG51bGwsIAoJCSJwYXRpZW50X2xh
c3RfbmFtZSI6IG51bGwsIAoJCSJwYXRpZW50X2ZpcnN0X25hbWUiOiBudWxsLCAKCQkicGF0aWVu
dF9iaXJ0aGRhdGUiOiBudWxsLCAKCQkicGF0aWVudF9zZXgiOiBudWxsLCAKCQkicGF0aWVudF9z
dHJlZXRfYWRkcmVzcyI6IG51bGwsIAoJCSJwYXRpZW50X2NpdHkiOiBudWxsLCAKCQkicGF0aWVu
dF9zdGF0ZSI6IG51bGwsIAoJCSJwYXRpZW50X3ppcF9jb2RlIjogbnVsbCwgCgkJInBhdGllbnRf
cHJpdmF0ZV9waG9uZV9udW1iZXIiOiBudWxsLCAKCQkicGF0aWVudF9idXNpbmVzc19waG9uZV9u
dW1iZXIiOiBudWxsLCAKCQkicGF0aWVudF9tYWlsIjogbnVsbAoJfSwKICAgICJNUkciOiB7CgkJ
InByaW9yUGF0aWVudElkZW50aWZpZXJMaXN0X2lkIjogbnVsbCwKCQkicHJpb3JQYXRpZW50TmFt
ZV9mYW1pbHlMYXN0TmFtZSI6IG51bGwsCgkJInByaW9yUGF0aWVudE5hbWVfZ2l2ZW5OYW1lIiA6
IG51bGwKCX0sCgkiUFYiOiB7CgkJInZpc2l0X251bWJlciIgOiBudWxsLAoJCSJleHBlY3RlZF9h
ZG1pdF9kYXRldGltZSI6IG51bGwKCX0sCgkiSU4iOiB7CgkJImluc3VyYW5jZV90eXBlIjogIG51
bGwsCgkJIm5pciI6IG51bGwsCgkJImFtb19jb2RlX3JlZ2ltZV9jYWlzc2VfY2VudHJlIjogbnVs
bCwKCQkiYW1vX2Ryb2l0X2RlYnV0IjogbnVsbCwKCQkiYW1vX2Ryb2l0X2ZpbiI6IG51bGwKCX0s
IAoJIlJPTCI6IHsKCQkibGFzdF9uYW1lIjogIG51bGwsCgkJImZpcnN0X25hbWUiOiAgbnVsbCwK
CQkicnBwc19udW1iZXIiOiBudWxsLAoJCSJzdHJlZXQiOiAgCW51bGwsCgkJImNpdHkiOiAgbnVs
bCwKCQkiemlwX2NvZGUiOiAgbnVsbCwKCQkicGhvbmVfbnVtYmVyIjogbnVsbAoJfSwgCgkiU1RV
RElFUyI6IFt7CgkJImFjY2Vzc2lvbl9udW1iZXIiOiAgCW51bGwgLAoJCSJpbnN0YW5jZV91aWQi
OiAgCQludWxsICwKCQkic2NoZWR1bGVkX2RhdGV0aW1lIjogCW51bGwgLAkKCQkibG9jYXRpb25f
Y29kZSI6ICAgIAludWxsICwJICAgCgkJImxvY2F0aW9uX2xhYmVsIjogCSAJbnVsbCAsCQoJCSJz
dGF0dXNfY29kZSI6ICAJCW51bGwgLAkKCQkic3R1ZHlfdHlwZV9jb2RlIjogCSAJbnVsbCAsCQoJ
CSJzdHVkeV90eXBlX3RleHQiOgkgCW51bGwgLAkKCQkibW9kYWxpdHlfY29kZSI6IAkJbnVsbCAs
CQoJCSJtb2RhbGl0eV90ZXh0IjogCQludWxsICwJCgkJIm9yaWdpbiI6IAkJCQludWxsICwKCQki
ZHVyYXRpb24iOiAJCQludWxsCiAgICAgfV0gLAoJIm5leHRTdGVwIjogbnVsbAp9</inboundTemplate>
        <outboundTemplate encoding="base64">ewogICAJImNvZGUiOiAiIiwKCSJ0ZXh0IjogIiIKfQ==</outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Accept message if &quot;$(&apos;studies&apos;)&quot; exists</name>
            <data>
              <entry>
                <string>Field</string>
                <string>$(&apos;studies&apos;)</string>
              </entry>
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>2</string>
              </entry>
              <entry>
                <string>Values</string>
                <list/>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if($(&apos;studies&apos;).length &gt; 0) {
	return true;
}
return false;</script>
            <operator>NONE</operator>
          </rule>
          <rule>
            <sequenceNumber>1</sequenceNumber>
            <name>Accept message if &quot;$(&apos;patient_id&apos;)&quot; does not equal &apos;&apos; or null</name>
            <data>
              <entry>
                <string>Field</string>
                <string>$(&apos;patient_id&apos;)</string>
              </entry>
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>0</string>
              </entry>
              <entry>
                <string>Values</string>
                <list>
                  <string>&apos;&apos;</string>
                  <string>null</string>
                </list>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if($(&apos;patient_id&apos;) != &apos;&apos; &amp;&amp; $(&apos;patient_id&apos;) != null) {
	return true;
}
return false;</script>
            <operator>AND</operator>
          </rule>
        </rules>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.4.2">
      <metaDataId>23</metaDataId>
      <name>Upsert Appointments Scheduled  </name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>true</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <script>/*  UPSERT APPOINTEMENT 
sert a créer  ou mettre à jour les RDV  à partir des SIU  stockés dans la table STUDY status SCHEDULED 
on ne crée pas des examens à partir des ORM  status WAITING , Ce sera le  REPLACE STUDIES qui fait cela
*/
var tmp = { study: {} }
var tmp_response =SENT
var tmp_error_message =&quot;&quot;
var returnedValues= {}
 
var studiestIdList = []

// creation ou mise à jours  d&apos;un rendez-vous dans STUDY 
// de toutes les occurences d&apos;examens trouvées dans le même message

for (var i=0; i&lt;$(&apos;studies&apos;).length; i++ ) {


//  dans la table STUDY certaines valeurs ne peuvent contenir &apos;&apos; car il ya des ForeingKey
// dans le cas ou elles sont vide on met NULL

		modality_code = null
		location_code = null
		study_type_code = null
		origin = null
		duration = null
		accession_number=null 
		visit_id=null
		//physician_doctor = null
		
		
		if ( $(&apos;studies&apos;)[i].modality_code != &apos;&apos; ) {
			modality_code =  $(&apos;studies&apos;)[i].modality_code
		}
		
		if ( $(&apos;studies&apos;)[i].location_code != &apos;&apos; ) {
			location_code =  $(&apos;studies&apos;)[i].location_code
		}

		if ( $(&apos;studies&apos;)[i].study_type_code != &apos;&apos; ) {
			study_type_code =  $(&apos;studies&apos;)[i].study_type_code
		}
		
		if ( $(&apos;studies&apos;)[i].origin != &apos;&apos; ) {
			origin =  $(&apos;studies&apos;)[i].origin
		}
		
		
		if ( $(&apos;studies&apos;)[i].duration != &apos;&apos; ) {
			duration =  $(&apos;studies&apos;)[i].duration
		}
		
		if ( $(&apos;studies&apos;)[i].accession_number != &apos;&apos; ) {
			accession_number =  $(&apos;studies&apos;)[i].accession_number
		}

		/*if ( $(&apos;studies&apos;)[i].physician_doctor != &apos;&apos; ) {
			physician_doctor =  $(&apos;studies&apos;)[i].physician_doctor
		}*/

	     if  ($(&apos;visit_id&apos;) &amp;&amp;  $(&apos;visit_id&apos;) !=&apos;&apos; ){
	     	visit_id  =   $(&apos;visit_id&apos;)
	     }


		tmp[&apos;study&apos;][&apos;patient_id&apos;] 		=  $(&apos;patient_id&apos;)
		tmp[&apos;study&apos;][&apos;appointment_number&apos;] =  $(&apos;studies&apos;)[i].appointment_number
		tmp[&apos;study&apos;][&apos;accession_number&apos;] 	=  accession_number
		tmp[&apos;study&apos;][&apos;instance_uid&apos;] 		=  $(&apos;studies&apos;)[i].instance_uid
		tmp[&apos;study&apos;][&apos;visit_id&apos;] 	     =  visit_id
		tmp[&apos;study&apos;][&apos;scheduled_datetime&apos;] =  $(&apos;studies&apos;)[i].scheduled_datetime
		tmp[&apos;study&apos;][&apos;location_code&apos;] 	=  location_code
		tmp[&apos;study&apos;][&apos;study_status_code&apos;]	=  $(&apos;studies&apos;)[i].study_status_code
		tmp[&apos;study&apos;][&apos;study_type_code&apos;]	=  $(&apos;studies&apos;)[i].study_type_code
		tmp[&apos;study&apos;][&apos;shift_code&apos;]		=  $(&apos;studies&apos;)[i].shift_code
		tmp[&apos;study&apos;][&apos;modality_code&apos;]		=  modality_code
		tmp[&apos;study&apos;][&apos;origin&apos;]			=  origin
		tmp[&apos;study&apos;][&apos;duration&apos;]			=  duration
		//tmp[&apos;study&apos;][&apos;physician_doctor&apos;]	=  physician_doctor
		
		

	//  si l&apos;accession number est vide on ne va pas essayer de créer un examens
	
	
	 if    ( accession_number &amp;&amp; study_type_code  ) {
	  
			returnedResponse= router.routeMessage(&apos;Upsert Appointment&apos;, JSON.stringify(tmp));
			returnedValues= JSON.parse(returnedResponse.getMessage())
		
	      	if  (returnedResponse.getStatus() ==ERROR &amp;&amp; tmp_response == SENT){
	      		tmp_response = ERROR
	      		tmp_error_message= tmp_error_message + JSON.stringify(returnedResponse.getMessage())
	      	}else{
	      		tmp_response = SENT
	      		studiestIdList.push ({ &apos;study_id&apos;: returnedValues.study_id } )
	      	}
	}else {
			tmp_response = FILTERED
	}

}

	channelMap.put(&apos;studiestIdList&apos;, validate( studiestIdList, &apos;&apos;, new Array()));

	return Response(tmp_response, tmp_error_message );
 </script>
      </properties>
      <transformer version="3.4.2">
        <steps/>
        <inboundTemplate encoding="base64">eyAJIk1TSCI6IHsKCQkic2VuZGluZ0FwcGxpY2F0aW9uX25hbWVzcGFjZUlkIjogbnVsbCwgCgkJ
InNlbmRpbmdGYWNpbGl0eV9uYW1lc3BhY2VJZCI6IG51bGwsCgkJImRhdGVPclRpbWVPZk1lc3Nh
Z2VfdGltZU9mQW5FdmVudCI6IG51bGwsIAoJCSJtZXNzYWdlVHlwZSI6IG51bGwsIAoJCSJtZXNz
YWdlVHlwZV90cmlnZ2VyRXZlbnQiOiBudWxsLCAKCQkibWVzc2FnZUNvbnRyb2xJZF92YWx1ZSI6
IG51bGwsIAoJCSJhY2NlcHRBY2tub3dsZWRnbWVudFR5cGVfdmFsdWUiOiBudWxsLCAKCQkiYXBw
bGljYXRpb25BY2tub3dsZWRnbWVudFR5cGVfdmFsdWUiOiBudWxsLCAKCQkic2VxdWVuY2VOdW1i
ZXJfdmFsdWUiOiBudWxsIAoJfSwKCSJQSUQiOiB7CgkJInBhdGllbnRfaGw3X2lkZW50aWZpZXIi
OiBudWxsLCAKCQkicGF0aWVudF9pZGVudGlmaWVyTGlzdCI6IG51bGwsIAoJCSJwYXRpZW50X2xh
c3RfbmFtZSI6IG51bGwsIAoJCSJwYXRpZW50X2ZpcnN0X25hbWUiOiBudWxsLCAKCQkicGF0aWVu
dF9iaXJ0aGRhdGUiOiBudWxsLCAKCQkicGF0aWVudF9zZXgiOiBudWxsLCAKCQkicGF0aWVudF9z
dHJlZXRfYWRkcmVzcyI6IG51bGwsIAoJCSJwYXRpZW50X2NpdHkiOiBudWxsLCAKCQkicGF0aWVu
dF9zdGF0ZSI6IG51bGwsIAoJCSJwYXRpZW50X3ppcF9jb2RlIjogbnVsbCwgCgkJInBhdGllbnRf
cHJpdmF0ZV9waG9uZV9udW1iZXIiOiBudWxsLCAKCQkicGF0aWVudF9idXNpbmVzc19waG9uZV9u
dW1iZXIiOiBudWxsLCAKCQkicGF0aWVudF9tYWlsIjogbnVsbAoJfSwKICAgICJNUkciOiB7CgkJ
InByaW9yUGF0aWVudElkZW50aWZpZXJMaXN0X2lkIjogbnVsbCwKCQkicHJpb3JQYXRpZW50TmFt
ZV9mYW1pbHlMYXN0TmFtZSI6IG51bGwsCgkJInByaW9yUGF0aWVudE5hbWVfZ2l2ZW5OYW1lIiA6
IG51bGwKCX0sCgkiUFYiOiB7CgkJInZpc2l0X251bWJlciIgOiBudWxsLAoJCSJleHBlY3RlZF9h
ZG1pdF9kYXRldGltZSI6IG51bGwKCX0sCgkiSU4iOiB7CgkJImluc3VyYW5jZV90eXBlIjogIG51
bGwsCgkJIm5pciI6IG51bGwsCgkJImFtb19jb2RlX3JlZ2ltZV9jYWlzc2VfY2VudHJlIjogbnVs
bCwKCQkiYW1vX2Ryb2l0X2RlYnV0IjogbnVsbCwKCQkiYW1vX2Ryb2l0X2ZpbiI6IG51bGwKCX0s
IAoJIlJPTCI6IHsKCQkibGFzdF9uYW1lIjogIG51bGwsCgkJImZpcnN0X25hbWUiOiAgbnVsbCwK
CQkicnBwc19udW1iZXIiOiBudWxsLAoJCSJzdHJlZXQiOiAgCW51bGwsCgkJImNpdHkiOiAgbnVs
bCwKCQkiemlwX2NvZGUiOiAgbnVsbCwKCQkicGhvbmVfbnVtYmVyIjogbnVsbAoJfSwgCgkiU1RV
RElFUyI6IFt7CgkJImFjY2Vzc2lvbl9udW1iZXIiOiAgCW51bGwgLAoJCSJpbnN0YW5jZV91aWQi
OiAgCQludWxsICwKCQkic2NoZWR1bGVkX2RhdGV0aW1lIjogCW51bGwgLAkKCQkibG9jYXRpb25f
Y29kZSI6ICAgIAludWxsICwJICAgCgkJImxvY2F0aW9uX2xhYmVsIjogCSAJbnVsbCAsCQoJCSJz
dHVkeV9zdGF0dXNfY29kZSI6ICAJbnVsbCAsCQoJCSJzdHVkeV90eXBlX2NvZGUiOiAJIAludWxs
ICwJCgkJInN0dWR5X3R5cGVfdGV4dCI6CSAJbnVsbCAsCQoJCSJtb2RhbGl0eV9jb2RlIjogCQlu
dWxsICwJCgkJIm1vZGFsaXR5X3RleHQiOiAJCW51bGwgLAkKCQkib3JpZ2luIjogCQkJCW51bGwg
LAoJCSJkdXJhdGlvbiI6IAkJCW51bGwKICAgICB9XSAsCgkibmV4dFN0ZXAiOiBudWxsCn0=</inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps/>
        <inboundTemplate encoding="base64">ewoJImVycm9yIjogZmFsc2UsIAoJICJlcnJvcl9tZXNzYWdlIjogbnVsbCwgCiAgICAgInN0dWR5
X2lkIiA6IG51bGwKfQ==</inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Patient créé</name>
            <data>
              <entry>
                <string>Script</string>
                <string>var test_patient_id = channelMap.get(&apos;patient_id&apos;)

if ( test_patient_id &amp;&amp; test_patient_id !=&apos;&apos;  ) {
	 
	 return true;
}
return false;</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>var test_patient_id = channelMap.get(&apos;patient_id&apos;)

if ( test_patient_id &amp;&amp; test_patient_id !=&apos;&apos;  ) {
	 
	 return true;
}
return false;</script>
            <operator>NONE</operator>
          </rule>
          <rule>
            <sequenceNumber>1</sequenceNumber>
            <name>Il y a une study a traiter </name>
            <data>
              <entry>
                <string>Script</string>
                <string>var studiesExists = channelMap.get(&apos;studies&apos;)

if ( studiesExists &amp;&amp; studiesExists !=&apos;&apos;  ) {
	 
	 return true;
}
return false;</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>var studiesExists = channelMap.get(&apos;studies&apos;)

if ( studiesExists &amp;&amp; studiesExists !=&apos;&apos;  ) {
	 
	 return true;
}
return false;</script>
            <operator>AND</operator>
          </rule>
          <rule>
            <sequenceNumber>2</sequenceNumber>
            <name>Check previous destination response</name>
            <data>
              <entry>
                <string>Script</string>
                <string>// -- ne marche pas  retrurn  !$(&apos;upsertModalityError&apos;)

if ( $(&apos;upsertModalityError&apos;)== true )  {
	return false;
}
return true</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>// -- ne marche pas  retrurn  !$(&apos;upsertModalityError&apos;)

if ( $(&apos;upsertModalityError&apos;)== true )  {
	return false;
}
return true</script>
            <operator>AND</operator>
          </rule>
          <rule>
            <sequenceNumber>3</sequenceNumber>
            <name>Accept message if &quot;msg[&apos;MSH&apos;][&apos;messageType&apos;]&quot; equals &apos;SIU&apos; or &apos;ORU&apos;</name>
            <data>
              <entry>
                <string>Field</string>
                <string>msg[&apos;MSH&apos;][&apos;messageType&apos;]</string>
              </entry>
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>1</string>
              </entry>
              <entry>
                <string>Values</string>
                <list>
                  <string>&apos;SIU&apos;</string>
                  <string>&apos;ORU&apos;</string>
                </list>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if(msg[&apos;MSH&apos;][&apos;messageType&apos;] == &apos;SIU&apos; || msg[&apos;MSH&apos;][&apos;messageType&apos;] == &apos;ORU&apos;) {
	return true;
}
return false;</script>
            <operator>AND</operator>
          </rule>
        </rules>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.4.2">
      <metaDataId>59</metaDataId>
      <name>Find Patient STATUS</name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>true</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <host>http://localhost/beacore/patients/${patient_id}</host>
        <useProxyServer>false</useProxyServer>
        <proxyAddress></proxyAddress>
        <proxyPort></proxyPort>
        <method>get</method>
        <headers class="linked-hash-map">
          <entry>
            <string>Authorization</string>
            <list>
              <string>${accessToken}</string>
            </list>
          </entry>
        </headers>
        <parameters class="linked-hash-map"/>
        <responseXmlBody>false</responseXmlBody>
        <responseParseMultipart>true</responseParseMultipart>
        <responseIncludeMetadata>false</responseIncludeMetadata>
        <responseBinaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</responseBinaryMimeTypes>
        <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
        <multipart>false</multipart>
        <useAuthentication>false</useAuthentication>
        <authenticationType>Digest</authenticationType>
        <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
        <username></username>
        <password></password>
        <content></content>
        <contentType>application/json</contentType>
        <dataTypeBinary>false</dataTypeBinary>
        <charset>UTF-8</charset>
        <socketTimeout>30000</socketTimeout>
      </properties>
      <transformer version="3.4.2">
        <steps/>
        <inboundTemplate encoding="base64">eyAJIk1TSCI6IHsKCQkic2VuZGluZ0FwcGxpY2F0aW9uX25hbWVzcGFjZUlkIjogbnVsbCwgCgkJ
InNlbmRpbmdGYWNpbGl0eV9uYW1lc3BhY2VJZCI6IG51bGwsCgkJImRhdGVPclRpbWVPZk1lc3Nh
Z2VfdGltZU9mQW5FdmVudCI6IG51bGwsIAoJCSJtZXNzYWdlVHlwZSI6IG51bGwsIAoJCSJtZXNz
YWdlVHlwZV90cmlnZ2VyRXZlbnQiOiBudWxsLCAKCQkibWVzc2FnZUNvbnRyb2xJZF92YWx1ZSI6
IG51bGwsIAoJCSJhY2NlcHRBY2tub3dsZWRnbWVudFR5cGVfdmFsdWUiOiBudWxsLCAKCQkiYXBw
bGljYXRpb25BY2tub3dsZWRnbWVudFR5cGVfdmFsdWUiOiBudWxsLCAKCQkic2VxdWVuY2VOdW1i
ZXJfdmFsdWUiOiBudWxsIAoJfSwKCSJQSUQiOiB7CgkJInBhdGllbnRfaGw3X2lkZW50aWZpZXIi
OiBudWxsLCAKCQkicGF0aWVudF9pZGVudGlmaWVyTGlzdCI6IG51bGwsIAoJCSJwYXRpZW50X2xh
c3RfbmFtZSI6IG51bGwsIAoJCSJwYXRpZW50X2ZpcnN0X25hbWUiOiBudWxsLCAKCQkicGF0aWVu
dF9iaXJ0aGRhdGUiOiBudWxsLCAKCQkicGF0aWVudF9zZXgiOiBudWxsLCAKCQkicGF0aWVudF9z
dHJlZXRfYWRkcmVzcyI6IG51bGwsIAoJCSJwYXRpZW50X2NpdHkiOiBudWxsLCAKCQkicGF0aWVu
dF9zdGF0ZSI6IG51bGwsIAoJCSJwYXRpZW50X3ppcF9jb2RlIjogbnVsbCwgCgkJInBhdGllbnRf
cHJpdmF0ZV9waG9uZV9udW1iZXIiOiBudWxsLCAKCQkicGF0aWVudF9idXNpbmVzc19waG9uZV9u
dW1iZXIiOiBudWxsLCAKCQkicGF0aWVudF9tYWlsIjogbnVsbAoJfSwKICAgICJNUkciOiB7CgkJ
InByaW9yUGF0aWVudElkZW50aWZpZXJMaXN0X2lkIjogbnVsbCwKCQkicHJpb3JQYXRpZW50TmFt
ZV9mYW1pbHlMYXN0TmFtZSI6IG51bGwsCgkJInByaW9yUGF0aWVudE5hbWVfZ2l2ZW5OYW1lIiA6
IG51bGwKCX0sCgkiUFYiOiB7CgkJInZpc2l0X251bWJlciIgOiBudWxsLAoJCSJleHBlY3RlZF9h
ZG1pdF9kYXRldGltZSI6IG51bGwKCX0sCgkiSU4iOiB7CgkJImluc3VyYW5jZV90eXBlIjogIG51
bGwsCgkJIm5pciI6IG51bGwsCgkJImFtb19jb2RlX3JlZ2ltZV9jYWlzc2VfY2VudHJlIjogbnVs
bCwKCQkiYW1vX2Ryb2l0X2RlYnV0IjogbnVsbCwKCQkiYW1vX2Ryb2l0X2ZpbiI6IG51bGwKCX0s
IAoJIlJPTCI6IHsKCQkibGFzdF9uYW1lIjogIG51bGwsCgkJImZpcnN0X25hbWUiOiAgbnVsbCwK
CQkicnBwc19udW1iZXIiOiBudWxsLAoJCSJzdHJlZXQiOiAgCW51bGwsCgkJImNpdHkiOiAgbnVs
bCwKCQkiemlwX2NvZGUiOiAgbnVsbCwKCQkicGhvbmVfbnVtYmVyIjogbnVsbAoJfSwgCgkiU1RV
RElFUyI6IFt7CgkJImFjY2Vzc2lvbl9udW1iZXIiOiAgCW51bGwgLAoJCSJpbnN0YW5jZV91aWQi
OiAgCQludWxsICwKCQkic2NoZWR1bGVkX2RhdGV0aW1lIjogCW51bGwgLAkKCQkibG9jYXRpb25f
Y29kZSI6ICAgIAludWxsICwJICAgCgkJImxvY2F0aW9uX2xhYmVsIjogCSAJbnVsbCAsCQoJCSJz
dGF0dXNfY29kZSI6ICAJCW51bGwgLAkKCQkic3R1ZHlfdHlwZV9jb2RlIjogCSAJbnVsbCAsCQoJ
CSJzdHVkeV90eXBlX3RleHQiOgkgCW51bGwgLAkKCQkibW9kYWxpdHlfY29kZSI6IAkJbnVsbCAs
CQoJCSJtb2RhbGl0eV90ZXh0IjogCQludWxsICwJCgkJIm9yaWdpbiI6IAkJCQludWxsICwKCQki
ZHVyYXRpb24iOiAJCQludWxsLCAKCQkiT3JkZXJDb250cm9sXzEiOgkJbnVsbCwKCQkiT3JkZXJD
b250cm9sXzUiOgkJbnVsbAogICAgIH1dIAp9</inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>Check Find patient</name>
            <script>var patientStatusCode =&apos;&apos;
var result = &apos;&apos;
var responseStatusLine = $(&apos;responseStatusLine&apos;);
var responseStatusCode = parseInt(responseStatusLine.split(&apos; &apos;)[1], 10);
// var responseStatusMessage = responseStatusLine.substr(responseStatusLine.indexOf(&apos; &apos;)).trim();
     
try {
      var result = checkResponse( &apos;PARSE&apos; ,&apos;Find Patient status&apos;, &apos;http://localhost/beacore/patients/(patient_id)&apos;,&apos;GET&apos;,responseStatusCode, msg)
     
      if ( result ==&apos;found&apos;) {
       	patientStatusCode = msg[&apos;patientStatusCode&apos;]; 
       	//patientStatusCode = &apos;TATA&apos;
        }
} catch(e) {
	logger.error(e);
}
 

channelMap.put(&apos;patient_status_code&apos;,patientStatusCode);</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>var patientStatusCode =&apos;&apos;
var result = &apos;&apos;
var responseStatusLine = $(&apos;responseStatusLine&apos;);
var responseStatusCode = parseInt(responseStatusLine.split(&apos; &apos;)[1], 10);
// var responseStatusMessage = responseStatusLine.substr(responseStatusLine.indexOf(&apos; &apos;)).trim();
     
try {
      var result = checkResponse( &apos;PARSE&apos; ,&apos;Find Patient status&apos;, &apos;http://localhost/beacore/patients/(patient_id)&apos;,&apos;GET&apos;,responseStatusCode, msg)
     
      if ( result ==&apos;found&apos;) {
       	patientStatusCode = msg[&apos;patientStatusCode&apos;]; 
       	//patientStatusCode = &apos;TATA&apos;
        }
} catch(e) {
	logger.error(e);
}
 

channelMap.put(&apos;patient_status_code&apos;,patientStatusCode);</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64">ewogICAgImlkIjogMzgxLAogICAgImhsN19wYXRpZW50X2lkIjogbnVsbCwKICAgICJobDdfcGF0
aWVudF9wYXRpZW50X2lkIjogbnVsbCwKICAgICJ0aWNrZXRfbnVtYmVyIjogIkQ4OTIiLAogICAg
ImFkbWl0X2RhdGV0aW1lIjogIjIwMjAtMDYtMDRUMTM6MjY6MDIuMDAwWiIsCiAgICAiYWRtaXRf
Ym9ybmVfY29kZSI6ICJCMzMiLAogICAgInJlYXNvbl9vZl92aXNpdF9jb2RlIjogbnVsbCwKICAg
ICJsYXN0X25hbWUiOiAic2FudGlhZ28iLAogICAgImZpcnN0X25hbWUiOiAiam9zZSIsCiAgICAi
c2V4IjogIk0iLAogICAgImJpcnRoZGF0ZSI6ICIxOTk3LTAxLTEzVDIzOjAwOjAwLjAwMFoiLAog
ICAgInN0cmVldF9hZGRyZXNzIjogbnVsbCwKICAgICJjaXR5IjogbnVsbCwKICAgICJzdGF0ZSI6
IG51bGwsCiAgICAiemlwX2NvZGUiOiBudWxsLAogICAgInByaXZhdGVfcGhvbmVfbnVtYmVyIjog
bnVsbCwKICAgICJidXNpbmVzc19waG9uZV9udW1iZXIiOiBudWxsLAogICAgIm1haWwiOiBudWxs
LAogICAgInNzbl9udW1iZXIiOiBudWxsLAogICAgImRvY3Rvcl9sYXN0bmFtZSI6IG51bGwsCiAg
ICAiZG9jdG9yX2ZpcnN0bmFtZSI6IG51bGwsCiAgICAiZG9jdG9yX2FkZHJlc3MiOiBudWxsLAog
ICAgImRvY3Rvcl9jaXR5IjogbnVsbCwKICAgICJkb2N0b3JfemlwX2NvZGUiOiBudWxsLAogICAg
ImxvY2F0aW9uQ29kZSI6ICJHT05FIiwKICAgICJwYXRpZW50U3RhdHVzQ29kZSI6ICJHT05FIiwK
ICAgICJwdXRfb25faG9sZCI6IG51bGwsCiAgICAibGFzdF9jYWxsZWRfYXQiOiBudWxsLAogICAg
Imxhc3RfY2FsbGVkX2xvY2F0aW9uIjogbnVsbCwKICAgICJudW1iZXJfb2ZfY2FsbCI6IDAsCiAg
ICAiY3JlYXRlZF9hdCI6ICIyMDIwLTA2LTA0VDEzOjI1OjU1LjAwMFoiLAogICAgInVwZGF0ZWRf
YXQiOiAiMjAyMC0wNi0wNFQxMzoyNjowMi4wMDBaIiwKICAgICJ3b3JrZmxvd19jb2RlIjogbnVs
bCwKICAgICJsYXN0X3dvcmtmbG93X2hpc3RvcnlfaWQiOiBudWxsLAogICAgIm1vZGlmeV9pbmZv
cm1hdGlvbnNfc3RhdHVzIjogMCwKICAgICJnZXN0aW9ubmFpcmVEcm9pdHMiOiBudWxsLAogICAg
ImRyb2l0c19kZWJ1dCI6IG51bGwsCiAgICAiZHJvaXRzX2ZpbiI6IG51bGwsCiAgICAiZGlkUmVh
ZEN2IjogbnVsbCwKICAgICJkaWRVcGRhdGVDdiI6IG51bGwsCiAgICAicmVhZEVycm9yQ3YiOiBu
dWxsLAogICAgInVwZGF0ZUVycm9yQ3YiOiBudWxsLAogICAgImFnZSI6IDIzLAogICAgImxhc3Rf
c3RhdHVzX3VwZGF0ZSI6ICIyMDIwLTA2LTA0VDEzOjI2OjAyLjAwMFoiLAogICAgInN0dWRpZXMi
OiBbXQp9</inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Accept message if &quot;$(&apos;patient_id&apos;)&quot; does not equal null or &apos;&apos;</name>
            <data>
              <entry>
                <string>Field</string>
                <string>$(&apos;patient_id&apos;)</string>
              </entry>
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>0</string>
              </entry>
              <entry>
                <string>Values</string>
                <list>
                  <string>null</string>
                  <string>&apos;&apos;</string>
                </list>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if($(&apos;patient_id&apos;) != null &amp;&amp; $(&apos;patient_id&apos;) != &apos;&apos;) {
	return true;
}
return false;</script>
            <operator>NONE</operator>
          </rule>
          <rule>
            <sequenceNumber>1</sequenceNumber>
            <name>Accept message if &quot;$(&apos;nextStep&apos;)&quot; equals &apos;ADMITTED&apos; or &apos;STUDY_DONE&apos; or &apos;BILLING_DONE&apos;</name>
            <data>
              <entry>
                <string>Field</string>
                <string>$(&apos;nextStep&apos;)</string>
              </entry>
              <entry>
                <string>Name</string>
                <string>Message Header - Message Type - Trigger Event (MSH.9.2)</string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string>msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString()</string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>1</string>
              </entry>
              <entry>
                <string>Values</string>
                <list>
                  <string>&apos;ADMITTED&apos;</string>
                  <string>&apos;STUDY_DONE&apos;</string>
                  <string>&apos;BILLING_DONE&apos;</string>
                </list>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if($(&apos;nextStep&apos;) == &apos;ADMITTED&apos; || $(&apos;nextStep&apos;) == &apos;STUDY_DONE&apos; || $(&apos;nextStep&apos;) == &apos;BILLING_DONE&apos;) {
	return true;
}
return false;</script>
            <operator>AND</operator>
          </rule>
        </rules>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.4.2">
      <metaDataId>97</metaDataId>
      <name>Check if study is already DONE  or WAITING  Before Replace Studies</name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>true</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <host>http://localhost/beacore/studies</host>
        <useProxyServer>false</useProxyServer>
        <proxyAddress></proxyAddress>
        <proxyPort></proxyPort>
        <method>get</method>
        <headers class="linked-hash-map">
          <entry>
            <string>Authorization</string>
            <list>
              <string>Bearer ${accessToken}</string>
            </list>
          </entry>
        </headers>
        <parameters class="linked-hash-map">
          <entry>
            <string>accessionNumber</string>
            <list>
              <string>${accession_number}</string>
            </list>
          </entry>
          <entry>
            <string>instanceUid</string>
            <list>
              <string>${study_instance_uid}</string>
            </list>
          </entry>
          <entry>
            <string>patientId</string>
            <list>
              <string>${patient_id}</string>
            </list>
          </entry>
        </parameters>
        <responseXmlBody>false</responseXmlBody>
        <responseParseMultipart>true</responseParseMultipart>
        <responseIncludeMetadata>false</responseIncludeMetadata>
        <responseBinaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</responseBinaryMimeTypes>
        <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
        <multipart>false</multipart>
        <useAuthentication>false</useAuthentication>
        <authenticationType>Basic</authenticationType>
        <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
        <username></username>
        <password></password>
        <content></content>
        <contentType>text/plain</contentType>
        <dataTypeBinary>false</dataTypeBinary>
        <charset>UTF-8</charset>
        <socketTimeout>30000</socketTimeout>
      </properties>
      <transformer version="3.4.2">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>accession_number</name>
            <script>var mapping;

try {
	mapping = $(&apos;studies&apos;)[0].accession_number; 
} catch (e) {
	logger.error(e);
	mapping = &apos;&apos;;
}

channelMap.put(&apos;accession_number&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
            <type>Mapper</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>accession_number</string>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>$(&apos;studies&apos;)[0].accession_number</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>isGlobal</string>
                <string>channel</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>1</sequenceNumber>
            <name>study_instance_uid</name>
            <script>var mapping;

try {
	mapping = $(&apos;studies&apos;)[0].instance_uid; 
} catch (e) {
	logger.error(e);
	mapping = &apos;&apos;;
}

channelMap.put(&apos;study_instance_uid&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
            <type>Mapper</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>study_instance_uid</string>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>$(&apos;studies&apos;)[0].instance_uid</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>isGlobal</string>
                <string>channel</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>Test study status</name>
            <script>/*  permet de savoir s&apos;il y  a des RDV a transformer en examens  via l&apos;API REPLACE STUDIES */ 
 
var do_replace_studies = &apos;OK&apos;;
var result= null

var responseStatusLine = $(&apos;responseStatusLine&apos;);
var responseStatusCode = parseInt(responseStatusLine.split(&apos; &apos;)[1], 10);
// var responseStatusMessage = responseStatusLine.substr(responseStatusLine.indexOf(&apos; &apos;)).trim();
     
try {
      result = checkResponse( &apos;PARSE&apos; ,&apos;Find Check if study done&apos;, &apos;http://localhost/beacore/studies&apos;,&apos;GET&apos;,responseStatusCode, msg)
          
      if ( result ==&apos;found&apos;) {
          if(msg[&apos;studies&apos;][0][&apos;study_status_code&apos;] == &apos;DONE&apos;  ) {
		          do_replace_studies = &apos;KO&apos;;
       	}
       }

} catch(e) {
	logger.error(e);
}
 
channelMap.put(&apos;do_replace_studies&apos;, do_replace_studies);</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>/*  permet de savoir s&apos;il y  a des RDV a transformer en examens  via l&apos;API REPLACE STUDIES */ 
 
var do_replace_studies = &apos;OK&apos;;
var result= null

var responseStatusLine = $(&apos;responseStatusLine&apos;);
var responseStatusCode = parseInt(responseStatusLine.split(&apos; &apos;)[1], 10);
// var responseStatusMessage = responseStatusLine.substr(responseStatusLine.indexOf(&apos; &apos;)).trim();
     
try {
      result = checkResponse( &apos;PARSE&apos; ,&apos;Find Check if study done&apos;, &apos;http://localhost/beacore/studies&apos;,&apos;GET&apos;,responseStatusCode, msg)
          
      if ( result ==&apos;found&apos;) {
          if(msg[&apos;studies&apos;][0][&apos;study_status_code&apos;] == &apos;DONE&apos;  ) {
		          do_replace_studies = &apos;KO&apos;;
       	}
       }

} catch(e) {
	logger.error(e);
}
 
channelMap.put(&apos;do_replace_studies&apos;, do_replace_studies);</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64">ewogICAgInN0dWRpZXMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDIs
CiAgICAgICAgICAgICAgICAiYWNjZXNzaW9uX251bWJlciI6ICIiLAogICAgICAgICAgICAgICAg
InN0dWR5X2luc3RhbmNlX3VpZCI6IG51bGwsCiAgICAgICAgICAgICAgICAicGF0aWVudF9pZCI6
IDM5NSwKICAgICAgICAgICAgICAgICJtb3ZlbWVudF9pZCI6IG51bGwsCiAgICAgICAgICAgICAg
ICAic2NoZWR1bGVkX2RhdGV0aW1lIjogIjIwMjAtMDYtMTFUMTU6MDA6MDAuMDAwWiIsCiAgICAg
ICAgICAgICAgICAibW9kYWxpdHlfY29kZSI6IG51bGwsCiAgICAgICAgICAgICAgICAic3R1ZHlf
dHlwZV9jb2RlIjogIkFDUUgwMDMiLAogICAgICAgICAgICAgICAgImxvY2F0aW9uX2NvZGUiOiBu
dWxsLAogICAgICAgICAgICAgICAgInN0dWR5X3N0YXR1c19jb2RlIjogIkRPTkUiLAogICAgICAg
ICAgICAgICAgImRvY3RvbGliX29yZ2FuaXphdGlvbl9rZXkiOiBudWxsLAogICAgICAgICAgICAg
ICAgImNyZWF0ZWRfYXQiOiAiMjAyMC0wNi0wM1QxMzo0Njo0OS4wMDBaIiwKICAgICAgICAgICAg
ICAgICJ1cGRhdGVkX2F0IjogIjIwMjAtMDYtMTJUMTE6MTI6MTIuMDAwWiIsCiAgICAgICAgICAg
ICAgICAib3JpZ2luIjogbnVsbCwKICAgICAgICAgICAgICAgICJkdXJhdGlvbiI6IG51bGwKICAg
ICAgICAgICAgfQogICAgICAgIF0KICAgIH0=</inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Accept message if &quot;$(&apos;studies&apos;)&quot; exists</name>
            <data>
              <entry>
                <string>Field</string>
                <string>$(&apos;studies&apos;)</string>
              </entry>
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>2</string>
              </entry>
              <entry>
                <string>Values</string>
                <list/>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if($(&apos;studies&apos;).length &gt; 0) {
	return true;
}
return false;</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.4.2">
      <metaDataId>101</metaDataId>
      <name>Replace Appointments by Studies</name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>true</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <host>http://localhost/beacore/studies/replaceStudies/</host>
        <useProxyServer>false</useProxyServer>
        <proxyAddress></proxyAddress>
        <proxyPort></proxyPort>
        <method>post</method>
        <headers class="linked-hash-map">
          <entry>
            <string>Authorization</string>
            <list>
              <string>Bearer ${accessToken}</string>
            </list>
          </entry>
        </headers>
        <parameters class="linked-hash-map"/>
        <responseXmlBody>false</responseXmlBody>
        <responseParseMultipart>true</responseParseMultipart>
        <responseIncludeMetadata>false</responseIncludeMetadata>
        <responseBinaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</responseBinaryMimeTypes>
        <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
        <multipart>false</multipart>
        <useAuthentication>false</useAuthentication>
        <authenticationType>Digest</authenticationType>
        <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
        <username></username>
        <password></password>
        <content>${message.transformedData}</content>
        <contentType>application/json</contentType>
        <dataTypeBinary>false</dataTypeBinary>
        <charset>UTF-8</charset>
        <socketTimeout>30000</socketTimeout>
      </properties>
      <transformer version="3.4.2">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>Studies to replace Array</name>
            <script>var mapping= &apos;&apos;;

var studiesToReplace = []

// creation ou mise à jours  d&apos;un examen dans STUDY 
// de toutes les occurences d&apos;examens trouvées dans le même message

// le patient a été accueilli sur la borne et a numérisé ces documents 
// avec le study_ID trouvé en dans la tble STUDY pour le status code = SCHEDULED (précédent créé par le SIU12)

/* REPLACE STUDY recherche le RDV avec l&apos;ACCESSION_NUMBER seulement 
s&apos;il ne le trouve pas il recherche avec l&apos;ID patient et la date de l&apos;examen
en utilisant un fourchette de = ou - 2 heures.FIXME:
*/


//
// après accueil RIS (ORM) de nouveaux accession_number sont fournis 

// on crée de nouvelles lignes d&apos;examen avec le status &quot;WAITING&quot;
// et tous les objets précédenemt rattachés sur le study_id utilisé pour l&apos;accueil par la borne 
// sont rattachés maintenant au nouvelles lignes dans STUDY.
// les lignes SCHEDULED ( rendez-vouss)  passent a DONE  et sont maintenant remplacé par les examens.


try{
	
for (var i=0; i &lt; $(&apos;studies&apos;).length; i++ ) {

// l&apos;PAI replaceStudies , n&apos;accepte pas des valeurs &apos;&apos; dans certaint champ, il faut le remettre à NULL

		modality_code = null
		location_code = null
		origin = null
		duration = null
		
		if ( $(&apos;studies&apos;)[i].modality_code != &apos;&apos; ) {
			modality_code =  $(&apos;studies&apos;)[i].modality_code
		}
		
		if ( $(&apos;studies&apos;)[i].location_code != &apos;&apos; ) {
			location_code =  $(&apos;studies&apos;)[i].location_code
		}
		
		if ( $(&apos;studies&apos;)[i].origin != &apos;&apos; ) {
			origin =  $(&apos;studies&apos;)[i].origin
		}
		
		
		if ( $(&apos;studies&apos;)[i].duration != &apos;&apos; ) {
			duration =  $(&apos;studies&apos;)[i].duration
		}



	studiesToReplace.push({
	 	&quot;patient_id&quot;:		 	$(&apos;patient_id&apos;),
		&quot;movement_id&quot;: null  ,     // non utilisé  pour l&apos;instant -- &quot;movement_id&quot;: 	 	$(&apos;visit_id&apos;) ,
		&quot;accession_number&quot;:  	$(&apos;studies&apos;)[i].accession_number,
		&quot;study_instance_uid&quot;:   	$(&apos;studies&apos;)[i].instance_uid,        // ATENTION variable obligaroire dans l&apos;API
		&quot;scheduled_datetime&quot;:    $(&apos;studies&apos;)[i].scheduled_datetime,
		&quot;modality_code&quot;:   		modality_code,
		&quot;study_type_code&quot;: 		$(&apos;studies&apos;)[i].study_type_code,  
		&quot;shift_code&quot;: 			$(&apos;studies&apos;)[i].shift_code, 
		&quot;location_code&quot;:  		location_code,  
		&quot;study_status_code&quot;:   	$(&apos;studies&apos;)[i].study_status_code,  // WAITING  
		&quot;origin&quot;:  			origin,
		&quot;duration&quot;:  			duration,
		&quot;study_enum&quot;:	         &quot;ST&quot; // appointment
	})
 } 



tmp = studiesToReplace	  
mapping = JSON.stringify(tmp); 

/// debug logger.info(&apos;Alimentation Bea Replace studies :&apos; + mapping )

channelMap.put(&apos;data_replace_studies&apos;, validate( mapping , &apos;&apos;, new Array()));


} catch (e) {
	logger.error(e);
	mapping = &apos;&apos;
}</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>var mapping= &apos;&apos;;

var studiesToReplace = []

// creation ou mise à jours  d&apos;un examen dans STUDY 
// de toutes les occurences d&apos;examens trouvées dans le même message

// le patient a été accueilli sur la borne et a numérisé ces documents 
// avec le study_ID trouvé en dans la tble STUDY pour le status code = SCHEDULED (précédent créé par le SIU12)

/* REPLACE STUDY recherche le RDV avec l&apos;ACCESSION_NUMBER seulement 
s&apos;il ne le trouve pas il recherche avec l&apos;ID patient et la date de l&apos;examen
en utilisant un fourchette de = ou - 2 heures.FIXME:
*/


//
// après accueil RIS (ORM) de nouveaux accession_number sont fournis 

// on crée de nouvelles lignes d&apos;examen avec le status &quot;WAITING&quot;
// et tous les objets précédenemt rattachés sur le study_id utilisé pour l&apos;accueil par la borne 
// sont rattachés maintenant au nouvelles lignes dans STUDY.
// les lignes SCHEDULED ( rendez-vouss)  passent a DONE  et sont maintenant remplacé par les examens.


try{
	
for (var i=0; i &lt; $(&apos;studies&apos;).length; i++ ) {

// l&apos;PAI replaceStudies , n&apos;accepte pas des valeurs &apos;&apos; dans certaint champ, il faut le remettre à NULL

		modality_code = null
		location_code = null
		origin = null
		duration = null
		
		if ( $(&apos;studies&apos;)[i].modality_code != &apos;&apos; ) {
			modality_code =  $(&apos;studies&apos;)[i].modality_code
		}
		
		if ( $(&apos;studies&apos;)[i].location_code != &apos;&apos; ) {
			location_code =  $(&apos;studies&apos;)[i].location_code
		}
		
		if ( $(&apos;studies&apos;)[i].origin != &apos;&apos; ) {
			origin =  $(&apos;studies&apos;)[i].origin
		}
		
		
		if ( $(&apos;studies&apos;)[i].duration != &apos;&apos; ) {
			duration =  $(&apos;studies&apos;)[i].duration
		}



	studiesToReplace.push({
	 	&quot;patient_id&quot;:		 	$(&apos;patient_id&apos;),
		&quot;movement_id&quot;: null  ,     // non utilisé  pour l&apos;instant -- &quot;movement_id&quot;: 	 	$(&apos;visit_id&apos;) ,
		&quot;accession_number&quot;:  	$(&apos;studies&apos;)[i].accession_number,
		&quot;study_instance_uid&quot;:   	$(&apos;studies&apos;)[i].instance_uid,        // ATENTION variable obligaroire dans l&apos;API
		&quot;scheduled_datetime&quot;:    $(&apos;studies&apos;)[i].scheduled_datetime,
		&quot;modality_code&quot;:   		modality_code,
		&quot;study_type_code&quot;: 		$(&apos;studies&apos;)[i].study_type_code,  
		&quot;shift_code&quot;: 			$(&apos;studies&apos;)[i].shift_code, 
		&quot;location_code&quot;:  		location_code,  
		&quot;study_status_code&quot;:   	$(&apos;studies&apos;)[i].study_status_code,  // WAITING  
		&quot;origin&quot;:  			origin,
		&quot;duration&quot;:  			duration,
		&quot;study_enum&quot;:	         &quot;ST&quot; // appointment
	})
 } 



tmp = studiesToReplace	  
mapping = JSON.stringify(tmp); 

/// debug logger.info(&apos;Alimentation Bea Replace studies :&apos; + mapping )

channelMap.put(&apos;data_replace_studies&apos;, validate( mapping , &apos;&apos;, new Array()));


} catch (e) {
	logger.error(e);
	mapping = &apos;&apos;
}</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64">eyAJIk1TSCI6IHsKCQkic2VuZGluZ0FwcGxpY2F0aW9uX25hbWVzcGFjZUlkIjogbnVsbCwgCgkJ
InNlbmRpbmdGYWNpbGl0eV9uYW1lc3BhY2VJZCI6IG51bGwsCgkJImRhdGVPclRpbWVPZk1lc3Nh
Z2VfdGltZU9mQW5FdmVudCI6IG51bGwsIAoJCSJtZXNzYWdlVHlwZSI6IG51bGwsIAoJCSJtZXNz
YWdlVHlwZV90cmlnZ2VyRXZlbnQiOiBudWxsLCAKCQkibWVzc2FnZUNvbnRyb2xJZF92YWx1ZSI6
IG51bGwsIAoJCSJhY2NlcHRBY2tub3dsZWRnbWVudFR5cGVfdmFsdWUiOiBudWxsLCAKCQkiYXBw
bGljYXRpb25BY2tub3dsZWRnbWVudFR5cGVfdmFsdWUiOiBudWxsLCAKCQkic2VxdWVuY2VOdW1i
ZXJfdmFsdWUiOiBudWxsIAoJfSwKCSJQSUQiOiB7CgkJInBhdGllbnRfaGw3X2lkZW50aWZpZXIi
OiBudWxsLCAKCQkicGF0aWVudF9pZGVudGlmaWVyTGlzdCI6IG51bGwsIAoJCSJwYXRpZW50X2xh
c3RfbmFtZSI6IG51bGwsIAoJCSJwYXRpZW50X2ZpcnN0X25hbWUiOiBudWxsLCAKCQkicGF0aWVu
dF9iaXJ0aGRhdGUiOiBudWxsLCAKCQkicGF0aWVudF9zZXgiOiBudWxsLCAKCQkicGF0aWVudF9z
dHJlZXRfYWRkcmVzcyI6IG51bGwsIAoJCSJwYXRpZW50X2NpdHkiOiBudWxsLCAKCQkicGF0aWVu
dF9zdGF0ZSI6IG51bGwsIAoJCSJwYXRpZW50X3ppcF9jb2RlIjogbnVsbCwgCgkJInBhdGllbnRf
cHJpdmF0ZV9waG9uZV9udW1iZXIiOiBudWxsLCAKCQkicGF0aWVudF9idXNpbmVzc19waG9uZV9u
dW1iZXIiOiBudWxsLCAKCQkicGF0aWVudF9tYWlsIjogbnVsbAoJfSwKICAgICJNUkciOiB7CgkJ
InByaW9yUGF0aWVudElkZW50aWZpZXJMaXN0X2lkIjogbnVsbCwKCQkicHJpb3JQYXRpZW50TmFt
ZV9mYW1pbHlMYXN0TmFtZSI6IG51bGwsCgkJInByaW9yUGF0aWVudE5hbWVfZ2l2ZW5OYW1lIiA6
IG51bGwKCX0sCgkiUFYiOiB7CgkJInZpc2l0X251bWJlciIgOiBudWxsLAoJCSJleHBlY3RlZF9h
ZG1pdF9kYXRldGltZSI6IG51bGwKCX0sCgkiSU4iOiB7CgkJImluc3VyYW5jZV90eXBlIjogIG51
bGwsCgkJIm5pciI6IG51bGwsCgkJImFtb19jb2RlX3JlZ2ltZV9jYWlzc2VfY2VudHJlIjogbnVs
bCwKCQkiYW1vX2Ryb2l0X2RlYnV0IjogbnVsbCwKCQkiYW1vX2Ryb2l0X2ZpbiI6IG51bGwKCX0s
IAoJIlJPTCI6IHsKCQkibGFzdF9uYW1lIjogIG51bGwsCgkJImZpcnN0X25hbWUiOiAgbnVsbCwK
CQkicnBwc19udW1iZXIiOiBudWxsLAoJCSJzdHJlZXQiOiAgCW51bGwsCgkJImNpdHkiOiAgbnVs
bCwKCQkiemlwX2NvZGUiOiAgbnVsbCwKCQkicGhvbmVfbnVtYmVyIjogbnVsbAoJfSwgCgkiU1RV
RElFUyI6IFt7CgkJImFjY2Vzc2lvbl9udW1iZXIiOiAgCW51bGwgLAoJCSJpbnN0YW5jZV91aWQi
OiAgCQludWxsICwKCQkic2NoZWR1bGVkX2RhdGV0aW1lIjogCW51bGwgLAkKCQkibG9jYXRpb25f
Y29kZSI6ICAgIAludWxsICwJICAgCgkJImxvY2F0aW9uX2xhYmVsIjogCSAJbnVsbCAsCQoJCSJz
dGF0dXNfY29kZSI6ICAJCW51bGwgLAkKCQkic3R1ZHlfdHlwZV9jb2RlIjogCSAJbnVsbCAsCQoJ
CSJzdHVkeV90eXBlX3RleHQiOgkgCW51bGwgLAkKCQkibW9kYWxpdHlfY29kZSI6IAkJbnVsbCAs
CQoJCSJtb2RhbGl0eV90ZXh0IjogCQludWxsICwJCgkJIm9yaWdpbiI6IAkJCQludWxsICwKCQki
ZHVyYXRpb24iOiAJCQludWxsCiAgICAgfV0sCgkibmV4dFN0ZXAiOiBudWxsIAp9</inboundTemplate>
        <outboundTemplate encoding="base64">W3sKCgkicGF0aWVudF9pZCI6IG51bGwsCiAgICAibW92ZW1lbnRfaWQiOiBudWxsLAogICAgImFj
Y2Vzc2lvbl9udW1iZXIiOiBudWxsLAogICAgInN0dWR5X2luc3RhbmNlX3VpZCI6ICBudWxsLAoJ
InNjaGVkdWxlZF9kYXRldGltZSI6IG51bGwsCgkibW9kYWxpdHlfY29kZSI6IG51bGwsCgkic3R1
ZHlfdHlwZV9jb2RlIjogIG51bGwsCgkic2hpZnRfY29kZSI6ICBudWxsLAoJImxvY2F0aW9uX2Nv
ZGUiOiBudWxsLAoJInN0dWR5X3N0YXR1c19jb2RlIjogbnVsbCwKCSJvcmlnaW4iOiBudWxsLAoJ
ImR1cmF0aW9uIjogbnVsbCwKICAgICJzdHVkeV9lbnVtIjoiU1QiCn1dCg==</outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>Check replace studies</name>
            <script>var resultReplaceStudies = null
var responseStatusLine = $(&apos;responseStatusLine&apos;);
var responseStatusCode = parseInt(responseStatusLine.split(&apos; &apos;)[1], 10);
// var responseStatusMessage = responseStatusLine.substr(responseStatusLine.indexOf(&apos; &apos;)).trim();
     
try {
      resultReplaceStudies = checkResponse( &apos;PARSE&apos; ,&apos;Replace Studies&apos;, &apos;http://localhost/beacore/studies/replaceStudies/&apos;,&apos;POST&apos;,responseStatusCode, msg)
     
} catch(e) {
	logger.error(e);
}</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>var resultReplaceStudies = null
var responseStatusLine = $(&apos;responseStatusLine&apos;);
var responseStatusCode = parseInt(responseStatusLine.split(&apos; &apos;)[1], 10);
// var responseStatusMessage = responseStatusLine.substr(responseStatusLine.indexOf(&apos; &apos;)).trim();
     
try {
      resultReplaceStudies = checkResponse( &apos;PARSE&apos; ,&apos;Replace Studies&apos;, &apos;http://localhost/beacore/studies/replaceStudies/&apos;,&apos;POST&apos;,responseStatusCode, msg)
     
} catch(e) {
	logger.error(e);
}</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64">ewogICAgImVyciI6ICJQYXRpZW50IG5vdCBmb3VuZDogMiIKfQ==</inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Is Study Ordered -  ADMITTED OR CANCELED</name>
            <data>
              <entry>
                <string>Script</string>
                <string>//  on va créer un examen dans la table STUDY  uniquement si dans le MAPPING  précédement on a identifié
// que pour le patient l&apos;exanmen a été programmé : Accueil RIS 
// study_status_code = WAITING  nexstep=&apos;ADMITTED&apos;
// study_status_code = CANCELED  nexstep=CANCELED (on met le RDV SCHEDULED A DONE)

if  (
     // pour pouvoir créer un renregistrement des STUDY il faut s&apos;assurer  
     // que la creation du patient precedement s&apos;est bien passé
     $(&apos;patient_id&apos;) &amp;&amp; $(&apos;patient_id&apos;) != null 
     &amp;&amp;
     // piloté par le mapping du channel editeur  avec OCR1 et ORC5
     ( $(&apos;nextStep&apos;) == &apos;ADMITTED&apos;  || $(&apos;nextStep&apos;) == &apos;CANCELED&apos;)          //  attention replace studies met en canceled les SCHEDULED       || 
     &amp;&amp;
     //  dans la destination précédente on regarde si les examens sont déjà à DONE ou WAITING et on évalue la variable do_replace_studies
     // pour savoir si on doit faire ou pas le replace studies. 
     $(&apos;do_replace_studies&apos;) == &apos;OK&apos;
     /* -- la creation d&apos;un examen dans le rIS peut survenir alors que le patient est déjà  accueilli sur Bea Manager
        &amp;&amp;   
     ( $(&apos;patient_status_code&apos;) == &apos;NOT_ADMITTED&apos; || 
       $(&apos;patient_status_code&apos;) == &apos;ADMISSION_IN_PROGRESS_FROM_TERM&apos; || 
       $(&apos;patient_status_code&apos;) == &apos;WAITING_ADMISSION_FROM_SECRETARY&apos; || 
       $(&apos;patient_status_code&apos;) == &apos;ADMISSION_IN_PROGRESS_FROM_SEC&apos; || 
        $(&apos;patient_status_code&apos;) == &apos;ADMISSION_IN_PROGRESS_FROM_SEC&apos; || 
       $(&apos;patient_status_code&apos;) == &apos;GONE&apos; 
       ) 
       */
    )
    
  {
	return true;
}
return false;



/* debug
logger.info ( &quot;messagetype :&quot; + $(&apos;messageHeader&apos;).messageType );
logger.info ( &quot;stasus :&quot; + $(&apos;studies&apos;)[0].study_status_code );
logger.info ( &quot;patient lenght :&quot; + $(&apos;patient_id&apos;).length );
logger.info ( &quot;nextstep :&quot; + $(&apos;nextStep&apos;)  );
*/</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>//  on va créer un examen dans la table STUDY  uniquement si dans le MAPPING  précédement on a identifié
// que pour le patient l&apos;exanmen a été programmé : Accueil RIS 
// study_status_code = WAITING  nexstep=&apos;ADMITTED&apos;
// study_status_code = CANCELED  nexstep=CANCELED (on met le RDV SCHEDULED A DONE)

if  (
     // pour pouvoir créer un renregistrement des STUDY il faut s&apos;assurer  
     // que la creation du patient precedement s&apos;est bien passé
     $(&apos;patient_id&apos;) &amp;&amp; $(&apos;patient_id&apos;) != null 
     &amp;&amp;
     // piloté par le mapping du channel editeur  avec OCR1 et ORC5
     ( $(&apos;nextStep&apos;) == &apos;ADMITTED&apos;  || $(&apos;nextStep&apos;) == &apos;CANCELED&apos;)          //  attention replace studies met en canceled les SCHEDULED       || 
     &amp;&amp;
     //  dans la destination précédente on regarde si les examens sont déjà à DONE ou WAITING et on évalue la variable do_replace_studies
     // pour savoir si on doit faire ou pas le replace studies. 
     $(&apos;do_replace_studies&apos;) == &apos;OK&apos;
     /* -- la creation d&apos;un examen dans le rIS peut survenir alors que le patient est déjà  accueilli sur Bea Manager
        &amp;&amp;   
     ( $(&apos;patient_status_code&apos;) == &apos;NOT_ADMITTED&apos; || 
       $(&apos;patient_status_code&apos;) == &apos;ADMISSION_IN_PROGRESS_FROM_TERM&apos; || 
       $(&apos;patient_status_code&apos;) == &apos;WAITING_ADMISSION_FROM_SECRETARY&apos; || 
       $(&apos;patient_status_code&apos;) == &apos;ADMISSION_IN_PROGRESS_FROM_SEC&apos; || 
        $(&apos;patient_status_code&apos;) == &apos;ADMISSION_IN_PROGRESS_FROM_SEC&apos; || 
       $(&apos;patient_status_code&apos;) == &apos;GONE&apos; 
       ) 
       */
    )
    
  {
	return true;
}
return false;



/* debug
logger.info ( &quot;messagetype :&quot; + $(&apos;messageHeader&apos;).messageType );
logger.info ( &quot;stasus :&quot; + $(&apos;studies&apos;)[0].study_status_code );
logger.info ( &quot;patient lenght :&quot; + $(&apos;patient_id&apos;).length );
logger.info ( &quot;nextstep :&quot; + $(&apos;nextStep&apos;)  );
*/</script>
            <operator>NONE</operator>
          </rule>
          <rule>
            <sequenceNumber>1</sequenceNumber>
            <name>Accept message if &quot;msg[&apos;MSH&apos;][&apos;messageType&apos;]&quot; does not equal &apos;ADT&apos;</name>
            <data>
              <entry>
                <string>Field</string>
                <string>msg[&apos;MSH&apos;][&apos;messageType&apos;]</string>
              </entry>
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>0</string>
              </entry>
              <entry>
                <string>Values</string>
                <list>
                  <string>&apos;ADT&apos;</string>
                </list>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if(msg[&apos;MSH&apos;][&apos;messageType&apos;] != &apos;ADT&apos;) {
	return true;
}
return false;</script>
            <operator>AND</operator>
          </rule>
          <rule>
            <sequenceNumber>2</sequenceNumber>
            <name>Accept message if &quot;msg[&apos;MSH&apos;][&apos;messageType_triggerEvent&apos;]&quot; does not equal &apos;A01&apos;</name>
            <data>
              <entry>
                <string>Field</string>
                <string>msg[&apos;MSH&apos;][&apos;messageType_triggerEvent&apos;]</string>
              </entry>
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>0</string>
              </entry>
              <entry>
                <string>Values</string>
                <list>
                  <string>&apos;A01&apos;</string>
                </list>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if(msg[&apos;MSH&apos;][&apos;messageType_triggerEvent&apos;] != &apos;A01&apos;) {
	return true;
}
return false;</script>
            <operator>AND</operator>
          </rule>
        </rules>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.4.2">
      <metaDataId>126</metaDataId>
      <name>Upsert Physician Doctor for each studies</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>true</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <script>// medecin radiologue sur les examens  qui  ont le même accession _number

var tmp = { study: {} }

 
var tmp_response =&quot;&quot;
tmp_error_message =&quot;&quot;
var returnedValues= {}
 
var physician_doctor_id = null

var study_test = {}

// creation ou mise à jours  d&apos;un rendez-vous dans STUDY 
// de toutes les occurences d&apos;examens trouvées dans le même message

for (var i=0; i&lt;$(&apos;studies&apos;).length; i++ ) {


//  dans la table STUDY certaines valeurs ne peuvent contenir &apos;&apos; car il ya des ForeingKey
// dans le cas ou elles sont vides on met NULL

		tmp[&apos;study&apos;][&apos;patient_id&apos;] 		=  $(&apos;patient_id&apos;)
		tmp[&apos;study&apos;][&apos;appointment_number&apos;] =  $(&apos;studies&apos;)[i].appointment_number
		tmp[&apos;study&apos;][&apos;accession_number&apos;] 	=  $(&apos;studies&apos;)[i].accession_number
		tmp[&apos;study&apos;][&apos;instance_uid&apos;] 		=  $(&apos;studies&apos;)[i].instance_uid
		tmp[&apos;study&apos;][&apos;physician_doctor&apos;]   =  $(&apos;studies&apos;)[i].physician_doctor


			
		
		if  ( $(&apos;studies&apos;)[i].physician_doctor ) { // pour certains editeur ces données n&apos;existent pas  
			
			if  ( $(&apos;studies&apos;)[i].physician_doctor.last_name      &amp;&amp;
		           $(&apos;studies&apos;)[i].physician_doctor.last_name  != &apos;&apos; ) {
           
				// var returnedValues= {}
				returnedResponse = router.routeMessage(&apos;Upsert Physician Doctor&apos;,  JSON.stringify(tmp) )  ;
				 
				// returnedValues= JSON.parse(returnedResponse.getMessage())
				 
		      	if  (returnedResponse.getStatus() ==ERROR &amp;&amp; tmp_response == SENT){
		      		tmp_response = ERROR
		      		tmp_error_message= tmp_error_message + JSON.stringify(returnedResponse.getMessage())
		      	}else{
		      		tmp_response = SENT
					returnedValues= JSON.parse(returnedResponse.getMessage())
					channelMap.put(&apos;studiesIdListUpdated&apos;, validate(returnedValues.studiesIdList, &apos;&apos;, new Array()));
					// return Response( error_status,  JSON.stringify( {&quot;error&quot;: error, &quot;error_message&quot;: error_message ,&quot;studiesIdList&quot;: studiesIdList } ) ) ;
		      	}
           } else {
           	// logger.info(&apos;upsert prescibing doctor filtered&apos;)
           	tmp_response=SENT
           	physician_doctor_id = null
           }

        }
}


return Response(tmp_response, tmp_error_message )




</script>
      </properties>
      <transformer version="3.4.2">
        <steps/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64">eyAKCSJwYXRpZW50IjogeyAKIAkJImlkIjogIiIsCgkJImhsN19wYXRpZW50X3BhdGllbnRfaWQi
OiAiIiwKCQkiaGw3X3BhdGllbnRfaWRlbnRpZmllckxpc3QiOlt7CgkJCQkiaWQiOiAiIiwKCQkJ
CSJhc3NpZ25pbmdfYXV0aG9yaXR5X25hbWVzcGFjZV9pZCI6ICIiLAoJCQkJInR5cGVfY29kZV9p
ZCI6ICJQSSIKCQl9XSwKCQkibGFzdF9uYW1lIjogIiIsCgkJImZpcnN0X25hbWUiOiAiIiwKCQki
YmlydGhkYXRlIjogIiIKICAgICB9LAoJInN0dWR5IjogeyAKCQkJCSJhcHBvaW50bWVudF9udW1i
ZXIiOiAiIiwKCQkJCSJhY2Nlc3Npb25fbnVtYmVyIjogIiIsCgkJCQkiaW5zdGFuY2VfdWlkIjog
IiIsCgkJCQkicHJlc2NyaWJpbmdfZG9jdG9yIjogewoJCQkJCQkicnBwc19udW1iZXIiOiAiIiwK
CQkJCQkJImxhc3RfbmFtZSI6ICIiLAoJCQkJCQkiZmlyc3RfbmFtZSI6ICIiCgkJCQl9LAoJCQkJ
InBoeXNpY2lhbl9kb2N0b3IiOiB7CgkJCQkJCSJycHBzX251bWJlciI6ICIiLAoJCQkJCQkibGFz
dF9uYW1lIjogIiIsCgkJCQkJCSJmaXJzdF9uYW1lIjogIiIKCQkJCX0KICAJfQp9</outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps/>
        <inboundTemplate encoding="base64">IA==</inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Patient ID existe</name>
            <data>
              <entry>
                <string>Script</string>
                <string>if( $(&apos;patient_id&apos;) &amp;&amp; $(&apos;patient_id&apos;) !=&quot;&quot; &amp;&amp; $(&apos;patient_id&apos;) !=null) {
	return true;
}
return false;</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>if( $(&apos;patient_id&apos;) &amp;&amp; $(&apos;patient_id&apos;) !=&quot;&quot; &amp;&amp; $(&apos;patient_id&apos;) !=null) {
	return true;
}
return false;</script>
            <operator>NONE</operator>
          </rule>
          <rule>
            <sequenceNumber>1</sequenceNumber>
            <name>Studies exists</name>
            <data>
              <entry>
                <string>Script</string>
                <string>if(  $(&apos;studies&apos;).length &gt; 0) {
	return true;
}
return false;</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>if(  $(&apos;studies&apos;).length &gt; 0) {
	return true;
}
return false;</script>
            <operator>AND</operator>
          </rule>
        </rules>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.4.2">
      <metaDataId>106</metaDataId>
      <name>Upsert Prescribing Doctor for each studies</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>true</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <script>// medecin prescripteur sur les examens  qui  ont le même accession _number

var tmp = { study: {} }

 
var tmp_response =&quot;&quot;
tmp_error_message =&quot;&quot;
var returnedValues= {}
 
var prescribing_doctor_id = null;

// creation ou mise à jours  d&apos;un rendez-vous dans STUDY 
// de toutes les occurences d&apos;examens trouvées dans le même message

for (var i=0; i&lt;$(&apos;studies&apos;).length; i++ ) {


//  dans la table STUDY certaines valeurs ne peuvent contenir &apos;&apos; car il ya des ForeingKey
// dans le cas ou elles sont vides on met NULL

		tmp[&apos;study&apos;][&apos;patient_id&apos;] 		=  $(&apos;patient_id&apos;)
		tmp[&apos;study&apos;][&apos;appointment_number&apos;] =  $(&apos;studies&apos;)[i].appointment_number
		tmp[&apos;study&apos;][&apos;accession_number&apos;] 	=  $(&apos;studies&apos;)[i].accession_number
		tmp[&apos;study&apos;][&apos;instance_uid&apos;] 		=  $(&apos;studies&apos;)[i].instance_uid

		tmp[&apos;study&apos;][&apos;prescribing_doctor&apos;] = $(&apos;studies&apos;)[i].prescribing_doctor
		
		if  ( $(&apos;studies&apos;)[i].prescribing_doctor ) { // pour certains editeur ces données n&apos;existent pas  
			
			if  ( $(&apos;studies&apos;)[i].prescribing_doctor.last_name      &amp;&amp;
		           $(&apos;studies&apos;)[i].prescribing_doctor.last_name  != &apos;&apos; ) {
           
				// var returnedValues= {}
				returnedResponse = router.routeMessage(&apos;Upsert Prescribing Doctor&apos;,  JSON.stringify(tmp) )  ;
				 
				// returnedValues= JSON.parse(returnedResponse.getMessage())
				 
		      	if  (returnedResponse.getStatus() ==ERROR &amp;&amp; tmp_response == SENT){
		      		tmp_response = ERROR
		      		tmp_error_message= tmp_error_message + JSON.stringify(returnedResponse.getMessage())
		      	}else{
		      		tmp_response = SENT
					returnedValues= JSON.parse(returnedResponse.getMessage())
					channelMap.put(&apos;studiesIdListUpdated&apos;, validate(returnedValues.studiesIdList, &apos;&apos;, new Array()));
					// return Response( error_status,  JSON.stringify( {&quot;error&quot;: error, &quot;error_message&quot;: error_message ,&quot;studiesIdList&quot;: studiesIdList } ) ) ;
		      	}
           } else {
           	// logger.info(&apos;upsert prescibing doctor filtered&apos;)
           	tmp_response=SENT
           	prescribing_doctor_id = null
           }

        }
}


return Response(tmp_response, tmp_error_message )




</script>
      </properties>
      <transformer version="3.4.2">
        <steps/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64">eyAKCSJwYXRpZW50IjogeyAKIAkJImlkIjogIiIsCgkJImhsN19wYXRpZW50X3BhdGllbnRfaWQi
OiAiIiwKCQkiaGw3X3BhdGllbnRfaWRlbnRpZmllckxpc3QiOlt7CgkJCQkiaWQiOiAiIiwKCQkJ
CSJhc3NpZ25pbmdfYXV0aG9yaXR5X25hbWVzcGFjZV9pZCI6ICIiLAoJCQkJInR5cGVfY29kZV9p
ZCI6ICJQSSIKCQl9XSwKCQkibGFzdF9uYW1lIjogIiIsCgkJImZpcnN0X25hbWUiOiAiIiwKCQki
YmlydGhkYXRlIjogIiIKICAgICB9LAoJInN0dWR5IjogeyAKCQkJCSJhcHBvaW50bWVudF9udW1i
ZXIiOiAiIiwKCQkJCSJhY2Nlc3Npb25fbnVtYmVyIjogIiIsCgkJCQkiaW5zdGFuY2VfdWlkIjog
IiIsCgkJCQkicHJlc2NyaWJpbmdfZG9jdG9yIjogewoJCQkJCQkicnBwc19udW1iZXIiOiAiIiwK
CQkJCQkJImxhc3RfbmFtZSI6ICIiLAoJCQkJCQkiZmlyc3RfbmFtZSI6ICIiCgkJCQl9CiAgCX0K
fQ==</outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps/>
        <inboundTemplate encoding="base64">IA==</inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Patient ID existe</name>
            <data>
              <entry>
                <string>Script</string>
                <string>if( $(&apos;patient_id&apos;) &amp;&amp; $(&apos;patient_id&apos;) !=&quot;&quot; &amp;&amp; $(&apos;patient_id&apos;) !=null) {
	return true;
}
return false;</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>if( $(&apos;patient_id&apos;) &amp;&amp; $(&apos;patient_id&apos;) !=&quot;&quot; &amp;&amp; $(&apos;patient_id&apos;) !=null) {
	return true;
}
return false;</script>
            <operator>NONE</operator>
          </rule>
          <rule>
            <sequenceNumber>1</sequenceNumber>
            <name>Studies exists</name>
            <data>
              <entry>
                <string>Script</string>
                <string>if(  $(&apos;studies&apos;).length &gt; 0) {
	return true;
}
return false;</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>if(  $(&apos;studies&apos;).length &gt; 0) {
	return true;
}
return false;</script>
            <operator>AND</operator>
          </rule>
        </rules>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.4.2">
      <metaDataId>99</metaDataId>
      <name>Upsert Documents</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>true</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <script>
var tmp = { MSG:{}, PATIENT:{}, DOCUMENT:{} }

var tmp_response =SENT
var tmp_error_message =&quot;&quot;
var returnedValues= {}
var documentIdList = []

// rattachement de un ou plusieurs document pour un patient ou un examen
if  ( $(&apos;patient_id&apos;) ) {
	for (var i=0; i&lt; $(&apos;documents&apos;).length; i++ ) {

           tmp = { MSG:{}, PATIENT:{}, DOCUMENT:{} }
		
		 tmp[&apos;MSG&apos;][&apos;control_id&apos;] 			= $(&apos;message_control_id&apos;)
		 
 		 tmp[&apos;PATIENT&apos;][&apos;patient_id&apos;] 		= $(&apos;patient_id&apos;)
 		 tmp[&apos;PATIENT&apos;][&apos;last_name&apos;]  	     = $(&apos;patient&apos;).last_name
		 tmp[&apos;PATIENT&apos;][&apos;first_name&apos;]  	     = $(&apos;patient&apos;).first_name
		 tmp[&apos;PATIENT&apos;][&apos;birthdate&apos;]  	     = $(&apos;patient&apos;).birthdate
 
		
		/* le document est rattaché à l&apos;accession number  qui se trouve dans le message du DOCUMENT
		On retrouve le study_ID qui correspond à l&apos;accession number du document reçu lors de l&apos;insertion du document. */

		 tmp[&apos;DOCUMENT&apos;][&apos;linkLevel&apos;] 			= $(&apos;documents&apos;)[i].linkLevel || null&#xd;
		 tmp[&apos;DOCUMENT&apos;][&apos;studyAccNumToLink&apos;]  		= $(&apos;documents&apos;)[i].studyAccNumToLink|| null
		 tmp[&apos;DOCUMENT&apos;][&apos;studyInstanceUid&apos;]  		= $(&apos;documents&apos;)[i].studyInstanceUid|| null
 
           tmp[&apos;DOCUMENT&apos;][&apos;documentTypeCode&apos;]   		= $(&apos;documents&apos;)[i].documentTypeCode || null
		 tmp[&apos;DOCUMENT&apos;][&apos;documentTypeLibelle&apos;]  	= $(&apos;documents&apos;)[i].documentTypeLibelle || null
		 tmp[&apos;DOCUMENT&apos;][&apos;documentContent&apos;]  		= $(&apos;documents&apos;)[i].documentContent|| null
		 tmp[&apos;DOCUMENT&apos;][&apos;targetFormat&apos;]  			= $(&apos;documents&apos;)[i].targetFormat|| null
		 tmp[&apos;DOCUMENT&apos;][&apos;encodedFormat&apos;]  		= $(&apos;documents&apos;)[i].encodedFormat || null
		 tmp[&apos;DOCUMENT&apos;][&apos;externalId&apos;]  		     = $(&apos;documents&apos;)[i].externalId || null
 		 tmp[&apos;DOCUMENT&apos;][&apos;assigningAuthority&apos;]       = $(&apos;documents&apos;)[i].assigningAuthority || null
  		 tmp[&apos;DOCUMENT&apos;][&apos;identifiantTypeCode&apos;]      = $(&apos;documents&apos;)[i].identifiantTypeCode || null
  		 tmp[&apos;DOCUMENT&apos;][&apos;documentDate&apos;]             = $(&apos;documents&apos;)[i].documentDate || null
  		 tmp[&apos;DOCUMENT&apos;][&apos;source&apos;]             		= $(&apos;documents&apos;)[i].source || null
  		 
  		

		  &#xd;
		 
/*	 TODO voir comment on crea des document ype code externes
			     &quot;comment&quot;: &quot;&quot;,
			    &quot;printable&quot;: 0,
			    &quot;icon&quot;: &quot;note-libre.png&quot;,
			    &quot;singlePage&quot;: 0,
			    &quot;expirationTime&quot;: 
		*/
		returnedResponse = router.routeMessage(&apos;Upsert Document&apos;, JSON.stringify(tmp));
	
      	if  (returnedResponse.getStatus() ==ERROR &amp;&amp; tmp_response == SENT){
      		tmp_response = ERROR
      		tmp_error_message= tmp_error_message + JSON.stringify(returnedResponse.getMessage())
      	}else{
      	     tmp_response = SENT
      	     returnedValues= JSON.parse(returnedResponse.getMessage())
      		documentIdList.push ({ &apos;document_id&apos;: returnedValues.document_id } )
      	} 
       }

       channelMap.put(&apos;documentIdList&apos;, documentIdList)
       
	 return Response(tmp_response, tmp_error_message )
}
</script>
      </properties>
      <transformer version="3.4.2">
        <steps/>
        <inboundTemplate encoding="base64">eyAJIk1TSCI6IHsKCQkic2VuZGluZ0FwcGxpY2F0aW9uX25hbWVzcGFjZUlkIjogbnVsbCwgCgkJ
InNlbmRpbmdGYWNpbGl0eV9uYW1lc3BhY2VJZCI6IG51bGwsCgkJImRhdGVPclRpbWVPZk1lc3Nh
Z2VfdGltZU9mQW5FdmVudCI6IG51bGwsIAoJCSJtZXNzYWdlVHlwZSI6IG51bGwsIAoJCSJtZXNz
YWdlVHlwZV90cmlnZ2VyRXZlbnQiOiBudWxsLCAKCQkibWVzc2FnZUNvbnRyb2xJZF92YWx1ZSI6
IG51bGwsIAoJCSJhY2NlcHRBY2tub3dsZWRnbWVudFR5cGVfdmFsdWUiOiBudWxsLCAKCQkiYXBw
bGljYXRpb25BY2tub3dsZWRnbWVudFR5cGVfdmFsdWUiOiBudWxsLCAKCQkic2VxdWVuY2VOdW1i
ZXJfdmFsdWUiOiBudWxsIAoJfSwKCSJQSUQiOiB7CgkJInBhdGllbnRfaGw3X2lkZW50aWZpZXIi
OiBudWxsLCAKCQkicGF0aWVudF9pZGVudGlmaWVyTGlzdCI6IG51bGwsIAoJCSJwYXRpZW50X2xh
c3RfbmFtZSI6IG51bGwsIAoJCSJwYXRpZW50X2ZpcnN0X25hbWUiOiBudWxsLCAKCQkicGF0aWVu
dF9iaXJ0aGRhdGUiOiBudWxsLCAKCQkicGF0aWVudF9zZXgiOiBudWxsLCAKCQkicGF0aWVudF9z
dHJlZXRfYWRkcmVzcyI6IG51bGwsIAoJCSJwYXRpZW50X2NpdHkiOiBudWxsLCAKCQkicGF0aWVu
dF9zdGF0ZSI6IG51bGwsIAoJCSJwYXRpZW50X3ppcF9jb2RlIjogbnVsbCwgCgkJInBhdGllbnRf
cHJpdmF0ZV9waG9uZV9udW1iZXIiOiBudWxsLCAKCQkicGF0aWVudF9idXNpbmVzc19waG9uZV9u
dW1iZXIiOiBudWxsLCAKCQkicGF0aWVudF9tYWlsIjogbnVsbAoJfSwKICAgICJNUkciOiB7CgkJ
InByaW9yUGF0aWVudElkZW50aWZpZXJMaXN0X2lkIjogbnVsbCwKCQkicHJpb3JQYXRpZW50TmFt
ZV9mYW1pbHlMYXN0TmFtZSI6IG51bGwsCgkJInByaW9yUGF0aWVudE5hbWVfZ2l2ZW5OYW1lIiA6
IG51bGwKCX0sCgkiUFYiOiB7CgkJInZpc2l0X251bWJlciIgOiBudWxsLAoJCSJleHBlY3RlZF9h
ZG1pdF9kYXRldGltZSI6IG51bGwKCX0sCgkiSU4iOiB7CgkJImluc3VyYW5jZV90eXBlIjogIG51
bGwsCgkJIm5pciI6IG51bGwsCgkJImFtb19jb2RlX3JlZ2ltZV9jYWlzc2VfY2VudHJlIjogbnVs
bCwKCQkiYW1vX2Ryb2l0X2RlYnV0IjogbnVsbCwKCQkiYW1vX2Ryb2l0X2ZpbiI6IG51bGwKCX0s
IAoJIlJPTCI6IHsKCQkibGFzdF9uYW1lIjogIG51bGwsCgkJImZpcnN0X25hbWUiOiAgbnVsbCwK
CQkicnBwc19udW1iZXIiOiBudWxsLAoJCSJzdHJlZXQiOiAgCW51bGwsCgkJImNpdHkiOiAgbnVs
bCwKCQkiemlwX2NvZGUiOiAgbnVsbCwKCQkicGhvbmVfbnVtYmVyIjogbnVsbAoJfSwgCgkiU1RV
RElFUyI6IFt7CgkJImFjY2Vzc2lvbl9udW1iZXIiOiAgCW51bGwgLAoJCSJpbnN0YW5jZV91aWQi
OiAgCQludWxsICwKCQkic2NoZWR1bGVkX2RhdGV0aW1lIjogCW51bGwgLAkKCQkibG9jYXRpb25f
Y29kZSI6ICAgIAludWxsICwJICAgCgkJImxvY2F0aW9uX2xhYmVsIjogCSAJbnVsbCAsCQoJCSJz
dHVkeV9zdGF0dXNfY29kZSI6ICAJbnVsbCAsCQoJCSJzdHVkeV90eXBlX2NvZGUiOiAJIAludWxs
ICwJCgkJInN0dWR5X3R5cGVfdGV4dCI6CSAJbnVsbCAsCQoJCSJtb2RhbGl0eV9jb2RlIjogCQlu
dWxsICwJCgkJIm1vZGFsaXR5X3RleHQiOiAJCW51bGwgLAkKCQkib3JpZ2luIjogCQkJCW51bGwg
LAoJCSJkdXJhdGlvbiI6IAkJCW51bGwKICAgICB9XSwKICAgICJET0NVTUVOVFMiOiBbewogICAg
ICAgICJkb2N1bWVudFR5cGVDb2RlIiA6IAludWxsLAoJCSJkb2N1bWVudFR5cGVMaWJlbGxlIiA6
CW51bGwsCgkJImRvY3VtZW50Q29udGVudCI6CQludWxsLAoJCSJ0YXJnZXRGb3JtYXQiOgkJICAg
IG51bGwsCgkJImVuY29kZWRGb3JtYXQiOgkJbnVsbCwKICAJCSJzdHVkeUFjY051bVRvTGluayIg
OiAgbnVsbCAsDQogICAgICAJImxpbmtMZXZlbCIgOiAgbnVsbAogICAgICB9XSwKCSJuZXh0U3Rl
cCI6IG51bGwKfQ==</inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Patient créé</name>
            <data>
              <entry>
                <string>Script</string>
                <string>/* var test_patient_id = channelMap.get(&apos;patient_id&apos;)

if ( test_patient_id &amp;&amp; test_patient_id !=&apos;&apos;  ) {
	 
	 return true;
}
return false;

*/

if ( $(&apos;patient_id&apos;) &amp;&amp; $(&apos;patient_id&apos;) !=&apos;&apos;  ) {
	 
	 return true;
}
return false;</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>/* var test_patient_id = channelMap.get(&apos;patient_id&apos;)

if ( test_patient_id &amp;&amp; test_patient_id !=&apos;&apos;  ) {
	 
	 return true;
}
return false;

*/

if ( $(&apos;patient_id&apos;) &amp;&amp; $(&apos;patient_id&apos;) !=&apos;&apos;  ) {
	 
	 return true;
}
return false;</script>
            <operator>NONE</operator>
          </rule>
          <rule>
            <sequenceNumber>1</sequenceNumber>
            <name>Accept message if &quot;msg[&apos;DOCUMENTS&apos;]&quot; exists</name>
            <data>
              <entry>
                <string>Field</string>
                <string>msg[&apos;DOCUMENTS&apos;]</string>
              </entry>
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>2</string>
              </entry>
              <entry>
                <string>Values</string>
                <list/>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if(msg[&apos;DOCUMENTS&apos;].length &gt; 0) {
	return true;
}
return false;</script>
            <operator>AND</operator>
          </rule>
        </rules>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.4.2">
      <metaDataId>134</metaDataId>
      <name>Upsert Documents - Update Study_id On Status ADMITTED</name>
      <properties class="com.mirth.connect.connectors.jdbc.DatabaseDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <driver>com.mysql.jdbc.Driver</driver>
        <url>${database_url}</url>
        <username>${database_login}</username>
        <password>Dyn@mic69</password>
        <query>var dbConn;

try {
	dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.jdbc.Driver&apos;,&apos;jdbc:mysql://localhost:3306/bea&apos;,&apos;wiis&apos;,&apos;Dyn@mic69&apos;);
	var updateQuery = &quot;UPDATE bea.document SET study_id = (SELECT id FROM bea.study WHERE study_instance_uid = &apos;&quot; + $(&apos;study_instance_uid&apos;) + &quot;&apos; LIMIT 1) WHERE patient_id = &apos;&quot; + $(&apos;patient_id&apos;) + &quot;&apos; AND study_id IS NULL AND DATE_FORMAT(`document`.`created_at`, &apos;%Y-%m-%d&apos;) = CURDATE();&quot;;
   		 var rowsUpdated = dbConn.executeUpdate(updateQuery);
   		 var updateStudyIdInDocument = 0 ;
		if (rowsUpdated&gt;0){
			updateStudyIdInDocument = 1;	
		}
		channelMap.put (&apos;updateStudyIdInDocument&apos;, updateStudyIdInDocument);
		channelMap.put (&apos;rowsUpdated&apos;, rowsUpdated);
}
 catch (e) {
    // Gestion des exceptions ici
    logger.error(&quot;Erreur lors de l&apos;exécution de la requête: &quot; + e.message);
} finally {
    // Assurez-vous de fermer la connexion à la base de données
    if (dbConn) {
        dbConn.close();
    }
}</query>
        <useScript>true</useScript>
      </properties>
      <transformer version="3.4.2">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>New Step</name>
            <script>var updateStudyIdInDocument;

updateStudyIdInDocument = 1;
channelMap.put (&apos;updateStudyIdInDocument&apos;, updateStudyIdInDocument);</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>var updateStudyIdInDocument;

updateStudyIdInDocument = 1;
channelMap.put (&apos;updateStudyIdInDocument&apos;, updateStudyIdInDocument);</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps/>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Message HL7 = ORM</name>
            <data>
              <entry>
                <string>Script</string>
                <string>if($(&apos;messageHeader&apos;)[&apos;messageType&apos;] == &apos;ORM&apos;){	
		return true
		}
	else{
		return false
	}</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>if($(&apos;messageHeader&apos;)[&apos;messageType&apos;] == &apos;ORM&apos;){	
		return true
		}
	else{
		return false
	}</script>
            <operator>NONE</operator>
          </rule>
          <rule>
            <sequenceNumber>1</sequenceNumber>
            <name>Patient créé</name>
            <data>
              <entry>
                <string>Script</string>
                <string>if ( $(&apos;patient_id&apos;) &amp;&amp; $(&apos;patient_id&apos;) !=&apos;&apos;  ) {
	 
	 return true;
}
return false;</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>if ( $(&apos;patient_id&apos;) &amp;&amp; $(&apos;patient_id&apos;) !=&apos;&apos;  ) {
	 
	 return true;
}
return false;</script>
            <operator>AND</operator>
          </rule>
          <rule>
            <sequenceNumber>2</sequenceNumber>
            <name>$(&apos;study_instance_uid&apos;) est non vide</name>
            <data>
              <entry>
                <string>Script</string>
                <string>if ( $(&apos;study_instance_uid&apos;) &amp;&amp; ($(&apos;study_instance_uid&apos;) !=&apos;&apos; || $(&apos;study_instance_uid&apos;) != null )) {
	 
	 return true;
}
return false;</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>if ( $(&apos;study_instance_uid&apos;) &amp;&amp; ($(&apos;study_instance_uid&apos;) !=&apos;&apos; || $(&apos;study_instance_uid&apos;) != null )) {
	 
	 return true;
}
return false;</script>
            <operator>AND</operator>
          </rule>
          <rule>
            <sequenceNumber>3</sequenceNumber>
            <name>Accept message if &quot;$(&apos;nextStep&apos;)&quot; equals &apos;ADMITTED&apos;</name>
            <data>
              <entry>
                <string>Field</string>
                <string>$(&apos;nextStep&apos;)</string>
              </entry>
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>1</string>
              </entry>
              <entry>
                <string>Values</string>
                <list>
                  <string>&apos;ADMITTED&apos;</string>
                </list>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if($(&apos;nextStep&apos;) == &apos;ADMITTED&apos;) {
	return true;
}
return false;</script>
            <operator>AND</operator>
          </rule>
        </rules>
      </filter>
      <transportName>Database Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.4.2">
      <metaDataId>135</metaDataId>
      <name>Create new task on document updated</name>
      <properties class="com.mirth.connect.connectors.jdbc.DatabaseDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <driver>com.mysql.jdbc.Driver</driver>
        <url>${database_url}</url>
        <username>${database_login}</username>
        <password>Dyn@mic69</password>
        <query>INSERT INTO bea.task(action, parameters)
SELECT &apos;DOCUMENT_SCANNED&apos;, id
FROM bea.document
WHERE study_id = (SELECT id FROM study WHERE study_instance_uid = ${study_instance_uid} LIMIT 1);</query>
        <useScript>false</useScript>
      </properties>
      <transformer version="3.4.2">
        <steps/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps/>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Accept message if &quot;$(&apos;updateStudyIdInDocument&apos;)&quot; equals 1</name>
            <data>
              <entry>
                <string>Field</string>
                <string>$(&apos;updateStudyIdInDocument&apos;)</string>
              </entry>
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>1</string>
              </entry>
              <entry>
                <string>Values</string>
                <list>
                  <string>1</string>
                </list>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if($(&apos;updateStudyIdInDocument&apos;) == 1) {
	return true;
}
return false;</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>Database Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.4.2">
      <metaDataId>115</metaDataId>
      <name>Upsert Form Filled ( spécif a faire : pbl correspondance CODe_FORM deeplink)</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>true</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <script>/*  RECEPTION DE REPONSE A DES QUESTIONNAIRE  */
/*-------------------------------------------*/ 
var tmp = { MSG:{}, PATIENT:{}, FORM_ANSWER:{} }
 
var tmp_response = SENT
var tmp_error_message =&quot;&quot;
var returnedValues= {}
var formFilledIdList= []


if  ( $(&apos;patient_id&apos;) ) {

	// rattachement des questionnaires  à un patient ou un  ou plusieurs examen
	//for (var i=0; i&lt; $(&apos;form_Answer&apos;).length; i++ ) {

           tmp = { MSG:{}, PATIENT:{},  FORM_ANSWER:{} }
		
		 tmp[&apos;MSG&apos;][&apos;control_id&apos;] 			= $(&apos;message_control_id&apos;)
		 
 		 tmp[&apos;PATIENT&apos;][&apos;patient_id&apos;] 		= $(&apos;patient_id&apos;)
 		 tmp[&apos;PATIENT&apos;][&apos;last_name&apos;]  	     = $(&apos;patient&apos;).last_name
		 tmp[&apos;PATIENT&apos;][&apos;first_name&apos;]  	     = $(&apos;patient&apos;).first_name
		 tmp[&apos;PATIENT&apos;][&apos;birthdate&apos;]  	     = $(&apos;patient&apos;).birthdate
		 tmp[&apos;PATIENT&apos;][&apos;study_id&apos;]  	     	= $(&apos;study_id&apos;)
 
		
		/* le document est rattaché à l&apos;accession number  qui se trouve dans le message ORU recu avec les réponses 
		On retrouve le study_ID qui correspond à l&apos;accession number du formulaire reçu lors de l&apos;insertion du  formulaire */
		
		tmp[&apos;FORM_FILLED&apos;]						= $(&apos;form_filled&apos;);

       	/*tmp[&apos;FORM_FILLED&apos;][&apos;FormCode&apos;] 			= $(&apos;form_filled&apos;)[i].formCode || null
       	tmp[&apos;FORM_FILLED&apos;][&apos;FormLabel&apos;] 			= $(&apos;form_filled&apos;)[i].formLabel || null
		tmp[&apos;FORM_FILLED&apos;][&apos;questionCode&apos;] 		= $(&apos;form_filled&apos;)[i].questionCode || null
       	tmp[&apos;FORM_FILLED&apos;][&apos;questionLabel&apos;] 		= $(&apos;form_filled&apos;)[i].questionLabel || null*/

       	 /*  a finir occurence de valeur choix multiple OBX5 */
		/*tmp[&apos;FORM_FILLED&apos;][&apos;givenAnswer&apos;] 		= $(&apos;form_filled&apos;)[i].givenAnswer || null
       	
		 tmp[&apos;FORM_FILLED&apos;][&apos;linkLevel&apos;] 			= $(&apos;form_filled&apos;)[i].linkLevel || null&#xd;
		 tmp[&apos;FORM_FILLED&apos;][&apos;studyAccNumToLink&apos;]  	= $(&apos;form_filled&apos;)[i].studyAccNumToLink|| null*/
		 
        
		  
		returnedResponse = router.routeMessage(&apos;Upsert Form Filled&apos;, JSON.stringify(tmp));
	
      	if  (returnedResponse.getStatus() ==ERROR &amp;&amp; tmp_response == SENT){
      		tmp_response = ERROR
      		tmp_error_message= tmp_error_message + JSON.stringify(returnedResponse.getMessage())
      	}else{
      	     tmp_response = SENT
      	     returnedValues= JSON.parse(returnedResponse.getMessage())
      		formFilledIdList.push ({ &apos;form_filled_id&apos;: returnedValues.form_filled_id } )
      	} 
       //}

       channelMap.put(&apos;formFilledIdListt&apos;, formFilledIdList)
       
	 return Response(tmp_response, tmp_error_message )
}
</script>
      </properties>
      <transformer version="3.4.2">
        <steps/>
        <inboundTemplate encoding="base64">eyAJIk1TSCI6IHsKCQkic2VuZGluZ0FwcGxpY2F0aW9uX25hbWVzcGFjZUlkIjogbnVsbCwgCgkJ
InNlbmRpbmdGYWNpbGl0eV9uYW1lc3BhY2VJZCI6IG51bGwsCgkJImRhdGVPclRpbWVPZk1lc3Nh
Z2VfdGltZU9mQW5FdmVudCI6IG51bGwsIAoJCSJtZXNzYWdlVHlwZSI6IG51bGwsIAoJCSJtZXNz
YWdlVHlwZV90cmlnZ2VyRXZlbnQiOiBudWxsLCAKCQkibWVzc2FnZUNvbnRyb2xJZF92YWx1ZSI6
IG51bGwsIAoJCSJhY2NlcHRBY2tub3dsZWRnbWVudFR5cGVfdmFsdWUiOiBudWxsLCAKCQkiYXBw
bGljYXRpb25BY2tub3dsZWRnbWVudFR5cGVfdmFsdWUiOiBudWxsLCAKCQkic2VxdWVuY2VOdW1i
ZXJfdmFsdWUiOiBudWxsIAoJfSwKCSJQSUQiOiB7CgkJInBhdGllbnRfaGw3X2lkZW50aWZpZXIi
OiBudWxsLCAKCQkicGF0aWVudF9pZGVudGlmaWVyTGlzdCI6IG51bGwsIAoJCSJwYXRpZW50X2xh
c3RfbmFtZSI6IG51bGwsIAoJCSJwYXRpZW50X2ZpcnN0X25hbWUiOiBudWxsLCAKCQkicGF0aWVu
dF9iaXJ0aGRhdGUiOiBudWxsLCAKCQkicGF0aWVudF9zZXgiOiBudWxsLCAKCQkicGF0aWVudF9z
dHJlZXRfYWRkcmVzcyI6IG51bGwsIAoJCSJwYXRpZW50X2NpdHkiOiBudWxsLCAKCQkicGF0aWVu
dF9zdGF0ZSI6IG51bGwsIAoJCSJwYXRpZW50X3ppcF9jb2RlIjogbnVsbCwgCgkJInBhdGllbnRf
cHJpdmF0ZV9waG9uZV9udW1iZXIiOiBudWxsLCAKCQkicGF0aWVudF9idXNpbmVzc19waG9uZV9u
dW1iZXIiOiBudWxsLCAKCQkicGF0aWVudF9tYWlsIjogbnVsbAoJfSwKICAgICJNUkciOiB7CgkJ
InByaW9yUGF0aWVudElkZW50aWZpZXJMaXN0X2lkIjogbnVsbCwKCQkicHJpb3JQYXRpZW50TmFt
ZV9mYW1pbHlMYXN0TmFtZSI6IG51bGwsCgkJInByaW9yUGF0aWVudE5hbWVfZ2l2ZW5OYW1lIiA6
IG51bGwKCX0sCgkiUFYiOiB7CgkJInZpc2l0X251bWJlciIgOiBudWxsLAoJCSJleHBlY3RlZF9h
ZG1pdF9kYXRldGltZSI6IG51bGwKCX0sCgkiSU4iOiB7CgkJImluc3VyYW5jZV90eXBlIjogIG51
bGwsCgkJIm5pciI6IG51bGwsCgkJImFtb19jb2RlX3JlZ2ltZV9jYWlzc2VfY2VudHJlIjogbnVs
bCwKCQkiYW1vX2Ryb2l0X2RlYnV0IjogbnVsbCwKCQkiYW1vX2Ryb2l0X2ZpbiI6IG51bGwKCX0s
IAoJIlJPTCI6IHsKCQkibGFzdF9uYW1lIjogIG51bGwsCgkJImZpcnN0X25hbWUiOiAgbnVsbCwK
CQkicnBwc19udW1iZXIiOiBudWxsLAoJCSJzdHJlZXQiOiAgCW51bGwsCgkJImNpdHkiOiAgbnVs
bCwKCQkiemlwX2NvZGUiOiAgbnVsbCwKCQkicGhvbmVfbnVtYmVyIjogbnVsbAoJfSwgCgkiU1RV
RElFUyI6IFt7CgkJImFjY2Vzc2lvbl9udW1iZXIiOiAgCW51bGwgLAoJCSJpbnN0YW5jZV91aWQi
OiAgCQludWxsICwKCQkic2NoZWR1bGVkX2RhdGV0aW1lIjogCW51bGwgLAkKCQkibG9jYXRpb25f
Y29kZSI6ICAgIAludWxsICwJICAgCgkJImxvY2F0aW9uX2xhYmVsIjogCSAJbnVsbCAsCQoJCSJz
dHVkeV9zdGF0dXNfY29kZSI6ICAJbnVsbCAsCQoJCSJzdHVkeV90eXBlX2NvZGUiOiAJIAludWxs
ICwJCgkJInN0dWR5X3R5cGVfdGV4dCI6CSAJbnVsbCAsCQoJCSJtb2RhbGl0eV9jb2RlIjogCQlu
dWxsICwJCgkJIm1vZGFsaXR5X3RleHQiOiAJCW51bGwgLAkKCQkib3JpZ2luIjogCQkJCW51bGwg
LAoJCSJkdXJhdGlvbiI6IAkJCW51bGwKICAgICB9XSwKICAgICJET0NVTUVOVFMiOiBbewogICAg
ICAgICJkb2N1bWVudFR5cGVDb2RlIiA6IAludWxsLAoJCSJkb2N1bWVudFR5cGVMaWJlbGxlIiA6
CW51bGwsCgkJImRvY3VtZW50Q29udGVudCI6CQludWxsLAoJCSJ0YXJnZXRGb3JtYXQiOgkJICAg
IG51bGwsCgkJImVuY29kZWRGb3JtYXQiOgkJbnVsbCwKICAgICAgCSJsaW5rTGV2ZWwiIDogIG51
bGwsCgkJInN0dWR5QWNjTnVtVG9MaW5rIiA6ICBudWxsIAogICAgICB9XSwKIkZPUk1fQU5TV0VS
IjogW3sKCQkiRm9ybUNvZGUiOiAJIAkJbnVsbCwKCQkiRm9ybUxhYmVsIiA6IAkgCQludWxsLAoJ
CSJxdWVzdGlvbkNvZGUiIDoJCW51bGwsCgkJInF1ZXN0aW9uTGFiZWwiIDoJCW51bGwsCgkJImdp
dmVuQW5zd2VyVmFsdWUiIDogCW51bGwsCgkJImdpdmVuQW5zd2VyTGFiZWwiIDogIAludWxsLAoJ
CSJsaW5rTGV2ZWwiIDoJCQludWxsLAoJCSJzdHVkeUFjY051bVRvTGluayI6CW51bGwKICAgICAg
fV0sCgkibmV4dFN0ZXAiOiBudWxsCn0=</inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Accept message if &quot;$(&apos;form_filled&apos;)&quot; does not equal null or &apos;&apos;</name>
            <data>
              <entry>
                <string>Field</string>
                <string>$(&apos;form_filled&apos;)</string>
              </entry>
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>0</string>
              </entry>
              <entry>
                <string>Values</string>
                <list>
                  <string>null</string>
                  <string>&apos;&apos;</string>
                </list>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if($(&apos;form_filled&apos;) != null &amp;&amp; $(&apos;form_filled&apos;) != &apos;&apos;) {
	return true;
}
return false;</script>
            <operator>NONE</operator>
          </rule>
          <rule>
            <sequenceNumber>1</sequenceNumber>
            <name>Accept message if &quot;$(&apos;patient_id&apos;)&quot; does not equal null or &apos;&apos;</name>
            <data>
              <entry>
                <string>Field</string>
                <string>$(&apos;patient_id&apos;)</string>
              </entry>
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>0</string>
              </entry>
              <entry>
                <string>Values</string>
                <list>
                  <string>null</string>
                  <string>&apos;&apos;</string>
                </list>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if($(&apos;patient_id&apos;) != null &amp;&amp; $(&apos;patient_id&apos;) != &apos;&apos;) {
	return true;
}
return false;</script>
            <operator>AND</operator>
          </rule>
        </rules>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>false</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.4.2">
      <metaDataId>105</metaDataId>
      <name>Patient NextStep when Admitted </name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>true</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <script>var returnedValues= {}
var tmp_response =SENT
var tmp_error_message =&quot;&quot;
 
returnedResponse = router.routeMessage(&apos;Patient NextStep&apos;,   JSON.stringify({&quot;patient_id&quot; : $(&apos;patient_id&apos;), &quot;codeSite&quot;: $(&apos;messageHeader&apos;).codeSite}));
returnedValues= JSON.parse(returnedResponse.getMessage())

if  (returnedResponse.getStatus() ==ERROR &amp;&amp; tmp_response == SENT){
      tmp_response = ERROR
      tmp_error_message= tmp_error_message + returnedResponse.getMessage()
}else{
     tmp_response = SENT
     returnedValues= JSON.parse(returnedResponse.getMessage())
     channelMap.put(&apos;patient_location_code&apos;, validate(returnedValues.patientLocationCode, &apos;&apos;, new Array()));
      channelMap.put(&apos;patient_status_code&apos;,   validate(returnedValues.patientStatusCode, &apos;&apos;, new Array()));
} 
     
return Response(returnedResponse.getStatus(),  returnedResponse.getMessage() );</script>
      </properties>
      <transformer version="3.4.2">
        <steps/>
        <inboundTemplate encoding="base64">eyAJIk1TSCI6IHsKCQkic2VuZGluZ0FwcGxpY2F0aW9uX25hbWVzcGFjZUlkIjogbnVsbCwgCgkJ
InNlbmRpbmdGYWNpbGl0eV9uYW1lc3BhY2VJZCI6IG51bGwsCgkJImRhdGVPclRpbWVPZk1lc3Nh
Z2VfdGltZU9mQW5FdmVudCI6IG51bGwsIAoJCSJtZXNzYWdlVHlwZSI6IG51bGwsIAoJCSJtZXNz
YWdlVHlwZV90cmlnZ2VyRXZlbnQiOiBudWxsLCAKCQkibWVzc2FnZUNvbnRyb2xJZF92YWx1ZSI6
IG51bGwsIAoJCSJhY2NlcHRBY2tub3dsZWRnbWVudFR5cGVfdmFsdWUiOiBudWxsLCAKCQkiYXBw
bGljYXRpb25BY2tub3dsZWRnbWVudFR5cGVfdmFsdWUiOiBudWxsLCAKCQkic2VxdWVuY2VOdW1i
ZXJfdmFsdWUiOiBudWxsIAoJfSwKCSJQSUQiOiB7CgkJInBhdGllbnRfaGw3X2lkZW50aWZpZXIi
OiBudWxsLCAKCQkicGF0aWVudF9pZGVudGlmaWVyTGlzdCI6IG51bGwsIAoJCSJwYXRpZW50X2xh
c3RfbmFtZSI6IG51bGwsIAoJCSJwYXRpZW50X2ZpcnN0X25hbWUiOiBudWxsLCAKCQkicGF0aWVu
dF9iaXJ0aGRhdGUiOiBudWxsLCAKCQkicGF0aWVudF9zZXgiOiBudWxsLCAKCQkicGF0aWVudF9z
dHJlZXRfYWRkcmVzcyI6IG51bGwsIAoJCSJwYXRpZW50X2NpdHkiOiBudWxsLCAKCQkicGF0aWVu
dF9zdGF0ZSI6IG51bGwsIAoJCSJwYXRpZW50X3ppcF9jb2RlIjogbnVsbCwgCgkJInBhdGllbnRf
cHJpdmF0ZV9waG9uZV9udW1iZXIiOiBudWxsLCAKCQkicGF0aWVudF9idXNpbmVzc19waG9uZV9u
dW1iZXIiOiBudWxsLCAKCQkicGF0aWVudF9tYWlsIjogbnVsbAoJfSwKICAgICJNUkciOiB7CgkJ
InByaW9yUGF0aWVudElkZW50aWZpZXJMaXN0X2lkIjogbnVsbCwKCQkicHJpb3JQYXRpZW50TmFt
ZV9mYW1pbHlMYXN0TmFtZSI6IG51bGwsCgkJInByaW9yUGF0aWVudE5hbWVfZ2l2ZW5OYW1lIiA6
IG51bGwKCX0sCgkiUFYiOiB7CgkJInZpc2l0X251bWJlciIgOiBudWxsLAoJCSJleHBlY3RlZF9h
ZG1pdF9kYXRldGltZSI6IG51bGwKCX0sCgkiSU4iOiB7CgkJImluc3VyYW5jZV90eXBlIjogIG51
bGwsCgkJIm5pciI6IG51bGwsCgkJImFtb19jb2RlX3JlZ2ltZV9jYWlzc2VfY2VudHJlIjogbnVs
bCwKCQkiYW1vX2Ryb2l0X2RlYnV0IjogbnVsbCwKCQkiYW1vX2Ryb2l0X2ZpbiI6IG51bGwKCX0s
IAoJIlJPTCI6IHsKCQkibGFzdF9uYW1lIjogIG51bGwsCgkJImZpcnN0X25hbWUiOiAgbnVsbCwK
CQkicnBwc19udW1iZXIiOiBudWxsLAoJCSJzdHJlZXQiOiAgCW51bGwsCgkJImNpdHkiOiAgbnVs
bCwKCQkiemlwX2NvZGUiOiAgbnVsbCwKCQkicGhvbmVfbnVtYmVyIjogbnVsbAoJfSwgCgkiU1RV
RElFUyI6IFt7CgkJImFjY2Vzc2lvbl9udW1iZXIiOiAgCW51bGwgLAoJCSJpbnN0YW5jZV91aWQi
OiAgCQludWxsICwKCQkic2NoZWR1bGVkX2RhdGV0aW1lIjogCW51bGwgLAkKCQkibG9jYXRpb25f
Y29kZSI6ICAgIAludWxsICwJICAgCgkJImxvY2F0aW9uX2xhYmVsIjogCSAJbnVsbCAsCQoJCSJz
dGF0dXNfY29kZSI6ICAJCW51bGwgLAkKCQkic3R1ZHlfdHlwZV9jb2RlIjogCSAJbnVsbCAsCQoJ
CSJzdHVkeV90eXBlX3RleHQiOgkgCW51bGwgLAkKCQkibW9kYWxpdHlfY29kZSI6IAkJbnVsbCAs
CQoJCSJtb2RhbGl0eV90ZXh0IjogCQludWxsICwJCgkJIm9yaWdpbiI6IAkJCQludWxsICwKCQki
ZHVyYXRpb24iOiAJCQludWxsIAogICAgIH1dICwKCSJuZXh0U3RlcCI6IG51bGwKfQ==</inboundTemplate>
        <outboundTemplate encoding="base64">ewoJInBhdGllbnRJZCI6ICBudWxsCn0=</outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps/>
        <inboundTemplate encoding="base64">ewoJImVycm9yIjogZmFsc2UsIAoJICJlcnJvcl9tZXNzYWdlIjogIiIgLCAKCSAicGF0aWVudF9p
ZCI6ICIiCn0K</inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Accept message if &quot;$(&apos;patient_id&apos;)&quot; does not equal null or &apos;&apos;</name>
            <data>
              <entry>
                <string>Field</string>
                <string>$(&apos;patient_id&apos;)</string>
              </entry>
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>0</string>
              </entry>
              <entry>
                <string>Values</string>
                <list>
                  <string>null</string>
                  <string>&apos;&apos;</string>
                </list>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if($(&apos;patient_id&apos;) != null &amp;&amp; $(&apos;patient_id&apos;) != &apos;&apos;) {
	return true;
}
return false;</script>
            <operator>NONE</operator>
          </rule>
          <rule>
            <sequenceNumber>1</sequenceNumber>
            <name>Accept message if &quot;$(&apos;patient_status_code&apos;)&quot; equals &apos;NOT_ADMITTED&apos; or &apos;ADMISSION_IN_PROGRESS_FROM_TERM&apos; or &apos;WAITING_ADMISSION_FROM_SECRETARY&apos; or &apos;ADMISSION_IN_PROGRESS_FROM_SEC&apos;</name>
            <data>
              <entry>
                <string>Field</string>
                <string>$(&apos;patient_status_code&apos;)</string>
              </entry>
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>1</string>
              </entry>
              <entry>
                <string>Values</string>
                <list>
                  <string>&apos;NOT_ADMITTED&apos;</string>
                  <string>&apos;ADMISSION_IN_PROGRESS_FROM_TERM&apos;</string>
                  <string>&apos;WAITING_ADMISSION_FROM_SECRETARY&apos;</string>
                  <string>&apos;ADMISSION_IN_PROGRESS_FROM_SEC&apos;</string>
                </list>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if($(&apos;patient_status_code&apos;) == &apos;NOT_ADMITTED&apos; || $(&apos;patient_status_code&apos;) == &apos;ADMISSION_IN_PROGRESS_FROM_TERM&apos; || $(&apos;patient_status_code&apos;) == &apos;WAITING_ADMISSION_FROM_SECRETARY&apos; || $(&apos;patient_status_code&apos;) == &apos;ADMISSION_IN_PROGRESS_FROM_SEC&apos;) {
	return true;
}
return false;</script>
            <operator>AND</operator>
          </rule>
          <rule>
            <sequenceNumber>2</sequenceNumber>
            <name>Accept message if &quot;$(&apos;nextStep&apos;)&quot; equals &apos;ADMITTED&apos; or &apos;ALL_STUDY_DONE&apos; or &apos;STUDY_DONE&apos;</name>
            <data>
              <entry>
                <string>Field</string>
                <string>$(&apos;nextStep&apos;)</string>
              </entry>
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>1</string>
              </entry>
              <entry>
                <string>Values</string>
                <list>
                  <string>&apos;ADMITTED&apos;</string>
                  <string>&apos;ALL_STUDY_DONE&apos;</string>
                  <string>&apos;STUDY_DONE&apos;</string>
                </list>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if($(&apos;nextStep&apos;) == &apos;ADMITTED&apos; || $(&apos;nextStep&apos;) == &apos;ALL_STUDY_DONE&apos; || $(&apos;nextStep&apos;) == &apos;STUDY_DONE&apos;) {
	return true;
}
return false;</script>
            <operator>AND</operator>
          </rule>
          <rule>
            <sequenceNumber>3</sequenceNumber>
            <name>Filtre sur les code site ORM traité concernant le sites clients </name>
            <data>
              <entry>
                <string>Script</string>
                <string>/*  on ne gère pas l&apos;orientation des message qui concernent d&apos;autres sites d&apos;examen  ces examens sont mis à DONE 
ORM_CODE_SITE_ACCUEIL est un setting qui contient une liste de code site pour lequels ont va traiter les message
*/ 

 var listCodesSitesAccueil = globalMap.get(&apos;ORM_CODE_SITE_ACCUEIL&apos;);
 
//  debug channelMap.put ( &apos;listCodesSitesAccueil&apos;, listCodesSitesAccueil); 

if( listCodesSitesAccueil == &apos;&apos; || //  si le setting est vide on prend tous les sites pas de filtrage
   est_present(listCodesSitesAccueil.split(&apos;,&apos;),  $(&apos;code_site&apos;).toString()) != -1) { //sinon  on prend que cuex  qui font   partie de la liste des sites 
	return true ;
}

return false ;</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>/*  on ne gère pas l&apos;orientation des message qui concernent d&apos;autres sites d&apos;examen  ces examens sont mis à DONE 
ORM_CODE_SITE_ACCUEIL est un setting qui contient une liste de code site pour lequels ont va traiter les message
*/ 

 var listCodesSitesAccueil = globalMap.get(&apos;ORM_CODE_SITE_ACCUEIL&apos;);
 
//  debug channelMap.put ( &apos;listCodesSitesAccueil&apos;, listCodesSitesAccueil); 

if( listCodesSitesAccueil == &apos;&apos; || //  si le setting est vide on prend tous les sites pas de filtrage
   est_present(listCodesSitesAccueil.split(&apos;,&apos;),  $(&apos;code_site&apos;).toString()) != -1) { //sinon  on prend que cuex  qui font   partie de la liste des sites 
	return true ;
}

return false ;</script>
            <operator>AND</operator>
          </rule>
        </rules>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.4.2">
      <metaDataId>84</metaDataId>
      <name>Set Study status Done  ORM CM ou SIU14 complete</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>true</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <script>
tmp = { accession_number: &quot;&quot;, instance_uid: &quot;&quot; } ;
var tmp_response =SENT
var tmp_error_message =&quot;&quot;
var returnedValues= {}

// s&apos;il y a plusieurs examens dans le message , on traite tous les examens comme termimés

tmp[&apos;patient_id&apos;] 	=  $(&apos;patient_id&apos;)
	
for (var i=0; i &lt; $(&apos;studies&apos;).length; i++ ) {
		study_id_done=null
		tmp[&apos;accession_number&apos;] 	=  $(&apos;studies&apos;)[i].accession_number
		tmp[&apos;instance_uid&apos;] 	=  $(&apos;studies&apos;)[i].instance_uid
		tmp[&apos;codeSite&apos;]		=  $(&apos;messageHeader&apos;).codeSite

		returnedResponse= router.routeMessage(&apos;Set Study status Done&apos;, JSON.stringify(tmp));
	
      	if  (returnedResponse.getStatus() ==ERROR &amp;&amp; tmp_response == SENT){
      		tmp_response = ERROR
      		tmp_error_message= tmp_error_message + JSON.parse(returnedResponse.getMessage())
      	}else{
      	     tmp_response = SENT
      	     returnedValues= JSON.parse(returnedResponse.getMessage())
      	} 
	     
} 

return Response(tmp_response, tmp_error_message )</script>
      </properties>
      <transformer version="3.4.2">
        <steps/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Accept message if &quot;$(&apos;nextStep&apos;)&quot; equals &apos;STUDY_DONE&apos;</name>
            <data>
              <entry>
                <string>Field</string>
                <string>$(&apos;nextStep&apos;)</string>
              </entry>
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>1</string>
              </entry>
              <entry>
                <string>Values</string>
                <list>
                  <string>&apos;STUDY_DONE&apos;</string>
                </list>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if($(&apos;nextStep&apos;) == &apos;STUDY_DONE&apos;) {
	return true;
}
return false;</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.4.2">
      <metaDataId>90</metaDataId>
      <name>Cancel Admission</name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>true</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <host>http://localhost/beacore/patients/${patient_id}</host>
        <useProxyServer>false</useProxyServer>
        <proxyAddress></proxyAddress>
        <proxyPort></proxyPort>
        <method>put</method>
        <headers class="linked-hash-map">
          <entry>
            <string>Authorization</string>
            <list>
              <string>Bearer ${accessToken}</string>
            </list>
          </entry>
          <entry>
            <string>Content-Type</string>
            <list>
              <string>application/json</string>
            </list>
          </entry>
        </headers>
        <parameters class="linked-hash-map"/>
        <responseXmlBody>false</responseXmlBody>
        <responseParseMultipart>true</responseParseMultipart>
        <responseIncludeMetadata>false</responseIncludeMetadata>
        <responseBinaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</responseBinaryMimeTypes>
        <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
        <multipart>false</multipart>
        <useAuthentication>false</useAuthentication>
        <authenticationType>Basic</authenticationType>
        <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
        <username></username>
        <password></password>
        <content>${message.transformedData}</content>
        <contentType>application/json</contentType>
        <dataTypeBinary>false</dataTypeBinary>
        <charset>UTF-8</charset>
        <socketTimeout>30000</socketTimeout>
      </properties>
      <transformer version="3.4.2">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>Mapping patient</name>
            <script>const patient = channelMap.get(&apos;patientToFind&apos;)


tmp[&apos;patient&apos;][&apos;location_code&apos;] =   null
tmp[&apos;patient&apos;][&apos;patient_status_code&apos;] =  &apos;NOT_ADMITTED&apos;</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>const patient = channelMap.get(&apos;patientToFind&apos;)


tmp[&apos;patient&apos;][&apos;location_code&apos;] =   null
tmp[&apos;patient&apos;][&apos;patient_status_code&apos;] =  &apos;NOT_ADMITTED&apos;</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64">eyAJIk1TSCI6IHsKCQkic2VuZGluZ0FwcGxpY2F0aW9uX25hbWVzcGFjZUlkIjogbnVsbCwgCgkJ
InNlbmRpbmdGYWNpbGl0eV9uYW1lc3BhY2VJZCI6IG51bGwsCgkJImRhdGVPclRpbWVPZk1lc3Nh
Z2VfdGltZU9mQW5FdmVudCI6IG51bGwsIAoJCSJtZXNzYWdlVHlwZSI6IG51bGwsIAoJCSJtZXNz
YWdlVHlwZV90cmlnZ2VyRXZlbnQiOiBudWxsLCAKCQkibWVzc2FnZUNvbnRyb2xJZF92YWx1ZSI6
IG51bGwsIAoJCSJhY2NlcHRBY2tub3dsZWRnbWVudFR5cGVfdmFsdWUiOiBudWxsLCAKCQkiYXBw
bGljYXRpb25BY2tub3dsZWRnbWVudFR5cGVfdmFsdWUiOiBudWxsLCAKCQkic2VxdWVuY2VOdW1i
ZXJfdmFsdWUiOiBudWxsIAoJfSwKCSJQSUQiOiB7CgkJInBhdGllbnRfaGw3X2lkZW50aWZpZXIi
OiBudWxsLCAKCQkicGF0aWVudF9pZGVudGlmaWVyTGlzdCI6IG51bGwsIAoJCSJwYXRpZW50X2xh
c3RfbmFtZSI6IG51bGwsIAoJCSJwYXRpZW50X2ZpcnN0X25hbWUiOiBudWxsLCAKCQkicGF0aWVu
dF9iaXJ0aGRhdGUiOiBudWxsLCAKCQkicGF0aWVudF9zZXgiOiBudWxsLCAKCQkicGF0aWVudF9z
dHJlZXRfYWRkcmVzcyI6IG51bGwsIAoJCSJwYXRpZW50X2NpdHkiOiBudWxsLCAKCQkicGF0aWVu
dF9zdGF0ZSI6IG51bGwsIAoJCSJwYXRpZW50X3ppcF9jb2RlIjogbnVsbCwgCgkJInBhdGllbnRf
cHJpdmF0ZV9waG9uZV9udW1iZXIiOiBudWxsLCAKCQkicGF0aWVudF9idXNpbmVzc19waG9uZV9u
dW1iZXIiOiBudWxsLCAKCQkicGF0aWVudF9tYWlsIjogbnVsbAoJfSwKICAgICJNUkciOiB7CgkJ
InByaW9yUGF0aWVudElkZW50aWZpZXJMaXN0X2lkIjogbnVsbCwKCQkicHJpb3JQYXRpZW50TmFt
ZV9mYW1pbHlMYXN0TmFtZSI6IG51bGwsCgkJInByaW9yUGF0aWVudE5hbWVfZ2l2ZW5OYW1lIiA6
IG51bGwKCX0sCgkiUFYiOiB7CgkJInZpc2l0X251bWJlciIgOiBudWxsLAoJCSJleHBlY3RlZF9h
ZG1pdF9kYXRldGltZSI6IG51bGwKCX0sCgkiSU4iOiB7CgkJImluc3VyYW5jZV90eXBlIjogIG51
bGwsCgkJIm5pciI6IG51bGwsCgkJImFtb19jb2RlX3JlZ2ltZV9jYWlzc2VfY2VudHJlIjogbnVs
bCwKCQkiYW1vX2Ryb2l0X2RlYnV0IjogbnVsbCwKCQkiYW1vX2Ryb2l0X2ZpbiI6IG51bGwKCX0s
IAoJIlJPTCI6IHsKCQkibGFzdF9uYW1lIjogIG51bGwsCgkJImZpcnN0X25hbWUiOiAgbnVsbCwK
CQkicnBwc19udW1iZXIiOiBudWxsLAoJCSJzdHJlZXQiOiAgCW51bGwsCgkJImNpdHkiOiAgbnVs
bCwKCQkiemlwX2NvZGUiOiAgbnVsbCwKCQkicGhvbmVfbnVtYmVyIjogbnVsbAoJfSwgCgkiU1RV
RElFUyI6IFt7CgkJImFjY2Vzc2lvbl9udW1iZXIiOiAgCW51bGwgLAoJCSJpbnN0YW5jZV91aWQi
OiAgCQludWxsICwKCQkic2NoZWR1bGVkX2RhdGV0aW1lIjogCW51bGwgLAkKCQkibG9jYXRpb25f
Y29kZSI6ICAgIAludWxsICwJICAgCgkJImxvY2F0aW9uX2xhYmVsIjogCSAJbnVsbCAsCQoJCSJz
dGF0dXNfY29kZSI6ICAJCW51bGwgLAkKCQkic3R1ZHlfdHlwZV9jb2RlIjogCSAJbnVsbCAsCQoJ
CSJzdHVkeV90eXBlX3RleHQiOgkgCW51bGwgLAkKCQkibW9kYWxpdHlfY29kZSI6IAkJbnVsbCAs
CQoJCSJtb2RhbGl0eV90ZXh0IjogCQludWxsICwJCgkJIm9yaWdpbiI6IAkJCQludWxsICwKCQki
ZHVyYXRpb24iOiAJCQludWxsIAogICAgIH1dICwKCSJuZXh0U3RlcCI6IG51bGwKfQ==</inboundTemplate>
        <outboundTemplate encoding="base64">ewoJInBhdGllbnQiOiB7CiAgICAgICAgImxvY2F0aW9uX2NvZGUiOiBudWxsLAogICAgICAgICJw
YXRpZW50X3N0YXR1c19jb2RlIjogIiIKCX0KfQoK</outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>check Cancel admission</name>
            <script>var responseStatusLine = $(&apos;responseStatusLine&apos;);
var responseStatusCode = parseInt(responseStatusLine.split(&apos; &apos;)[1], 10);
// var responseStatusMessage = responseStatusLine.substr(responseStatusLine.indexOf(&apos; &apos;)).trim();
     
try {
      var result = checkResponse( &apos;PARSE&apos; ,&apos;Cancel Admission&apos;, &apos;http://localhost/beacore/patients/(patient_id)&apos;,&apos;PUT&apos;,responseStatusCode, msg)
     

} catch(e) {
	logger.error(e);
}</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>var responseStatusLine = $(&apos;responseStatusLine&apos;);
var responseStatusCode = parseInt(responseStatusLine.split(&apos; &apos;)[1], 10);
// var responseStatusMessage = responseStatusLine.substr(responseStatusLine.indexOf(&apos; &apos;)).trim();
     
try {
      var result = checkResponse( &apos;PARSE&apos; ,&apos;Cancel Admission&apos;, &apos;http://localhost/beacore/patients/(patient_id)&apos;,&apos;PUT&apos;,responseStatusCode, msg)
     

} catch(e) {
	logger.error(e);
}</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64">ewogICJwYXRpZW50SWQiIDogbnVsbAp9</inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Accept message if &quot;$(&apos;patient_id&apos;)&quot; does not equal null or &apos;&apos;</name>
            <data>
              <entry>
                <string>Field</string>
                <string>$(&apos;patient_id&apos;)</string>
              </entry>
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>0</string>
              </entry>
              <entry>
                <string>Values</string>
                <list>
                  <string>null</string>
                  <string>&apos;&apos;</string>
                </list>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if($(&apos;patient_id&apos;) != null &amp;&amp; $(&apos;patient_id&apos;) != &apos;&apos;) {
	return true;
}
return false;</script>
            <operator>NONE</operator>
          </rule>
          <rule>
            <sequenceNumber>1</sequenceNumber>
            <name>Accept message if &quot;msg[&apos;nextStep&apos;]&quot; equals &apos;ADMISSION_CANCELED&apos;</name>
            <data>
              <entry>
                <string>Field</string>
                <string>msg[&apos;nextStep&apos;]</string>
              </entry>
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>1</string>
              </entry>
              <entry>
                <string>Values</string>
                <list>
                  <string>&apos;ADMISSION_CANCELED&apos;</string>
                </list>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if(msg[&apos;nextStep&apos;] == &apos;ADMISSION_CANCELED&apos;) {
	return true;
}
return false;</script>
            <operator>AND</operator>
          </rule>
        </rules>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map

 
var error_status = SENT
var error_message = &quot;&quot;;
var error = false;
var patient_id = null

channelName = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance().getDeployedChannelById(channelId).getName();

var destinationConnectors = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance().getDeployedChannelByName(channelName).getEnabledDestinationConnectors().iterator();
var json_error = JSON.parse(getChannelError(destinationConnectors, channelName, responseMap, 2));


// pour test  plantage 
//json_error={&quot;error&quot;: true, &quot;error_message&quot;: &apos;test plantage &apos;}
// error_status=ERROR;
 



error_message = json_error.error_message;


// suppression du détail des token dans les LOG 
error_message = error_message.replace(/\&quot;token\&quot;:\&quot;(.*)\&quot;/g, &apos;\&quot;token\&quot;:\&quot;OK&quot;&apos;);

if   (json_error.error) {
	error= true
	error_status=ERROR
}

patient_id =channelMap.get(&apos;patient_id&apos;)
	
return  Response(error_status,  JSON.stringify({&quot;error&quot;: error, &quot;error_message&quot;: error_message,  &quot;patient_id&quot;: patient_id}   )  )  ; 
				     


</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="3.4.2">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>PRODUCTION</messageStorageMode>
    <encryptData>false</encryptData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>false</storeAttachments>
    <tags class="linked-hash-set"/>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="3.4.2">
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <pruneMetaDataDays>1</pruneMetaDataDays>
    <archiveEnabled>false</archiveEnabled>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <codeTemplateLibraries/>
</channel>